"use strict";(self.webpackChunkmyblog=self.webpackChunkmyblog||[]).push([[1694],{60913:(n,s,a)=>{a.r(s),a.d(s,{default:()=>Q});var e=a(60329);const t=(0,e.uE)('<p><code>Redux</code>的作者<code>Dan</code>加入<code>React</code>核心团队后的一大贡献就是“将<code>Redux</code>的理念带入<code>React</code>”。</p><p>这里面最显而易见的影响莫过于<code>useState</code>与<code>useReducer</code>这两个<code>Hook</code>。本质来说，<code>useState</code>只是预置了<code>reducer</code>的<code>useReducer</code>。</p><p>本节我们来学习<code>useState</code>与<code>useReducer</code>的实现。</p><h2 id="流程概览" tabindex="-1"><a class="header-anchor" href="#流程概览" aria-hidden="true">#</a> 流程概览</h2><p>我们将这两个<code>Hook</code>的工作流程分为<code>声明阶段</code>和<code>调用阶段</code>，对于：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useReducer</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>num<span class="token punctuation">,</span> updateNum<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>state<span class="token punctuation">.</span>a<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>  \n      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">updateNum</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=&gt;</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>num<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>  \n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>声明阶段</code>即<code>App</code>调用时，会依次执行<code>useReducer</code>与<code>useState</code>方法。</p><p><code>调用阶段</code>即点击按钮后，<code>dispatch</code>或<code>updateNum</code>被调用时。</p><h2 id="声明阶段" tabindex="-1"><a class="header-anchor" href="#声明阶段" aria-hidden="true">#</a> 声明阶段</h2>',9),o=(0,e._)("code",null,"FunctionComponent",-1),p=(0,e._)("code",null,"render阶段",-1),c=(0,e._)("code",null,"beginWork",-1),l={href:"https://github.com/acdlite/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberBeginWork.new.js#L1419",target:"_blank",rel:"noopener noreferrer"},r=(0,e._)("p",null,[(0,e.Uk)("该方法内部会执行"),(0,e._)("code",null,"FunctionComponent"),(0,e.Uk)("对应函数（即"),(0,e._)("code",null,"fiber.type"),(0,e.Uk)("）。")],-1),u={href:"https://github.com/acdlite/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberHooks.new.js#L415",target:"_blank",rel:"noopener noreferrer"},i=(0,e.uE)('<p>对于这两个<code>Hook</code>，他们的源码如下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token parameter">initialState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> dispatcher <span class="token operator">=</span> <span class="token function">resolveDispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> dispatcher<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span>initialState<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">useReducer</span><span class="token punctuation">(</span><span class="token parameter">reducer<span class="token punctuation">,</span> initialArg<span class="token punctuation">,</span> init</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> dispatcher <span class="token operator">=</span> <span class="token function">resolveDispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> dispatcher<span class="token punctuation">.</span><span class="token function">useReducer</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> initialArg<span class="token punctuation">,</span> init<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',2),d=(0,e._)("code",null,"Hook",-1),k=(0,e._)("p",null,[(0,e.Uk)("我们分别讲解"),(0,e._)("code",null,"mount"),(0,e.Uk)("与"),(0,e._)("code",null,"update"),(0,e.Uk)("两个场景。")],-1),v=(0,e._)("h3",{id:"mount时",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#mount时","aria-hidden":"true"},"#"),(0,e.Uk)(" mount时")],-1),m=(0,e._)("code",null,"mount",-1),b=(0,e._)("code",null,"useReducer",-1),h={href:"https://github.com/acdlite/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberHooks.new.js#L638",target:"_blank",rel:"noopener noreferrer"},g=(0,e._)("code",null,"useState",-1),y={href:"https://github.com/acdlite/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberHooks.new.js#L1143",target:"_blank",rel:"noopener noreferrer"},f=(0,e.uE)('<p>我们来简单对比这这两个方法：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> mountState<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>\n  <span class="token literal-property property">initialState</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">S</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token constant">S</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">S</span><span class="token punctuation">,</span> Dispatch<span class="token operator">&lt;</span>BasicStateAction<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 创建并返回当前的hook</span>\n  <span class="token keyword">const</span> hook <span class="token operator">=</span> <span class="token function">mountWorkInProgressHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// ...赋值初始state</span>\n\n  <span class="token comment">// 创建queue</span>\n  <span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token punctuation">(</span>hook<span class="token punctuation">.</span>queue <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">pending</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">dispatch</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">lastRenderedReducer</span><span class="token operator">:</span> basicStateReducer<span class="token punctuation">,</span>\n    <span class="token literal-property property">lastRenderedState</span><span class="token operator">:</span> <span class="token punctuation">(</span>initialState<span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// ...创建dispatch</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span>hook<span class="token punctuation">.</span>memoizedState<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> mountReducer<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token punctuation">,</span> <span class="token constant">I</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>\n  <span class="token function-variable function">reducer</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token constant">S</span><span class="token punctuation">,</span> <span class="token constant">A</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">S</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">initialArg</span><span class="token operator">:</span> <span class="token constant">I</span><span class="token punctuation">,</span>\n  init<span class="token operator">?</span><span class="token operator">:</span> <span class="token parameter"><span class="token constant">I</span></span> <span class="token operator">=&gt;</span> <span class="token constant">S</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">S</span><span class="token punctuation">,</span> Dispatch<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 创建并返回当前的hook</span>\n  <span class="token keyword">const</span> hook <span class="token operator">=</span> <span class="token function">mountWorkInProgressHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// ...赋值初始state</span>\n\n  <span class="token comment">// 创建queue</span>\n  <span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token punctuation">(</span>hook<span class="token punctuation">.</span>queue <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">pending</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">dispatch</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">lastRenderedReducer</span><span class="token operator">:</span> reducer<span class="token punctuation">,</span>\n    <span class="token literal-property property">lastRenderedState</span><span class="token operator">:</span> <span class="token punctuation">(</span>initialState<span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// ...创建dispatch</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span>hook<span class="token punctuation">.</span>memoizedState<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中<code>mountWorkInProgressHook</code>方法会创建并返回对应<code>hook</code>，对应<code>极简Hooks实现</code>中<code>useState</code>方法的<code>isMount</code>逻辑部分。</p><p>可以看到，<code>mount</code>时这两个<code>Hook</code>的唯一区别为<code>queue</code>参数的<code>lastRenderedReducer</code>字段。</p><p><code>queue</code>的数据结构如下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token punctuation">(</span>hook<span class="token punctuation">.</span>queue <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 与极简实现中的同名字段意义相同，保存update对象</span>\n  <span class="token literal-property property">pending</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n  <span class="token comment">// 保存dispatchAction.bind()的值</span>\n  <span class="token literal-property property">dispatch</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n  <span class="token comment">// 上一次render时使用的reducer</span>\n  <span class="token literal-property property">lastRenderedReducer</span><span class="token operator">:</span> reducer<span class="token punctuation">,</span>\n  <span class="token comment">// 上一次render时的state</span>\n  <span class="token literal-property property">lastRenderedState</span><span class="token operator">:</span> <span class="token punctuation">(</span>initialState<span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>useReducer</code>的<code>lastRenderedReducer</code>为传入的<code>reducer</code>参数。<code>useState</code>的<code>lastRenderedReducer</code>为<code>basicStateReducer</code>。</p><p><code>basicStateReducer</code>方法如下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> basicStateReducer<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>state<span class="token operator">:</span> <span class="token constant">S</span><span class="token punctuation">,</span> <span class="token literal-property property">action</span><span class="token operator">:</span> BasicStateAction<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">S</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">typeof</span> action <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">?</span> <span class="token function">action</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">:</span> action<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可见，<code>useState</code>即<code>reducer</code>参数为<code>basicStateReducer</code>的<code>useReducer</code>。</p><p><code>mount</code>时的整体运行逻辑与<code>极简实现</code>的<code>isMount</code>逻辑类似，你可以对照着看。</p><h3 id="update时" tabindex="-1"><a class="header-anchor" href="#update时" aria-hidden="true">#</a> update时</h3>',12),R=(0,e._)("code",null,"mount",-1),_=(0,e._)("code",null,"update",-1),w=(0,e._)("code",null,"useReducer",-1),S=(0,e._)("code",null,"useState",-1),U={href:"https://github.com/acdlite/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberHooks.new.js#L665",target:"_blank",rel:"noopener noreferrer"},j=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> updateReducer<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token punctuation">,</span> <span class="token constant">I</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>\n  <span class="token function-variable function">reducer</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token constant">S</span><span class="token punctuation">,</span> <span class="token constant">A</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">S</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">initialArg</span><span class="token operator">:</span> <span class="token constant">I</span><span class="token punctuation">,</span>\n  init<span class="token operator">?</span><span class="token operator">:</span> <span class="token parameter"><span class="token constant">I</span></span> <span class="token operator">=&gt;</span> <span class="token constant">S</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">S</span><span class="token punctuation">,</span> Dispatch<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 获取当前hook</span>\n  <span class="token keyword">const</span> hook <span class="token operator">=</span> <span class="token function">updateWorkInProgressHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> queue <span class="token operator">=</span> hook<span class="token punctuation">.</span>queue<span class="token punctuation">;</span>\n  \n  queue<span class="token punctuation">.</span>lastRenderedReducer <span class="token operator">=</span> reducer<span class="token punctuation">;</span>\n\n  <span class="token comment">// ...同update与updateQueue类似的更新逻辑</span>\n\n  <span class="token keyword">const</span> <span class="token literal-property property">dispatch</span><span class="token operator">:</span> Dispatch<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>dispatch<span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span>hook<span class="token punctuation">.</span>memoizedState<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>整个流程可以概括为一句话：</p><blockquote><p>找到对应的<code>hook</code>，根据<code>update</code>计算该<code>hook</code>的新<code>state</code>并返回。</p></blockquote><p><code>mount</code>时获取当前<code>hook</code>使用的是<code>mountWorkInProgressHook</code>，而<code>update</code>时使用的是<code>updateWorkInProgressHook</code>，这里的原因是：</p><ul><li><p><code>mount</code>时可以确定是调用<code>ReactDOM.render</code>或相关初始化<code>API</code>产生的<code>更新</code>，只会执行一次。</p></li><li><p><code>update</code>可能是在事件回调或副作用中触发的<code>更新</code>或者是<code>render阶段</code>触发的<code>更新</code>，为了避免组件无限循环<code>更新</code>，后者需要区别对待。</p></li></ul><p>举个<code>render阶段</code>触发的<code>更新</code>的例子：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>num<span class="token punctuation">,</span> updateNum<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \n  <span class="token function">updateNum</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">updateNum</span><span class="token punctuation">(</span><span class="token parameter">num</span> <span class="token operator">=&gt;</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>num<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>  \n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>App</code>调用时，代表已经进入<code>render阶段</code>执行<code>renderWithHooks</code>。</p><p>在<code>App</code>内部，调用<code>updateNum</code>会触发一次<code>更新</code>。如果不对这种情况下触发的更新作出限制，那么这次<code>更新</code>会开启一次新的<code>render阶段</code>，最终会无限循环更新。</p><p>基于这个原因，<code>React</code>用一个标记变量<code>didScheduleRenderPhaseUpdate</code>判断是否是<code>render阶段</code>触发的更新。</p><p><code>updateWorkInProgressHook</code>方法也会区分这两种情况来获取对应<code>hook</code>。</p>',11),q=(0,e._)("code",null,"hook",-1),x=(0,e._)("code",null,"hook",-1),A=(0,e._)("code",null,"state",-1),H=(0,e._)("code",null,"state",-1),W=(0,e._)("h2",{id:"调用阶段",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#调用阶段","aria-hidden":"true"},"#"),(0,e.Uk)(" 调用阶段")],-1),I={href:"https://github.com/acdlite/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberHooks.new.js#L1662",target:"_blank",rel:"noopener noreferrer"},F=(0,e._)("code",null,"FunctionComponent",-1),P=(0,e._)("code",null,"fiber",-1),N=(0,e._)("code",null,"hook.queue",-1),D=(0,e._)("code",null,"bind",-1),L=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">dispatchAction</span><span class="token punctuation">(</span><span class="token parameter">fiber<span class="token punctuation">,</span> queue<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n  <span class="token comment">// ...创建update</span>\n  <span class="token keyword">var</span> update <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">eventTime</span><span class="token operator">:</span> eventTime<span class="token punctuation">,</span>\n    <span class="token literal-property property">lane</span><span class="token operator">:</span> lane<span class="token punctuation">,</span>\n    <span class="token literal-property property">suspenseConfig</span><span class="token operator">:</span> suspenseConfig<span class="token punctuation">,</span>\n    <span class="token literal-property property">action</span><span class="token operator">:</span> action<span class="token punctuation">,</span>\n    <span class="token literal-property property">eagerReducer</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">eagerState</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">next</span><span class="token operator">:</span> <span class="token keyword">null</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span> \n\n  <span class="token comment">// ...将update加入queue.pending</span>\n  \n  <span class="token keyword">var</span> alternate <span class="token operator">=</span> fiber<span class="token punctuation">.</span>alternate<span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>fiber <span class="token operator">===</span> currentlyRenderingFiber$1 <span class="token operator">||</span> alternate <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> alternate <span class="token operator">===</span> currentlyRenderingFiber$1<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// render阶段触发的更新</span>\n    didScheduleRenderPhaseUpdateDuringThisPass <span class="token operator">=</span> didScheduleRenderPhaseUpdate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>fiber<span class="token punctuation">.</span>lanes <span class="token operator">===</span> NoLanes <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>alternate <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> alternate<span class="token punctuation">.</span>lanes <span class="token operator">===</span> NoLanes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// ...fiber的updateQueue为空，优化路径</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">scheduleUpdateOnFiber</span><span class="token punctuation">(</span>fiber<span class="token punctuation">,</span> lane<span class="token punctuation">,</span> eventTime<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>整个过程可以概括为：</p><blockquote><p>创建<code>update</code>，将<code>update</code>加入<code>queue.pending</code>中，并开启调度。</p></blockquote><p>这里值得注意的是<code>if...else...</code>逻辑，其中：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>fiber <span class="token operator">===</span> currentlyRenderingFiber$1 <span class="token operator">||</span> alternate <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> alternate <span class="token operator">===</span> currentlyRenderingFiber$1<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>currentlyRenderingFiber</code>即<code>workInProgress</code>，<code>workInProgress</code>存在代表当前处于<code>render阶段</code>。</p><p>触发<code>更新</code>时通过<code>bind</code>预先保存的<code>fiber</code>与<code>workInProgress</code>全等，代表本次<code>更新</code>发生于<code>FunctionComponent</code>对应<code>fiber</code>的<code>render阶段</code>。</p><p>所以这是一个<code>render阶段</code>触发的<code>更新</code>，需要标记变量<code>didScheduleRenderPhaseUpdate</code>，后续单独处理。</p><p>再来关注：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>fiber<span class="token punctuation">.</span>lanes <span class="token operator">===</span> NoLanes <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>alternate <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> alternate<span class="token punctuation">.</span>lanes <span class="token operator">===</span> NoLanes<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>fiber.lanes</code>保存<code>fiber</code>上存在的<code>update</code>的<code>优先级</code>。</p><p><code>fiber.lanes === NoLanes</code>意味着<code>fiber</code>上不存在<code>update</code>。</p><p>我们已经知道，通过<code>update</code>计算<code>state</code>发生在<code>声明阶段</code>，这是因为该<code>hook</code>上可能存在多个不同<code>优先级</code>的<code>update</code>，最终<code>state</code>的值由多个<code>update</code>共同决定。</p><p>但是当<code>fiber</code>上不存在<code>update</code>，则<code>调用阶段</code>创建的<code>update</code>为该<code>hook</code>上第一个<code>update</code>，在<code>声明阶段</code>计算<code>state</code>时也只依赖于该<code>update</code>，完全不需要进入<code>声明阶段</code>再计算<code>state</code>。</p><p>这样做的好处是：如果计算出的<code>state</code>与该<code>hook</code>之前保存的<code>state</code>一致，那么完全不需要开启一次调度。即使计算出的<code>state</code>与该<code>hook</code>之前保存的<code>state</code>不一致，在<code>声明阶段</code>也可以直接使用<code>调用阶段</code>已经计算出的<code>state</code>。</p>',15),C={href:"https://github.com/acdlite/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberHooks.new.js#L1727",target:"_blank",rel:"noopener noreferrer"},T=(0,e._)("code",null,"state",-1),z=(0,e.uE)('<h2 id="小tip" tabindex="-1"><a class="header-anchor" href="#小tip" aria-hidden="true">#</a> 小Tip</h2><p>我们通常认为，<code>useReducer(reducer, initialState)</code>的传参为初始化参数，在以后的调用中都不可变。</p><p>但是在<code>updateReducer</code>方法中，可以看到<code>lastRenderedReducer</code>在每次调用时都会重新赋值。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">updateReducer</span><span class="token punctuation">(</span><span class="token parameter">reducer<span class="token punctuation">,</span> initialArg<span class="token punctuation">,</span> init</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n\n  queue<span class="token punctuation">.</span>lastRenderedReducer <span class="token operator">=</span> reducer<span class="token punctuation">;</span>\n\n  <span class="token comment">// ...</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说，<code>reducer</code>参数是随时可变的。</p>',5),E={class:"custom-container details"},B=(0,e._)("summary",null,"reducer可变Demo",-1),O=(0,e._)("p",null,[(0,e.Uk)("每秒"),(0,e._)("code",null,"useReducer"),(0,e.Uk)("使用的"),(0,e._)("code",null,"reducer"),(0,e.Uk)("会改变一次")],-1),Z=(0,e._)("p",null,[(0,e.Uk)("点击按钮后会随时间不同会出现"),(0,e._)("code",null,"+1"),(0,e.Uk)("或"),(0,e._)("code",null,"-1"),(0,e.Uk)("的效果")],-1),$=(0,e._)("strong",null,"582",-1),M={},Q=(0,a(13860).Z)(M,[["render",function(n,s){const a=(0,e.up)("ExternalLinkIcon"),M=(0,e.up)("RouterLink");return(0,e.wg)(),(0,e.iD)("div",null,[t,(0,e._)("p",null,[(0,e.Uk)("当"),o,(0,e.Uk)("进入"),p,(0,e.Uk)("的"),c,(0,e.Uk)("时，会调用"),(0,e._)("a",l,[(0,e.Uk)("renderWithHooks"),(0,e.Wm)(a)]),(0,e.Uk)("方法。")]),r,(0,e._)("blockquote",null,[(0,e._)("p",null,[(0,e.Uk)("你可以在"),(0,e._)("a",u,[(0,e.Uk)("这里"),(0,e.Wm)(a)]),(0,e.Uk)("看到这段逻辑")])]),i,(0,e._)("p",null,[(0,e.Uk)("正如上一节"),(0,e.Wm)(M,{to:"/react/hooks/structure.html#dispatcher"},{default:(0,e.w5)((()=>[(0,e.Uk)("dispatcher")])),_:1}),(0,e.Uk)("所说，在不同场景下，同一个"),d,(0,e.Uk)("会调用不同处理函数。")]),k,v,(0,e._)("p",null,[m,(0,e.Uk)("时，"),b,(0,e.Uk)("会调用"),(0,e._)("a",h,[(0,e.Uk)("mountReducer"),(0,e.Wm)(a)]),(0,e.Uk)("，"),g,(0,e.Uk)("会调用"),(0,e._)("a",y,[(0,e.Uk)("mountState"),(0,e.Wm)(a)]),(0,e.Uk)("。")]),f,(0,e._)("p",null,[(0,e.Uk)("如果说"),R,(0,e.Uk)("时这两者还有区别，那"),_,(0,e.Uk)("时，"),w,(0,e.Uk)("与"),S,(0,e.Uk)("调用的则是同一个函数"),(0,e._)("a",U,[(0,e.Uk)("updateReducer"),(0,e.Wm)(a)]),(0,e.Uk)("。")]),j,(0,e._)("p",null,[(0,e.Uk)("获取对应"),q,(0,e.Uk)("，接下来会根据"),x,(0,e.Uk)("中保存的"),A,(0,e.Uk)("计算新的"),H,(0,e.Uk)("，这个步骤同"),(0,e.Wm)(M,{to:"/react/state/update.html"},{default:(0,e.w5)((()=>[(0,e.Uk)("Update一节")])),_:1}),(0,e.Uk)("一致。")]),W,(0,e._)("p",null,[(0,e.Uk)("调用阶段会执行"),(0,e._)("a",I,[(0,e.Uk)("dispatchAction"),(0,e.Wm)(a)]),(0,e.Uk)("，此时该"),F,(0,e.Uk)("对应的"),P,(0,e.Uk)("以及"),N,(0,e.Uk)("已经通过调用"),D,(0,e.Uk)("方法预先作为参数传入。")]),L,(0,e._)("blockquote",null,[(0,e._)("p",null,[(0,e.Uk)("你可以在"),(0,e._)("a",C,[(0,e.Uk)("这里"),(0,e.Wm)(a)]),(0,e.Uk)("看到这段提前计算"),T,(0,e.Uk)("的逻辑")])]),z,(0,e._)("details",E,[B,O,Z,(0,e._)("p",null,[(0,e.Wm)(M,{to:"/react/me.html"},{default:(0,e.w5)((()=>[(0,e.Uk)("关注公众号")])),_:1}),(0,e.Uk)("，后台回复"),$,(0,e.Uk)("获得在线Demo地址")])])])}]])},13860:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}},44162:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e=JSON.parse('{"key":"v-1896c3b2","path":"/react/hooks/usestate.html","title":"useState与useReducer","lang":"zh-CN","frontmatter":{"title":"useState与useReducer","author":"BetaSu","tag":["React"],"summary":"Redux的作者Dan加入React核心团队后的一大贡献就是“将Redux的理念带入React”。 这里面最显而易见的影响莫过于useState与useReducer这两个Hook。本质来说，useState只是预置了reducer的useReducer。 本节我们来学习useState与useReducer的实现。 流程概览 我们将这两个Hook的工作流程","head":[["meta",{"property":"og:url","content":"https://0808200.xyz/react/hooks/usestate.html"}],["meta",{"property":"og:site_name","content":"𝑀𝑟.𝑔𝑜𝑜𝑔𝑥ℎ"}],["meta",{"property":"og:title","content":"useState与useReducer"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-08-29T09:14:21.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"BetaSu"}],["meta",{"property":"article:tag","content":"React"}],["meta",{"property":"article:modified_time","content":"2022-08-29T09:14:21.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"流程概览","slug":"流程概览","children":[]},{"level":2,"title":"声明阶段","slug":"声明阶段","children":[{"level":3,"title":"mount时","slug":"mount时","children":[]},{"level":3,"title":"update时","slug":"update时","children":[]}]},{"level":2,"title":"调用阶段","slug":"调用阶段","children":[]},{"level":2,"title":"小Tip","slug":"小tip","children":[]}],"git":{"createdTime":1661764461000,"updatedTime":1661764461000,"contributors":[{"name":"googxh","email":"gxh522@qq.com","commits":1}]},"readingTime":{"minutes":5.8,"words":1741},"filePathRelative":"react/hooks/usestate.md","localizedDate":"2022年8月29日"}')}}]);