"use strict";(self.webpackChunkmyblog=self.webpackChunkmyblog||[]).push([[97096],{69504:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});var t=a(78e3);const p=[(0,t.uE)('<h1 id="optimize" tabindex="-1"><a class="header-anchor" href="#optimize" aria-hidden="true">#</a> optimize</h1><p>当我们的模板 <code>template</code> 经过 <code>parse</code> 过程后，会输出生成 AST 树，那么接下来我们需要对这颗树做优化，<code>optimize</code> 的逻辑是远简单于 <code>parse</code> 的逻辑，所以理解起来会轻松很多。</p><p>为什么要有优化过程，因为我们知道 Vue 是数据驱动，是响应式的，但是我们的模板并不是所有数据都是响应式的，也有很多数据是首次渲染后就永远不会变化的，那么这部分数据生成的 DOM 也不会变化，我们可以在 <code>patch</code> 的过程跳过对他们的比对。</p><p>来看一下 <code>optimize</code> 方法的定义，在 <code>src/compiler/optimizer.js</code> 中：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**\n * Goal of the optimizer: walk the generated template AST tree\n * and detect sub-trees that are purely static, i.e. parts of\n * the DOM that never needs to change.\n *\n * Once we detect these sub-trees, we can:\n *\n * 1. Hoist them into constants, so that we no longer need to\n *    create fresh nodes for them on each re-render;\n * 2. Completely skip them in the patching process.\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">optimize</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token operator">?</span>ASTElement<span class="token punctuation">,</span> <span class="token literal-property property">options</span><span class="token operator">:</span> CompilerOptions</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span>\n  isStaticKey <span class="token operator">=</span> <span class="token function">genStaticKeysCached</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>staticKeys <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n  isPlatformReservedTag <span class="token operator">=</span> options<span class="token punctuation">.</span>isReservedTag <span class="token operator">||</span> no\n  <span class="token comment">// first pass: mark all non-static nodes.</span>\n  <span class="token function">markStatic</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>\n  <span class="token comment">// second pass: mark static roots.</span>\n  <span class="token function">markStaticRoots</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">genStaticKeys</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">keys</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> Function <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">makeMap</span><span class="token punctuation">(</span>\n    <span class="token string">&#39;type,tag,attrsList,attrsMap,plain,parent,children,attrs&#39;</span> <span class="token operator">+</span>\n    <span class="token punctuation">(</span>keys <span class="token operator">?</span> <span class="token string">&#39;,&#39;</span> <span class="token operator">+</span> keys <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在编译阶段可以把一些 AST 节点优化成静态节点，所以整个 <code>optimize</code> 的过程实际上就干 2 件事情，<code>markStatic(root)</code> 标记静态节点 ，<code>markStaticRoots(root, false)</code> 标记静态根。</p><h2 id="标记静态节点" tabindex="-1"><a class="header-anchor" href="#标记静态节点" aria-hidden="true">#</a> 标记静态节点</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">markStatic</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">node</span><span class="token operator">:</span> ASTNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  node<span class="token punctuation">.</span>static <span class="token operator">=</span> <span class="token function">isStatic</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// do not make component slot content static. this avoids</span>\n    <span class="token comment">// 1. components not able to mutate slot nodes</span>\n    <span class="token comment">// 2. static slot content fails for hot-reloading</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>\n      <span class="token operator">!</span><span class="token function">isPlatformReservedTag</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n      node<span class="token punctuation">.</span>tag <span class="token operator">!==</span> <span class="token string">&#39;slot&#39;</span> <span class="token operator">&amp;&amp;</span>\n      node<span class="token punctuation">.</span>attrsMap<span class="token punctuation">[</span><span class="token string">&#39;inline-template&#39;</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> child <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n      <span class="token function">markStatic</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>child<span class="token punctuation">.</span>static<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        node<span class="token punctuation">.</span>static <span class="token operator">=</span> <span class="token boolean">false</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>ifConditions<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> l <span class="token operator">=</span> node<span class="token punctuation">.</span>ifConditions<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> block <span class="token operator">=</span> node<span class="token punctuation">.</span>ifConditions<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>block\n        <span class="token function">markStatic</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>block<span class="token punctuation">.</span>static<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          node<span class="token punctuation">.</span>static <span class="token operator">=</span> <span class="token boolean">false</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">isStatic</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">node</span><span class="token operator">:</span> ASTNode</span><span class="token punctuation">)</span><span class="token operator">:</span> boolean <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// expression</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// text</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>pre <span class="token operator">||</span> <span class="token punctuation">(</span>\n    <span class="token operator">!</span>node<span class="token punctuation">.</span>hasBindings <span class="token operator">&amp;&amp;</span> <span class="token comment">// no dynamic bindings</span>\n    <span class="token operator">!</span>node<span class="token punctuation">.</span>if <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>node<span class="token punctuation">.</span>for <span class="token operator">&amp;&amp;</span> <span class="token comment">// not v-if or v-for or v-else</span>\n    <span class="token operator">!</span><span class="token function">isBuiltInTag</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token comment">// not a built-in</span>\n    <span class="token function">isPlatformReservedTag</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token comment">// not a component</span>\n    <span class="token operator">!</span><span class="token function">isDirectChildOfTemplateFor</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span>isStaticKey<span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先执行 <code>node.static = isStatic(node)</code></p><p><code>isStatic</code> 是对一个 AST 元素节点是否是静态的判断，如果是表达式，就是非静态；如果是纯文本，就是静态；对于一个普通元素，如果有 pre 属性，那么它使用了 <code>v-pre</code> 指令，是静态，否则要同时满足以下条件：没有使用 <code>v-if</code>、<code>v-for</code>，没有使用其它指令（不包括 <code>v-once</code>），非内置组件，是平台保留的标签，非带有 <code>v-for</code> 的 <code>template</code> 标签的直接子节点，节点的所有属性的 <code>key</code> 都满足静态 key；这些都满足则这个 AST 节点是一个静态节点。</p><p>如果这个节点是一个普通元素，则遍历它的所有 <code>children</code>，递归执行 <code>markStatic</code>。因为所有的 <code>elseif</code> 和 <code>else</code> 节点都不在 <code>children</code> 中， 如果节点的 <code>ifConditions</code> 不为空，则遍历 <code>ifConditions</code> 拿到所有条件中的 <code>block</code>，也就是它们对应的 AST 节点，递归执行 <code>markStatic</code>。在这些递归过程中，一旦子节点有不是 <code>static</code> 的情况，则它的父节点的 <code>static</code> 均变成 false。</p><h2 id="标记静态根" tabindex="-1"><a class="header-anchor" href="#标记静态根" aria-hidden="true">#</a> 标记静态根</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">markStaticRoots</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">node</span><span class="token operator">:</span> ASTNode<span class="token punctuation">,</span> <span class="token literal-property property">isInFor</span><span class="token operator">:</span> boolean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>static <span class="token operator">||</span> node<span class="token punctuation">.</span>once<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      node<span class="token punctuation">.</span>staticInFor <span class="token operator">=</span> isInFor\n    <span class="token punctuation">}</span>\n    <span class="token comment">// For a node to qualify as a static root, it should have children that</span>\n    <span class="token comment">// are not just static text. Otherwise the cost of hoisting out will</span>\n    <span class="token comment">// outweigh the benefits and it&#39;s better off to just always render it fresh.</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>static <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>\n      node<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span>\n      node<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token number">3</span>\n    <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      node<span class="token punctuation">.</span>staticRoot <span class="token operator">=</span> <span class="token boolean">true</span>\n      <span class="token keyword">return</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      node<span class="token punctuation">.</span>staticRoot <span class="token operator">=</span> <span class="token boolean">false</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">markStaticRoots</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> isInFor <span class="token operator">||</span> <span class="token operator">!</span><span class="token operator">!</span>node<span class="token punctuation">.</span>for<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>ifConditions<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> l <span class="token operator">=</span> node<span class="token punctuation">.</span>ifConditions<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">markStaticRoots</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>ifConditions<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>block<span class="token punctuation">,</span> isInFor<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>markStaticRoots</code> 第二个参数是 <code>isInFor</code>，对于已经是 <code>static</code> 的节点或者是 <code>v-once</code> 指令的节点，<code>node.staticInFor = isInFor</code>。 接着就是对于 <code>staticRoot</code> 的判断逻辑，从注释中我们可以看到，对于有资格成为 <code>staticRoot</code> 的节点，除了本身是一个静态节点外，必须满足拥有 <code>children</code>，并且 <code>children</code> 不能只是一个文本节点，不然的话把它标记成静态根节点的收益就很小了。</p><p>接下来和标记静态节点的逻辑一样，遍历 <code>children</code> 以及 <code>ifConditions</code>，递归执行 <code>markStaticRoots</code>。</p><p>回归我们之前的例子，经过 <code>optimize</code> 后，AST 树变成了如下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>ast <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token string-property property">&#39;type&#39;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  <span class="token string-property property">&#39;tag&#39;</span><span class="token operator">:</span> <span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span>\n  <span class="token string-property property">&#39;attrsList&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token string-property property">&#39;attrsMap&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string-property property">&#39;:class&#39;</span><span class="token operator">:</span> <span class="token string">&#39;bindCls&#39;</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&#39;class&#39;</span><span class="token operator">:</span> <span class="token string">&#39;list&#39;</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&#39;v-if&#39;</span><span class="token operator">:</span> <span class="token string">&#39;isShow&#39;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token string-property property">&#39;if&#39;</span><span class="token operator">:</span> <span class="token string">&#39;isShow&#39;</span><span class="token punctuation">,</span>\n  <span class="token string-property property">&#39;ifConditions&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n    <span class="token string-property property">&#39;exp&#39;</span><span class="token operator">:</span> <span class="token string">&#39;isShow&#39;</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&#39;block&#39;</span><span class="token operator">:</span> <span class="token comment">// ul ast element</span>\n  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token string-property property">&#39;parent&#39;</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>\n  <span class="token string-property property">&#39;plain&#39;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token string-property property">&#39;staticClass&#39;</span><span class="token operator">:</span> <span class="token string">&#39;list&#39;</span><span class="token punctuation">,</span>\n  <span class="token string-property property">&#39;classBinding&#39;</span><span class="token operator">:</span> <span class="token string">&#39;bindCls&#39;</span><span class="token punctuation">,</span>\n  <span class="token string-property property">&#39;static&#39;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token string-property property">&#39;staticRoot&#39;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token string-property property">&#39;children&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n    <span class="token string-property property">&#39;type&#39;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&#39;tag&#39;</span><span class="token operator">:</span> <span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&#39;attrsList&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n      <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;@click&#39;</span><span class="token punctuation">,</span>\n      <span class="token string-property property">&#39;value&#39;</span><span class="token operator">:</span> <span class="token string">&#39;clickItem(index)&#39;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&#39;attrsMap&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token string-property property">&#39;@click&#39;</span><span class="token operator">:</span> <span class="token string">&#39;clickItem(index)&#39;</span><span class="token punctuation">,</span>\n      <span class="token string-property property">&#39;v-for&#39;</span><span class="token operator">:</span> <span class="token string">&#39;(item,index) in data&#39;</span>\n     <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&#39;parent&#39;</span><span class="token operator">:</span> <span class="token comment">// ul ast element</span>\n    <span class="token string-property property">&#39;plain&#39;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&#39;events&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token string-property property">&#39;click&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string-property property">&#39;value&#39;</span><span class="token operator">:</span> <span class="token string">&#39;clickItem(index)&#39;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&#39;hasBindings&#39;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&#39;for&#39;</span><span class="token operator">:</span> <span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&#39;alias&#39;</span><span class="token operator">:</span> <span class="token string">&#39;item&#39;</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&#39;iterator1&#39;</span><span class="token operator">:</span> <span class="token string">&#39;index&#39;</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&#39;static&#39;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&#39;staticRoot&#39;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&#39;children&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token string-property property">&#39;type&#39;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n      <span class="token string-property property">&#39;expression&#39;</span><span class="token operator">:</span> <span class="token string">&#39;_s(item)+&quot;:&quot;+_s(index)&#39;</span>\n      <span class="token string-property property">&#39;text&#39;</span><span class="token operator">:</span> <span class="token string">&#39;{{item}}:{{index}}&#39;</span><span class="token punctuation">,</span>\n      <span class="token string-property property">&#39;tokens&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span><span class="token string-property property">&#39;@binding&#39;</span><span class="token operator">:</span><span class="token string">&#39;item&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token string">&#39;:&#39;</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span><span class="token string-property property">&#39;@binding&#39;</span><span class="token operator">:</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">}</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token string-property property">&#39;static&#39;</span><span class="token operator">:</span> <span class="token boolean">false</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们发现每一个 AST 元素节点都多了 <code>staic</code> 属性，并且 <code>type</code> 为 1 的普通元素 AST 节点多了 <code>staticRoot</code> 属性。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>那么至此我们分析完了 <code>optimize</code> 的过程，就是深度遍历这个 AST 树，去检测它的每一颗子树是不是静态节点，如果是静态节点则它们生成 DOM 永远不需要改变，这对运行时对模板的更新起到极大的优化作用。</p><p>我们通过 <code>optimize</code> 我们把整个 AST 树中的每一个 AST 元素节点标记了 <code>static</code> 和 <code>staticRoot</code>，它会影响我们接下来执行代码生成的过程。</p>',21)],e={},o=(0,a(13860).Z)(e,[["render",function(n,s){return(0,t.wg)(),(0,t.iD)("div",null,p)}]])},13860:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}},40023:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-cd93eed4","path":"/vue2/compile/optimize.html","title":"optimize","lang":"zh-CN","frontmatter":{"author":"ustbhuangyi","summary":"optimize 当我们的模板 template 经过 parse 过程后，会输出生成 AST 树，那么接下来我们需要对这颗树做优化，optimize 的逻辑是远简单于 parse 的逻辑，所以理解起来会轻松很多。 为什么要有优化过程，因为我们知道 Vue 是数据驱动，是响应式的，但是我们的模板并不是所有数据都是响应式的，也有很多数据是首次渲染后就永远不会变","head":[["meta",{"property":"og:url","content":"https://0808200.xyz/vue2/compile/optimize.html"}],["meta",{"property":"og:site_name","content":"𝑀𝑟.𝐺𝑜𝑜𝑔𝑥ℎ"}],["meta",{"property":"og:title","content":"optimize"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-08-29T09:14:21.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"ustbhuangyi"}],["meta",{"property":"article:modified_time","content":"2022-08-29T09:14:21.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"标记静态节点","slug":"标记静态节点","children":[]},{"level":2,"title":"标记静态根","slug":"标记静态根","children":[]},{"level":2,"title":"总结","slug":"总结","children":[]}],"git":{"createdTime":1661764461000,"updatedTime":1661764461000,"contributors":[{"name":"googxh","email":"gxh522@qq.com","commits":1}]},"readingTime":{"minutes":4.38,"words":1315},"filePathRelative":"vue2/compile/optimize.md","localizedDate":"2022年8月29日"}')}}]);