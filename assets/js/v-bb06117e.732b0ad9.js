"use strict";(self.webpackChunkmyblog=self.webpackChunkmyblog||[]).push([[87093],{13944:(e,t,o)=>{o.r(t),o.d(t,{default:()=>i});var l=o(60329);const c=[(0,l.uE)('<p>一面中，如果有笔试，考HTTP协议的可能性较大。</p><h2 id="_1-前言" tabindex="-1"><a class="header-anchor" href="#_1-前言" aria-hidden="true">#</a> 1. 前言</h2><p>一面要讲的内容：</p><ul><li><code>HTTP</code>协议的主要特点</li><li><code>HTTP</code>报文的组成部分</li><li><code>HTTP</code>方法</li><li><code>get</code> 和 <code>post</code>的区别</li><li><code>HTTP</code>状态码</li><li>什么是持久连接</li><li>什么是管线化</li></ul><p>二面要讲的内容；</p><ul><li>缓存</li><li><code>CSRF</code>攻击</li></ul><h2 id="_2-http协议的主要特点" tabindex="-1"><a class="header-anchor" href="#_2-http协议的主要特点" aria-hidden="true">#</a> 2. HTTP协议的主要特点</h2><ul><li>简单快速</li><li>灵活</li><li><strong>无连接</strong></li><li><strong>无状态</strong></li></ul><blockquote><p>通常我们要答出以上四个内容。如果实在记不住，一定要记得后面的两个：<strong>无连接、无状态</strong>。</p></blockquote><p>我们分别来解释一下。</p><h3 id="_2-1-简单快速" tabindex="-1"><a class="header-anchor" href="#_2-1-简单快速" aria-hidden="true">#</a> 2.1 简单快速</h3><blockquote><p><strong>简单</strong>：每个资源（比如图片、页面）都通过 url 来定位。这都是固定的，在<code>http</code>协议中，处理起来也比较简单，想访问什么资源，直接输入url即可。</p></blockquote><h3 id="_2-2-灵活" tabindex="-1"><a class="header-anchor" href="#_2-2-灵活" aria-hidden="true">#</a> 2.2 灵活</h3><blockquote><p><code>http</code>协议的头部有一个<code>数据类型</code>，通过<code>http</code>协议，就可以完成不同数据类型的传输。</p></blockquote><h3 id="_2-3-无连接" tabindex="-1"><a class="header-anchor" href="#_2-3-无连接" aria-hidden="true">#</a> 2.3 无连接</h3><blockquote><p>连接一次，就会断开，不会继续保持连接。</p></blockquote><h3 id="_2-4-无状态" tabindex="-1"><a class="header-anchor" href="#_2-4-无状态" aria-hidden="true">#</a> 2.4 无状态</h3><blockquote><p>客户端和服务器端是两种身份。第一次请求结束后，就断开了，第二次请求时，<strong>服务器端并没有记住之前的状态</strong>，也就是说，服务器端无法区分客户端是否为同一个人、同一个身份。</p></blockquote><blockquote><p>有的时候，我们访问网站时，网站能记住我们的账号，这个是通过其他的手段（比如 <code>session</code>）做到的，并不是<code>http</code>协议能做到的。</p></blockquote><h2 id="_3-http报文的组成部分" tabindex="-1"><a class="header-anchor" href="#_3-http报文的组成部分" aria-hidden="true">#</a> 3 HTTP报文的组成部分</h2><p><img src="http://img.smyhvae.com/20180306_1400.png" alt=""></p><blockquote><p>在回答此问题时，我们要按照顺序回答：</p></blockquote><ul><li>先回答的是，<code>http</code>报文包括：<strong>请求报文</strong>和<strong>响应报文</strong>。</li><li>再回答的是，每个报文包含什么部分。</li><li>最后回答，每个部分的内容是什么</li></ul><h3 id="_3-1-请求报文包括" tabindex="-1"><a class="header-anchor" href="#_3-1-请求报文包括" aria-hidden="true">#</a> 3.1 请求报文包括：</h3><p><img src="http://img.smyhvae.com/20180228_1505.jpg" alt=""></p><ul><li>请求行：包括请求方法、请求的<code>url</code>、<code>http</code>协议及版本。</li><li>请求头：一大堆的键值对。</li><li><strong>空行</strong>指的是：当服务器在解析请求头的时候，如果遇到了空行，则表明，后面的内容是请求体</li><li>请求体：数据部分。</li></ul><h3 id="_3-2-响应报文包括" tabindex="-1"><a class="header-anchor" href="#_3-2-响应报文包括" aria-hidden="true">#</a> 3.2 响应报文包括：</h3><p><img src="http://img.smyhvae.com/20180228_1510.jpg" alt=""></p><ul><li>状态行：<code>http</code>协议及版本、状态码及状态描述。</li><li>响应头</li><li>空行</li><li>响应体</li></ul><h2 id="_4-http方法" tabindex="-1"><a class="header-anchor" href="#_4-http方法" aria-hidden="true">#</a> 4 HTTP方法</h2><p>包括：</p><ul><li><code>GET</code>：获取资源</li><li><code>POST</code>：传输资源</li><li><code>put</code>：更新资源</li><li><code>DELETE</code>：删除资源</li><li><code>HEAD</code>：获得报文首部</li></ul><blockquote><p><code>HTTP</code>方法有很多，但是上面这五个方法，要求在面试时全部说出来，不要漏掉。</p></blockquote><ul><li><code>get</code> <code>和 </code>post` 比较常见。</li><li><code>put</code> 和 <code>delete</code> 在实际应用中用的很少。况且，业务中，一般不删除服务器端的资源。</li><li><code>head</code> 可能偶尔用的到。</li></ul><h2 id="_5-get-和-post的区别" tabindex="-1"><a class="header-anchor" href="#_5-get-和-post的区别" aria-hidden="true">#</a> 5 get 和 post的区别</h2><p><img src="http://img.smyhvae.com/20180306_1415.png" alt=""></p><ul><li>区别有很多，如果记不住，面试时，至少要任意答出其中的三四条。</li><li>有一点要强调，<strong>get是相对不隐私的，而post是相对隐私的</strong>。</li></ul><blockquote><p>我们大概要记住以下几点：</p></blockquote><ol><li>浏览器在回退时，<code>get</code> <strong>不会重新请求</strong>，但是<code>post</code>会重新请求。【重要】</li><li><code>get</code>请求会被浏览器<strong>主动缓存</strong>，而<code>post</code>不会。【重要】</li><li><code>get</code>请求的参数，会报<strong>保留</strong>在浏览器的<strong>历史记录</strong>里，而<code>post</code>不会。做业务时要注意。为了防止<code>CSRF</code>攻击，很多公司把<code>get</code>统一改成了<code>post</code></li><li><code>get</code>请求在<code>url</code>中<code>传递的参数有大小限制，基本是</code>2kb`，不同的浏览器略有不同。而post没有注意。</li><li><code>get</code>的参数是直接暴露在<code>url</code>上的，相对不安全。而<code>post</code>是放在请求体中的。</li></ol><h2 id="_6-http状态码" tabindex="-1"><a class="header-anchor" href="#_6-http状态码" aria-hidden="true">#</a> 6 http状态码</h2><blockquote><p><code>http</code>状态码分类：</p></blockquote><p><img src="http://img.smyhvae.com/20180306_1430.png" alt=""></p><blockquote><p>常见的<code>http</code>状态码：</p></blockquote><p><img src="http://img.smyhvae.com/20180306_1431.png" alt=""></p><p><strong>部分解释</strong>：</p><ul><li><code>206</code>的应用：<code>range</code>指的是请求的范围，客户端只请求某个大文件里的一部分内容。比如说，如果播放视频地址或音频地址的前面一部分，可以用到<code>206</code>。</li><li><code>301</code>：重定向（永久）。</li><li><code>302</code>：重定向（临时）。</li><li><code>304</code>：我这个服务器告诉客户端，你已经有缓存了，不需要从我这里取了。</li></ul><p><img src="http://img.smyhvae.com/20180306_1440.png" alt=""></p><ul><li><code>400</code>和<code>401</code>用的不多,未授权。<code>403</code>指的是请求被拒绝。<code>404</code>指的是资源不存在。</li></ul><h2 id="_7-持久链接-http长连接" tabindex="-1"><a class="header-anchor" href="#_7-持久链接-http长连接" aria-hidden="true">#</a> 7 持久链接/http长连接</h2><blockquote><p>如果你能答出持久链接，这是面试官很想知道的一个点。</p></blockquote><ul><li><strong>轮询</strong>：<code>http1.0</code>中，客户端每隔很短的时间，都会对服务器发出请求，查看是否有新的消息，只要轮询速度足够快，例如<code>1</code>秒，就能给人造成交互是实时进行的印象。这种做法是无奈之举，实际上对服务器、客户端双方都造成了大量的性能浪费。</li><li><strong>长连接</strong>：<code>HTTP1.1</code>中，通过使用<code>Connection:keep-alive</code>进行长连接，。客户端只请求一次，但是服务器会将继续保持连接，当再次请求时，避免了重新建立连接。</li></ul><blockquote><p>注意，<code>HTTP 1.1</code>默认进行持久连接。在一次 <code>TCP</code> 连接中可以完成多个 <code>HTTP</code> 请求，但是对<strong>每个请求仍然要单独发 header</strong>，<code>Keep-Alive</code>不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如<code>Apache</code>）中设定这个时间。</p></blockquote><h2 id="_8-长连接中的管线化" tabindex="-1"><a class="header-anchor" href="#_8-长连接中的管线化" aria-hidden="true">#</a> 8 长连接中的管线化</h2><blockquote><p>如果能答出<strong>管线化</strong>，则属于加分项。</p></blockquote><h3 id="_8-1-管线化的原理" tabindex="-1"><a class="header-anchor" href="#_8-1-管线化的原理" aria-hidden="true">#</a> 8.1 管线化的原理</h3><blockquote><p>长连接时，<strong>默认</strong>的请求这样的：</p></blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\t请求1 --&gt; 响应1 --&gt;请求2 --&gt; 响应2 --&gt; 请求3 --&gt; 响应3\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>管线化就是，我把现在的请求打包，一次性发过去，你也给我一次响应回来。</p></blockquote><h3 id="_8-2-管线化的注意事项" tabindex="-1"><a class="header-anchor" href="#_8-2-管线化的注意事项" aria-hidden="true">#</a> 8.2 管线化的注意事项</h3><blockquote><p>面试时，不会深究管线化。如果真要问你，就回答：“我没怎么研究过，准备回去看看~”</p></blockquote>',60)],d={},i=(0,o(13860).Z)(d,[["render",function(e,t){return(0,l.wg)(),(0,l.iD)("div",null,c)}]])},13860:(e,t)=>{t.Z=(e,t)=>{const o=e.__vccOpts||e;for(const[e,l]of t)o[e]=l;return o}},4660:(e,t,o)=>{o.r(t),o.d(t,{data:()=>l});const l=JSON.parse('{"key":"v-bb06117e","path":"/Interview/base/http_protocol.html","title":"HTTP 协议","lang":"zh-CN","frontmatter":{"title":"HTTP 协议","icon":null,"date":"2022-12-15T00:00:00.000Z","category":["Interview"],"summary":"一面中，如果有笔试，考HTTP协议的可能性较大。 1. 前言 一面要讲的内容： HTTP协议的主要特点; HTTP报文的组成部分; HTTP方法; get 和 post的区别; HTTP状态码; 什么是持久连接; 什么是管线化; 二面要讲的内容； 缓存; CSRF攻击; 2. HTTP协议的主要特点 简单快速; 灵活; 无连接; 无状态; \\" 通常我们要答出","head":[["meta",{"property":"og:url","content":"https://0808200.xyz/Interview/base/http_protocol.html"}],["meta",{"property":"og:site_name","content":"𝑀𝑟.𝑔𝑜𝑜𝑔𝑥ℎ"}],["meta",{"property":"og:title","content":"HTTP 协议"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-01-17T08:24:10.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:published_time","content":"2022-12-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-17T08:24:10.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"1. 前言","slug":"_1-前言","children":[]},{"level":2,"title":"2. HTTP协议的主要特点","slug":"_2-http协议的主要特点","children":[{"level":3,"title":"2.1 简单快速","slug":"_2-1-简单快速","children":[]},{"level":3,"title":"2.2 灵活","slug":"_2-2-灵活","children":[]},{"level":3,"title":"2.3 无连接","slug":"_2-3-无连接","children":[]},{"level":3,"title":"2.4 无状态","slug":"_2-4-无状态","children":[]}]},{"level":2,"title":"3 HTTP报文的组成部分","slug":"_3-http报文的组成部分","children":[{"level":3,"title":"3.1 请求报文包括：","slug":"_3-1-请求报文包括","children":[]},{"level":3,"title":"3.2 响应报文包括：","slug":"_3-2-响应报文包括","children":[]}]},{"level":2,"title":"4 HTTP方法","slug":"_4-http方法","children":[]},{"level":2,"title":"5 get 和 post的区别","slug":"_5-get-和-post的区别","children":[]},{"level":2,"title":"6 http状态码","slug":"_6-http状态码","children":[]},{"level":2,"title":"7 持久链接/http长连接","slug":"_7-持久链接-http长连接","children":[]},{"level":2,"title":"8 长连接中的管线化","slug":"_8-长连接中的管线化","children":[{"level":3,"title":"8.1 管线化的原理","slug":"_8-1-管线化的原理","children":[]},{"level":3,"title":"8.2 管线化的注意事项","slug":"_8-2-管线化的注意事项","children":[]}]}],"git":{"createdTime":1673943850000,"updatedTime":1673943850000,"contributors":[{"name":"googxh","email":"gxh522@qq.com","commits":1}]},"readingTime":{"minutes":4.88,"words":1464},"filePathRelative":"Interview/base/http_protocol.md","localizedDate":"2022年12月15日"}')}}]);