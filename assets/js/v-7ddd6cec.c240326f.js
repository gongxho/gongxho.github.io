"use strict";(self.webpackChunkmyblog=self.webpackChunkmyblog||[]).push([[61681],{64593:(n,a,s)=>{s.r(a),s.d(a,{default:()=>Wn});var e=s(78e3);const t=(0,e.uE)('<p>该阶段之所以称为<code>layout</code>，因为该阶段的代码都是在<code>DOM</code>修改完成（<code>mutation阶段</code>完成）后执行的。</p><p>注意：由于 JS 的同步执行阻塞了主线程，所以此时 JS 已经可以获取到新的<code>DOM</code>，但是浏览器对新的<code>DOM</code>并没有完成渲染。</p><p>该阶段触发的生命周期钩子和<code>hook</code>可以直接访问到已经改变后的<code>DOM</code>，即该阶段是可以参与<code>DOM layout</code>的阶段。</p><h2 id="概览" tabindex="-1"><a class="header-anchor" href="#概览" aria-hidden="true">#</a> 概览</h2><p>与前两个阶段类似，<code>layout阶段</code>也是遍历<code>effectList</code>，执行函数。</p><p>具体执行的函数是<code>commitLayoutEffects</code>。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>root<span class="token punctuation">.</span>current <span class="token operator">=</span> finishedWork<span class="token punctuation">;</span>\n\nnextEffect <span class="token operator">=</span> firstEffect<span class="token punctuation">;</span>\n<span class="token keyword">do</span> <span class="token punctuation">{</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token function">commitLayoutEffects</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> lanes<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">invariant</span><span class="token punctuation">(</span>nextEffect <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;Should be working on an effect.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">captureCommitPhaseError</span><span class="token punctuation">(</span>nextEffect<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    nextEffect <span class="token operator">=</span> nextEffect<span class="token punctuation">.</span>nextEffect<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>nextEffect <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nnextEffect <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="commitlayouteffects" tabindex="-1"><a class="header-anchor" href="#commitlayouteffects" aria-hidden="true">#</a> commitLayoutEffects</h2><p>代码如下：</p>',9),o=(0,e.Uk)("你可以在"),c={href:"https://github.com/facebook/react/blob/970fa122d8188bafa600e9b5214833487fbf1092/packages/react-reconciler/src/ReactFiberWorkLoop.new.js#L2302",target:"_blank",rel:"noopener noreferrer"},p=(0,e.Uk)("这里"),l=(0,e.Uk)("看到"),i=(0,e._)("code",null,"commitLayoutEffects",-1),r=(0,e.Uk)("源码"),u=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">commitLayoutEffects</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">root</span><span class="token operator">:</span> FiberRoot<span class="token punctuation">,</span> <span class="token literal-property property">committedLanes</span><span class="token operator">:</span> Lanes</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>nextEffect <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> effectTag <span class="token operator">=</span> nextEffect<span class="token punctuation">.</span>effectTag<span class="token punctuation">;</span>\n\n    <span class="token comment">// 调用生命周期钩子和hook</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>effectTag <span class="token operator">&amp;</span> <span class="token punctuation">(</span>Update <span class="token operator">|</span> Callback<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> current <span class="token operator">=</span> nextEffect<span class="token punctuation">.</span>alternate<span class="token punctuation">;</span>\n      <span class="token function">commitLayoutEffectOnFiber</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> current<span class="token punctuation">,</span> nextEffect<span class="token punctuation">,</span> committedLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 赋值ref</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>effectTag <span class="token operator">&amp;</span> Ref<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">commitAttachRef</span><span class="token punctuation">(</span>nextEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    nextEffect <span class="token operator">=</span> nextEffect<span class="token punctuation">.</span>nextEffect<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>commitLayoutEffects</code>一共做了两件事：</p><ol><li><p>commitLayoutEffectOnFiber（调用<code>生命周期钩子</code>和<code>hook</code>相关操作）</p></li><li><p>commitAttachRef（赋值 ref）</p></li></ol><h2 id="commitlayouteffectonfiber" tabindex="-1"><a class="header-anchor" href="#commitlayouteffectonfiber" aria-hidden="true">#</a> commitLayoutEffectOnFiber</h2><p><code>commitLayoutEffectOnFiber</code>方法会根据<code>fiber.tag</code>对不同类型的节点分别处理。</p>',5),d=(0,e.Uk)("你可以在"),k={href:"https://github.com/facebook/react/blob/970fa122d8188bafa600e9b5214833487fbf1092/packages/react-reconciler/src/ReactFiberCommitWork.new.js#L459",target:"_blank",rel:"noopener noreferrer"},m=(0,e.Uk)("这里"),f=(0,e.Uk)("看到"),v=(0,e._)("code",null,"commitLayoutEffectOnFiber",-1),b=(0,e.Uk)("源码（"),h=(0,e._)("code",null,"commitLayoutEffectOnFiber",-1),y=(0,e.Uk)("为别名，方法原名为"),g=(0,e._)("code",null,"commitLifeCycles",-1),_=(0,e.Uk)("）"),E=(0,e.Uk)("对于"),w=(0,e._)("code",null,"ClassComponent",-1),U=(0,e.Uk)("，他会通过"),L=(0,e._)("code",null,"current === null?",-1),x=(0,e.Uk)("区分是"),F=(0,e._)("code",null,"mount",-1),j=(0,e.Uk)("还是"),W=(0,e._)("code",null,"update",-1),R=(0,e.Uk)("，调用"),O={href:"https://github.com/facebook/react/blob/970fa122d8188bafa600e9b5214833487fbf1092/packages/react-reconciler/src/ReactFiberCommitWork.new.js#L538",target:"_blank",rel:"noopener noreferrer"},C=(0,e._)("code",null,"componentDidMount",-1),D=(0,e.Uk)("或"),q={href:"https://github.com/facebook/react/blob/970fa122d8188bafa600e9b5214833487fbf1092/packages/react-reconciler/src/ReactFiberCommitWork.new.js#L592",target:"_blank",rel:"noopener noreferrer"},M=(0,e._)("code",null,"componentDidUpdate",-1),T=(0,e.Uk)("。"),S=(0,e.uE)('<p>触发<code>状态更新</code>的<code>this.setState</code>如果赋值了第二个参数<code>回调函数</code>，也会在此时调用。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">xxx</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;i am update~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对于<code>FunctionComponent</code>及相关类型，他会调用<code>useLayoutEffect hook</code>的<code>回调函数</code>，调度<code>useEffect</code>的<code>销毁</code>与<code>回调</code>函数</li></ul><blockquote><p><code>相关类型</code>指特殊处理后的<code>FunctionComponent</code>，比如<code>ForwardRef</code>、<code>React.memo</code>包裹的<code>FunctionComponent</code></p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>finishedWork<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 以下都是FunctionComponent及相关类型</span>\n    <span class="token keyword">case</span> <span class="token literal-property property">FunctionComponent</span><span class="token operator">:</span>\n    <span class="token keyword">case</span> <span class="token literal-property property">ForwardRef</span><span class="token operator">:</span>\n    <span class="token keyword">case</span> <span class="token literal-property property">SimpleMemoComponent</span><span class="token operator">:</span>\n    <span class="token keyword">case</span> <span class="token literal-property property">Block</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 执行useLayoutEffect的回调函数</span>\n      <span class="token function">commitHookEffectListMount</span><span class="token punctuation">(</span>HookLayout <span class="token operator">|</span> HookHasEffect<span class="token punctuation">,</span> finishedWork<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token comment">// 调度useEffect的销毁函数与回调函数</span>\n      <span class="token function">schedulePassiveEffects</span><span class="token punctuation">(</span>finishedWork<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',5),A=(0,e.Uk)("你可以从"),B={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberCommitWork.old.js#L465-L491",target:"_blank",rel:"noopener noreferrer"},H=(0,e.Uk)("这里"),J=(0,e.Uk)("看到这段代码"),N=(0,e.Uk)("在上一节介绍"),P=(0,e.Uk)("Update effect"),z=(0,e.Uk)("时介绍过，"),Z=(0,e._)("code",null,"mutation阶段",-1),I=(0,e.Uk)("会执行"),G=(0,e._)("code",null,"useLayoutEffect hook",-1),K=(0,e.Uk)("的"),Q=(0,e._)("code",null,"销毁函数",-1),V=(0,e.Uk)("。"),X=(0,e.uE)('<p>结合这里我们可以发现，<code>useLayoutEffect hook</code>从上一次更新的<code>销毁函数</code>调用到本次更新的<code>回调函数</code>调用是同步执行的。</p><p>而<code>useEffect</code>则需要先调度，在<code>Layout阶段</code>完成后再异步执行。</p><p>这就是<code>useLayoutEffect</code>与<code>useEffect</code>的区别。</p><ul><li>对于<code>HostRoot</code>，即<code>rootFiber</code>，如果赋值了第三个参数<code>回调函数</code>，也会在此时调用。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;i am mount~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="commitattachref" tabindex="-1"><a class="header-anchor" href="#commitattachref" aria-hidden="true">#</a> commitAttachRef</h2><p><code>commitLayoutEffects</code>会做的第二件事是<code>commitAttachRef</code>。</p>',7),Y=(0,e.Uk)("你可以在"),$={href:"https://github.com/facebook/react/blob/970fa122d8188bafa600e9b5214833487fbf1092/packages/react-reconciler/src/ReactFiberCommitWork.new.js#L823",target:"_blank",rel:"noopener noreferrer"},nn=(0,e.Uk)("这里"),an=(0,e.Uk)("看到"),sn=(0,e._)("code",null,"commitAttachRef",-1),en=(0,e.Uk)("源码"),tn=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">commitAttachRef</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">finishedWork</span><span class="token operator">:</span> Fiber</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> ref <span class="token operator">=</span> finishedWork<span class="token punctuation">.</span>ref<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>ref <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> instance <span class="token operator">=</span> finishedWork<span class="token punctuation">.</span>stateNode<span class="token punctuation">;</span>\n\n    <span class="token comment">// 获取DOM实例</span>\n    <span class="token keyword">let</span> instanceToUse<span class="token punctuation">;</span>\n    <span class="token keyword">switch</span> <span class="token punctuation">(</span>finishedWork<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">case</span> <span class="token literal-property property">HostComponent</span><span class="token operator">:</span>\n        instanceToUse <span class="token operator">=</span> <span class="token function">getPublicInstance</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token keyword">default</span><span class="token operator">:</span>\n        instanceToUse <span class="token operator">=</span> instance<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> ref <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 如果ref是函数形式，调用回调函数</span>\n      <span class="token function">ref</span><span class="token punctuation">(</span>instanceToUse<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 如果ref是ref实例形式，赋值ref.current</span>\n      ref<span class="token punctuation">.</span>current <span class="token operator">=</span> instanceToUse<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码逻辑很简单：获取<code>DOM</code>实例，更新<code>ref</code>。</p><h2 id="current-fiber树切换" tabindex="-1"><a class="header-anchor" href="#current-fiber树切换" aria-hidden="true">#</a> current Fiber树切换</h2><p>至此，整个<code>layout阶段</code>就结束了。</p><p>在结束本节的学习前，我们关注下这行代码：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>root<span class="token punctuation">.</span>current <span class="token operator">=</span> finishedWork<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>',6),on=(0,e.Uk)("你可以在"),cn={href:"https://github.com/facebook/react/blob/970fa122d8188bafa600e9b5214833487fbf1092/packages/react-reconciler/src/ReactFiberWorkLoop.new.js#L2022",target:"_blank",rel:"noopener noreferrer"},pn=(0,e.Uk)("这里"),ln=(0,e.Uk)("看到这行代码"),rn=(0,e.Uk)("在"),un=(0,e.Uk)("双缓存机制一节"),dn=(0,e.Uk)("我们介绍过，"),kn=(0,e._)("code",null,"workInProgress Fiber树",-1),mn=(0,e.Uk)("在"),fn=(0,e._)("code",null,"commit阶段",-1),vn=(0,e.Uk)("完成渲染后会变为"),bn=(0,e._)("code",null,"current Fiber树",-1),hn=(0,e.Uk)("。这行代码的作用就是切换"),yn=(0,e._)("code",null,"fiberRootNode",-1),gn=(0,e.Uk)("指向的"),_n=(0,e._)("code",null,"current Fiber树",-1),En=(0,e.Uk)("。"),wn=(0,e.uE)('<p>那么这行代码为什么在这里呢？（在<code>mutation阶段</code>结束后，<code>layout阶段</code>开始前。）</p><p>我们知道<code>componentWillUnmount</code>会在<code>mutation阶段</code>执行。此时<code>current Fiber树</code>还指向前一次更新的<code>Fiber树</code>，在生命周期钩子内获取的<code>DOM</code>还是更新前的。</p><p><code>componentDidMount</code>和<code>componentDidUpdate</code>会在<code>layout阶段</code>执行。此时<code>current Fiber树</code>已经指向更新后的<code>Fiber树</code>，在生命周期钩子内获取的<code>DOM</code>就是更新后的。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>从这节我们学到，<code>layout阶段</code>会遍历<code>effectList</code>，依次执行<code>commitLayoutEffects</code>。该方法的主要工作为“根据<code>effectTag</code>调用不同的处理函数处理<code>Fiber</code>并更新<code>ref</code>。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>',6),Un={href:"https://blog.logrocket.com/useeffect-vs-uselayouteffect-examples/",target:"_blank",rel:"noopener noreferrer"},Ln=(0,e.Uk)("useeffect-vs-uselayouteffect-examples"),xn={href:"https://reactjs.org/docs/hooks-reference.html#uselayouteffect",target:"_blank",rel:"noopener noreferrer"},Fn=(0,e.Uk)("hooks-reference.html#uselayouteffect"),jn={},Wn=(0,s(13860).Z)(jn,[["render",function(n,a){const s=(0,e.up)("ExternalLinkIcon"),jn=(0,e.up)("RouterLink");return(0,e.wg)(),(0,e.iD)("div",null,[t,(0,e._)("blockquote",null,[(0,e._)("p",null,[o,(0,e._)("a",c,[p,(0,e.Wm)(s)]),l,i,r])]),u,(0,e._)("blockquote",null,[(0,e._)("p",null,[d,(0,e._)("a",k,[m,(0,e.Wm)(s)]),f,v,b,h,y,g,_])]),(0,e._)("ul",null,[(0,e._)("li",null,[E,w,U,L,x,F,j,W,R,(0,e._)("a",O,[C,(0,e.Wm)(s)]),D,(0,e._)("a",q,[M,(0,e.Wm)(s)]),T])]),S,(0,e._)("blockquote",null,[(0,e._)("p",null,[A,(0,e._)("a",B,[H,(0,e.Wm)(s)]),J])]),(0,e._)("p",null,[N,(0,e.Wm)(jn,{to:"/react/renderer/mutation.html#update-effect"},{default:(0,e.w5)((()=>[P])),_:1}),z,Z,I,G,K,Q,V]),X,(0,e._)("blockquote",null,[(0,e._)("p",null,[Y,(0,e._)("a",$,[nn,(0,e.Wm)(s)]),an,sn,en])]),tn,(0,e._)("blockquote",null,[(0,e._)("p",null,[on,(0,e._)("a",cn,[pn,(0,e.Wm)(s)]),ln])]),(0,e._)("p",null,[rn,(0,e.Wm)(jn,{to:"/react/process/doubleBuffer.html#%E4%BB%80%E4%B9%88%E6%98%AF-%E5%8F%8C%E7%BC%93%E5%AD%98"},{default:(0,e.w5)((()=>[un])),_:1}),dn,kn,mn,fn,vn,bn,hn,yn,gn,_n,En]),wn,(0,e._)("p",null,[(0,e._)("a",Un,[Ln,(0,e.Wm)(s)])]),(0,e._)("p",null,[(0,e._)("a",xn,[Fn,(0,e.Wm)(s)])])])}]])},13860:(n,a)=>{a.Z=(n,a)=>{const s=n.__vccOpts||n;for(const[n,e]of a)s[n]=e;return s}},7136:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e=JSON.parse('{"key":"v-7ddd6cec","path":"/react/renderer/layout.html","title":"layout阶段","lang":"zh-CN","frontmatter":{"title":"layout阶段","author":"BetaSu","tag":["React"],"summary":"该阶段之所以称为layout，因为该阶段的代码都是在DOM修改完成（mutation阶段完成）后执行的。 注意：由于 JS 的同步执行阻塞了主线程，所以此时 JS 已经可以获取到新的DOM，但是浏览器对新的DOM并没有完成渲染。 该阶段触发的生命周期钩子和hook可以直接访问到已经改变后的DOM，即该阶段是可以参与DOM layout的阶段。 概览 与前两个","head":[["meta",{"property":"og:url","content":"https://0808200.xyz/react/renderer/layout.html"}],["meta",{"property":"og:site_name","content":"𝑀𝑟.𝐺𝑜𝑜𝑔𝑥ℎ"}],["meta",{"property":"og:title","content":"layout阶段"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-08-29T09:14:21.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"BetaSu"}],["meta",{"property":"article:tag","content":"React"}],["meta",{"property":"article:modified_time","content":"2022-08-29T09:14:21.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"概览","slug":"概览","children":[]},{"level":2,"title":"commitLayoutEffects","slug":"commitlayouteffects","children":[]},{"level":2,"title":"commitLayoutEffectOnFiber","slug":"commitlayouteffectonfiber","children":[]},{"level":2,"title":"commitAttachRef","slug":"commitattachref","children":[]},{"level":2,"title":"current Fiber树切换","slug":"current-fiber树切换","children":[]},{"level":2,"title":"总结","slug":"总结","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","children":[]}],"git":{"createdTime":1661764461000,"updatedTime":1661764461000,"contributors":[{"name":"googxh","email":"gxh522@qq.com","commits":1}]},"readingTime":{"minutes":3.69,"words":1108},"filePathRelative":"react/renderer/layout.md","localizedDate":"2022年8月29日"}')}}]);