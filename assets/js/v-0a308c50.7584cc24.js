"use strict";(self.webpackChunkmyblog=self.webpackChunkmyblog||[]).push([[69757],{7020:(n,e,i)=>{i.r(e),i.d(e,{default:()=>v});var l=i(60329);const s=[(0,l.uE)('<p><strong>手写事件侦听器，并要求兼容浏览器</strong></p><div class="language-JavaScript ext-JavaScript line-numbers-mode"><pre class="language-JavaScript"><code>var eventUtil = {\n  getEvent: function(event) {\n      return event || window.event;\n  },\n\n  getTarget: function(event) {\n      return event.target || event.srcElement;\n  },\n\n  addListener: function(element, type, hander) {\n      if (element.addEventListener) {\n          element.addEventListener(type, hander, false);\n      } else if (element.attachEvent) {\n          element.attachEvent(&#39;on&#39; + type, hander);\n      } else {\n          element[&#39;on&#39; + type] = hander;\n      }\n  },\n\n  removeListener: function(element, type, hander) {\n      if (element.removeEventListener) {\n          element.removeEventListener(type, hander, false);\n      } else if (element.deattachEvent) {\n          element.detachEvent(type, hander);\n      } else {\n          element[&#39;on&#39; + type] = null;\n      }\n  },\n\n  preventDefault: function(event) {\n      if (event.preventDefault) {\n          event.preventDefault();\n      } else {\n          event.returnValue = false;\n      }\n  },\n\n  stopPropagation: function(event) {\n      if (event.stopPropagation) {\n          event.stopPropagation();\n      } else {\n          event.cancelBubble = true;\n      }\n  }\n};\n\n// 调用\n(function() {\n  var btn = document.getElementById(&quot;btn&quot;);\n  var link = document.getElementsByTagName(&quot;a&quot;)[0];\n\n  eventUtil.addListener(btn, &quot;click&quot;, function(event) {\n      var event = eventUtil.getEvent(event);\n      var target = eventUtil.getTarget(event);\n      alert(event.type);\n      alert(target);\n      eventUtil.stopPropagation(event);\n  });\n\n  eventUtil.addListener(link, &quot;click&quot;, function(event) {\n      alert(&quot;prevent default event&quot;);\n      var event = eventUtil.getEvent(event);\n      eventUtil.preventDefault(event);\n  });\n\n  eventUtil.addListener(document.body, &quot;click&quot;, function() {\n      alert(&quot;click body&quot;);\n  });\n})();\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>手写事件模型</strong></p><div class="language-JavaScript ext-JavaScript line-numbers-mode"><pre class="language-JavaScript"><code>var Event = (function () {\n    var list = {}, bind, trigger, remove;\n    bind = function (key, fn) {\n        if (!list[key]) {\n            list[key] = [];\n        }\n        list[key].push(fn);\n    };\n    trigger = function () {\n        var key = Array.prototype.shift.call(arguments);\n        var fns = list[key];\n        if (!fns || fns.length === 0) {\n            return false;\n        }\n        for (var i = 0, fn; fn = fns[i++];) {\n            fn.apply(this, arguments);\n        }\n    };\n    remove = function (key, fn) {\n        var fns = list[key];\n        if (!fns) {\n            return false;\n        }\n        if (!fn) {\n            fns &amp; (fns.length = 0);\n        } else {\n            for (var i = fns.length - 1; i &gt;= 0; i--) {\n                var _fn = fns[i];\n                if (_fn === fn) {\n                    fns.splice(i, 1);\n                }\n            }\n        }\n    };\n    return {\n        bind: bind,\n        trigger: trigger,\n        remove: remove\n    }\n})();\n\n// 调用\nEvent.bind(&#39;Hit&#39;, function(){ console.log(&#39;bind event&#39;); }); // 绑定事件\nEvent.trigger(&quot;Hit&quot;, function(){ console.log(&#39;trigger event&#39;); }); // 触发事件\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>手写事件代理，并要求兼容浏览器</strong></p><div class="language-JavaScript ext-JavaScript line-numbers-mode"><pre class="language-JavaScript"><code>function delegateEvent(parentEl, selector, type, fn) {\n    var handler = function(e){\n          var e = e || window.event;\n          var target = e.target || e.srcElement;\n          if (matchSelector(target, selector)) {\n              if(fn) {\n                  fn.call(target, e);\n              }\n          }\n    };\n    if(parentEl.addEventListener){\n        parentEl.addEventListener(type, handler);\n    }else{\n        parentEl.attachEvent(&quot;on&quot; + type, handler);\n    }\n}\n/**\n * support #id, tagName, .className\n */\nfunction matchSelector(ele, selector) {\n    // if use id\n    if (selector.charAt(0) === &quot;#&quot;) {\n        return ele.id === selector.slice(1);\n    }\n    // if use class\n    if (selector.charAt(0) === &quot;.&quot;) {\n        return (&quot; &quot; + ele.className + &quot; &quot;).indexOf(&quot; &quot; + selector.slice(1) + &quot; &quot;) != -1;\n    }\n    // if use tagName\n    return ele.tagName.toLowerCase() === selector.toLowerCase();\n}\n\n// 调用\nvar box = document.getElementById(&quot;box&quot;);\ndelegateEvent(box, &quot;a&quot;, &quot;click&quot;, function(){\n    console.log(this.href);\n})\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>手写事件触发器，并要求兼容浏览器</strong></p><div class="language-JavaScript ext-JavaScript line-numbers-mode"><pre class="language-JavaScript"><code>var fireEvent = function(element, event){\n    if (document.createEventObject){\n        var mockEvent = document.createEventObject();\n        return element.fireEvent(&#39;on&#39; + event, mockEvent)\n    }else{\n        var mockEvent = document.createEvent(&#39;HTMLEvents&#39;);\n        mockEvent.initEvent(event, true, true);\n        return element.dispatchEvent(mockEvent);\n    }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>手写 Function.bind 函数</strong></p><div class="language-JavaScript ext-JavaScript line-numbers-mode"><pre class="language-JavaScript"><code>if (!Function.prototype.bind) {\n  Function.prototype.bind = function (oThis) {\n    if (typeof this !== &quot;function&quot;) {\n      throw new TypeError(&quot;&#39;this&#39; is not function&quot;);\n    }\n\n    // bind&#39;s default arguments, array without first element\n    // first part arguments for the function\n    var aBindArgs = Array.prototype.slice.call(arguments, 1);\n    var fToBind = this; // the function will be binding\n    var fNOP = function () {};\n    var fBound = function () {\n          // target this will be binding\n          var oThis = this instanceof fNOP ? this : oThis || this;\n          // last part arguments for the function\n          var aCallArgs = Array.prototype.slice.call(arguments);\n          // complete arguments for the function\n          var aFuncArgs = aBindArgs.concat(aCallArgs);\n          return fToBind.apply(oThis, aFuncArgs);\n        };\n\n    // fBound extends fToBind\n    fNOP.prototype = this.prototype;\n    fBound.prototype = new fNOP();\n\n    return fBound;\n  };\n}\n\n// 调用\nvar add = function(a, b, c){ return a + b + c;};\nvar newAdd = add.bind(null, 1, 2);\nvar result = newAdd(3);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>手写数组快速排序</strong></p><div class="language-JavaScript ext-JavaScript line-numbers-mode"><pre class="language-JavaScript"><code>var quickSort = function(arr) {\n    if (arr.length &lt;= 1) { return arr; }\n    var pivotIndex = Math.floor(arr.length / 2);\n    var pivot = arr.splice(pivotIndex, 1)[0];\n    var left = [];\n    var right = [];\n    for (var i = 0, len = arr.length; i &lt; len; i++){\n        if (arr[i] &lt; pivot) {\n          left.push(arr[i]);\n        } else {\n          right.push(arr[i]);\n        }\n    }\n    return quickSort(left).concat([pivot], quickSort(right));\n};\n\n// 调用\nquickSort([9, 4, 2, 8, 1, 5, 3, 7]);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>手写数组冒泡排序</strong></p><div class="language-JavaScript ext-JavaScript line-numbers-mode"><pre class="language-JavaScript"><code>var bubble = function(arr){\n    var maxIndex = arr.length - 1, temp, flag;\n    for (var i = maxIndex; i &gt; 0; i--) {\n        flag = true\n        for (var j = 0; j &lt; i; j++) {\n            if (arr[j] &gt; arr[j + 1]) {\n                temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n                flag = false;\n            }\n        }\n        if(! flag){\n            break;\n        }\n    }\n    return arr;\n}\n// 调用\nvar arr = bubble([13, 69, 28, 93, 55, 75, 34]);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>手写数组去重</strong></p><div class="language-JavaScript ext-JavaScript line-numbers-mode"><pre class="language-JavaScript"><code>Array.prototype.unique = function() { return [...new Set(this)];};\n// 调用\n[1, 2, 3, 3, 2, 1].unique();\n\nfunction unique1(arr){\n    var hash = {}, result = [];\n    for(var i=0, len=arr.length; i&lt;len; i++){\n        if(! hash[arr[i]]){\n          result.push(arr[i]);\n          hash[arr[i]] = true;\n        }\n    }\n    return result;\n}\n// 调用\nunique1([1, 2, 3, 3, 2, 1]);\n\nArray.prototype.unique2 = function(){\n    this.sort();\n    var result = [this[0]];\n    var len = this.length;\n    for(var i = 0; i &lt; len; i++){\n        if(this[i] !== result[result.length - 1]){\n          result.push(this[i]);\n        }\n    }\n    return result;\n}\n// 调用\n[1, 2, 3, 3, 2, 1].unique2();\n\nfunction unique3(arr){\n    var result = [];\n    for(var i=0; i&lt;arr.length; i++){\n        if(result.indexOf(arr[i]) == -1){\n          result.push(arr[i]);\n        }\n    }\n    return result;\n}\n\n// 调用\nunique3([1, 2, 3, 3, 2, 1]);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>将url的查询参数解析成字典对象</strong></p><div class="language-JavaScript ext-JavaScript line-numbers-mode"><pre class="language-JavaScript"><code>function parseQuery(url) {\n  url = url == null ? window.location.href : url;\n  var search = url.substring(url.lastIndexOf(&quot;?&quot;) + 1);\n  var hash = {};\n  var reg = /([^?&amp;=]+)=([^?&amp;=]*)/g;\n  search.replace(reg, function (match, $1, $2) {\n      var name = decodeURIComponent($1);\n      var val = decodeURIComponent($2);\n      hash[name] = String(val);\n      return match;\n  });\n  return hash;\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>封装函数节流函数</strong></p><div class="language-JavaScript ext-JavaScript line-numbers-mode"><pre class="language-JavaScript"><code>var throttle = function(fn, delay, mustRunDelay){\n  var timer = null;\n  var t_start;\n  return function(){\n    var context = this, args = arguments, t_curr = +new Date();\n    clearTimeout(timer);\n    if(!t_start){\n      t_start = t_curr;\n    }\n    if(t_curr - t_start &gt;= mustRunDelay){\n      fn.apply(context, args);\n      t_start = t_curr;\n    } else {\n      timer = setTimeout(function(){\n        fn.apply(context, args);\n      }, delay);\n    }\n  };\n};\n\n// 调用（两次间隔50ms内连续触发不执行，但每累计100ms至少执行一次\nwindow.onresize = throttle(myFunc, 50, 100);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>用JS实现千位分隔符</strong></p><div class="language-JavaScript ext-JavaScript line-numbers-mode"><pre class="language-JavaScript"><code>function test1(num){\n  var str = (+ num) + &#39;&#39;;\n  var len = str.length;\n  if(len &lt;= 3) return str;\n  num = &#39;&#39;;\n  while(len &gt; 3){\n      len -= 3;\n      num = &#39;,&#39; + str.substr(len, 3) + num;\n  }\n  return str.substr(0, len) + num;\n}\n\nfunction test2(num){\n  // ?= 正向匹配:匹配位置\n  // ?! 正向不匹配:排除位置\n  var str = (+num).toString();\n  var reg = /(?=(?!\\b)(\\d{3})+$)/g;\n  return str.replace(reg, &#39;,&#39;);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',22)],r={},v=(0,i(13860).Z)(r,[["render",function(n,e){return(0,l.wg)(),(0,l.iD)("div",null,s)}]])},13860:(n,e)=>{e.Z=(n,e)=>{const i=n.__vccOpts||n;for(const[n,l]of e)i[n]=l;return i}},24285:(n,e,i)=>{i.r(e),i.d(e,{data:()=>l});const l=JSON.parse('{"key":"v-0a308c50","path":"/Interview/base/Handwritten-code.html","title":"手写事件侦听器","lang":"zh-CN","frontmatter":{"title":"手写事件侦听器","icon":null,"date":"2022-12-15T00:00:00.000Z","category":["Interview"],"summary":"手写事件侦听器，并要求兼容浏览器 手写事件模型 手写事件代理，并要求兼容浏览器 手写事件触发器，并要求兼容浏览器 手写 Function.bind 函数 手写数组快速排序 手写数组冒泡排序 手写数组去重 将url的查询参数解析成字典对象 封装函数节流函数 ` 用JS实现千位分隔符","head":[["meta",{"property":"og:url","content":"https://0808200.xyz/Interview/base/Handwritten-code.html"}],["meta",{"property":"og:site_name","content":"𝑀𝑟.𝑔𝑜𝑜𝑔𝑥ℎ"}],["meta",{"property":"og:title","content":"手写事件侦听器"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-01-17T08:24:10.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:published_time","content":"2022-12-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-17T08:24:10.000Z"}]]},"excerpt":"","headers":[],"git":{"createdTime":1673943850000,"updatedTime":1673943850000,"contributors":[{"name":"googxh","email":"gxh522@qq.com","commits":1}]},"readingTime":{"minutes":3.45,"words":1034},"filePathRelative":"Interview/base/Handwritten-code.md","localizedDate":"2022年12月15日"}')}}]);