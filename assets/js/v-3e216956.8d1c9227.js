"use strict";(self.webpackChunkmyblog=self.webpackChunkmyblog||[]).push([[85253],{92898:(e,a,o)=>{o.r(a),o.d(a,{default:()=>r});var t=o(60329);const l=(0,t._)("p",null,[(0,t.Uk)("clang-format 是一种代码格式化工具，可用于格式化(排版) C / C++ / Java / JavaScript / Objective-C / Protobuf / C# 的代码。它支持多种预设代码风格与自定义风格 (通过编写 "),(0,t._)("code",null,".clang-format"),(0,t.Uk)(" 文件)。")],-1),n=(0,t.uE)('<h2 id="自定义格式化" tabindex="-1"><a class="header-anchor" href="#自定义格式化" aria-hidden="true">#</a> 自定义格式化</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>clang-format -style<span class="token operator">=</span>格式名 -dump-config <span class="token operator">&gt;</span> .clang-format`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，格式名的取值可以为 <code>LLVM</code>, <code>Google</code>, <code>Chromium</code>, <code>Mozilla</code>, <code>Webkit</code> 中的任一种，这会将对应格式预设写入 <code>.clang-format</code> 文件。</p><h2 id="使用命令行" tabindex="-1"><a class="header-anchor" href="#使用命令行" aria-hidden="true">#</a> 使用命令行</h2><h3 id="格式" tabindex="-1"><a class="header-anchor" href="#格式" aria-hidden="true">#</a> 格式</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>clang-format <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>file<span class="token operator">&gt;</span> <span class="token punctuation">..</span>.<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="可用选项" tabindex="-1"><a class="header-anchor" href="#可用选项" aria-hidden="true">#</a> 可用选项</h3><ul><li><p><code>--Werror</code>: 将格式化警告变为错误</p></li><li><p><code>--Wno-error=unknown</code>: 未知的格式化选项仅产生警告。</p><p>这可以保持格式化启用，即使配置包含未知 (较新) 选项。</p></li><li><p><code>--assume-filename=&lt;string&gt;</code>: 覆盖用于确定语言的文件名。</p><p>通常在从 stdin 读取时，帮助 clang-fomat 获取文件名</p></li><li><p><code>--dry-run</code> 或 <code>-n</code>: 如果设置，实际上不进行格式更改</p></li><li><p><code>--dump-config</code>: 将配置选项转储到标准输出并退出, 可以与 <code>--style</code> 选项一起使用。</p></li><li><p><code>--fallback-style=&lt;string&gt;</code>: 设置回退的默认格式，通常在 clang-format 找不到配置文件时使用。</p><p>设置 <code>--fallback-style=none</code> 可以在这种情况下跳过格式化</p></li><li><p><code>--ferror-limit=&lt;uint&gt;</code>: 设置 clang-format 输出的最大错误数，超过将停止输出。</p><p>请仅与 <code>--dry-run</code> 或 <code>-n</code> 配合使用，<code>0</code> 意味着无限制</p></li><li><p><code>-i</code>: 替换输入文件</p></li><li><p><code>--length=&lt;uint&gt;</code>: 格式化指定长度范围</p><p>可以通过指定多个偏移和长度对来格式化几个范围。</p><p>当仅指定一个偏移量而没有 <code>--length</code>，clang-format 会一直格式化到文件的最后。</p><p>只能与一个输入文件一起使用。</p></li><li><p><code>--lines=&lt;string&gt;</code>: 格式为 <code>&lt;start line&gt;:&lt;end line&gt;</code></p><p>设置格式化行的范围(起始为第一行)，可以通过指定多个范围来格式化多行。</p><p>不能与 <code>--offset</code> 和 <code>--length</code> 一起使用。</p><p>只能与一个输入文件一起使用。</p></li><li><p><code>--offset=&lt;uint&gt;</code>: 格式化从此字节偏移量开始的范围。</p><p>可以通过指定多个范围来格式化几个偏移量和长度对。</p><p>只能与一个输入文件一起使用。</p></li><li><p><code>--output-replacements-xml</code>: 输出 XML</p></li><li><p><code>--sort-includes</code>: 如果设置，将覆盖包含排序行为。由 SortIncludes 样式标志确定</p></li><li><p><code>--style=&lt;string&gt;</code> 编码样式</p><p>当前支持: <code>LLVM</code>, <code>Google</code>, <code>Chromium</code>, <code>Mozilla</code>, <code>Webkit</code></p><p>使用 <code>--style=file</code> 从中文件加载样式配置</p><p>使用 <code>--style=&quot;{key:value,...}&quot;</code> 来设置特定的参数， 例如: <code>&quot;{BasedOnStyle: llvm, IndentWidth: 8}&quot;</code></p></li><li><p><code>--verbose</code>: 输出处理的文件列表</p></li></ul><h2 id="vs-code" tabindex="-1"><a class="header-anchor" href="#vs-code" aria-hidden="true">#</a> VS Code</h2><p>在 VS Code 中安装 C/C++ 插件以启用两者支持时会自动安装 clang-format，因此无需进行任何操作，即可在 C/C++ 文件中对代码进行格式化。</p><h2 id="推荐样式" tabindex="-1"><a class="header-anchor" href="#推荐样式" aria-hidden="true">#</a> 推荐样式</h2><p>Mr.Googxh 推荐使用 Google 预设，所以在个人与工作室的每个项目中，都会使用 Google 编码风格。</p><p>建议在 VS Code 中配置默认格式风格:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;C_Cpp.clang_format_fallbackStyle&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Google&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="官方文档" tabindex="-1"><a class="header-anchor" href="#官方文档" aria-hidden="true">#</a> 官方文档</h2>',15),c={href:"http://clang.llvm.org/docs/ClangFormat.html",target:"_blank",rel:"noopener noreferrer"},d={},r=(0,o(13860).Z)(d,[["render",function(e,a){const o=(0,t.up)("ExternalLinkIcon");return(0,t.wg)(),(0,t.iD)("div",null,[l,(0,t.kq)(" more "),n,(0,t._)("ul",null,[(0,t._)("li",null,[(0,t._)("a",c,[(0,t.Uk)("地址"),(0,t.Wm)(o)]),(0,t.Uk)(" (需 VPN)")])])])}]])},13860:(e,a)=>{a.Z=(e,a)=>{const o=e.__vccOpts||e;for(const[e,t]of a)o[e]=t;return o}},303:(e,a,o)=>{o.r(a),o.d(a,{data:()=>t});const t=JSON.parse('{"key":"v-3e216956","path":"/code/language/linter/clang-format.html","title":"clang-format","lang":"zh-CN","frontmatter":{"title":"clang-format","icon":"linter","date":"2020-10-21T00:00:00.000Z","tag":["linter"],"summary":"clang-format 是一种代码格式化工具，可用于格式化(排版) C / C++ / Java / JavaScript / Objective-C / Protobuf / C# 的代码。它支持多种预设代码风格与自定义风格 (通过编写 .clang-format 文件)。\\n","head":[["meta",{"property":"og:url","content":"https://0808200.xyz/code/language/linter/clang-format.html"}],["meta",{"property":"og:site_name","content":"𝑀𝑟.𝑔𝑜𝑜𝑔𝑥ℎ"}],["meta",{"property":"og:title","content":"clang-format"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-06-29T10:08:18.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"linter"}],["meta",{"property":"article:published_time","content":"2020-10-21T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-06-29T10:08:18.000Z"}]]},"excerpt":"<p>clang-format 是一种代码格式化工具，可用于格式化(排版) C / C++ / Java / JavaScript / Objective-C / Protobuf / C# 的代码。它支持多种预设代码风格与自定义风格 (通过编写 <code v-pre>.clang-format</code> 文件)。</p>\\n","headers":[{"level":2,"title":"自定义格式化","slug":"自定义格式化","children":[]},{"level":2,"title":"使用命令行","slug":"使用命令行","children":[{"level":3,"title":"格式","slug":"格式","children":[]},{"level":3,"title":"可用选项","slug":"可用选项","children":[]}]},{"level":2,"title":"VS Code","slug":"vs-code","children":[]},{"level":2,"title":"推荐样式","slug":"推荐样式","children":[]},{"level":2,"title":"官方文档","slug":"官方文档","children":[]}],"git":{"createdTime":1656322430000,"updatedTime":1656497298000,"contributors":[{"name":"googxh","email":"gxh522@qq.com","commits":2}]},"readingTime":{"minutes":2.49,"words":748},"filePathRelative":"code/language/linter/clang-format.md","localizedDate":"2020年10月21日"}')}}]);