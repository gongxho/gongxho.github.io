"use strict";(self.webpackChunkmyblog=self.webpackChunkmyblog||[]).push([[25375],{56083:(e,n,a)=>{a.r(n),a.d(n,{default:()=>c});var s=a(60329);const o=[(0,s.uE)('<h2 id="_1-前言" tabindex="-1"><a class="header-anchor" href="#_1-前言" aria-hidden="true">#</a> 1 前言</h2><h3 id="_1-1-面向对象的三大特性" tabindex="-1"><a class="header-anchor" href="#_1-1-面向对象的三大特性" aria-hidden="true">#</a> 1.1 面向对象的三大特性</h3><ul><li>封装</li><li>继承</li><li>多态</li></ul><h3 id="_1-2-原型链的知识" tabindex="-1"><a class="header-anchor" href="#_1-2-原型链的知识" aria-hidden="true">#</a> 1.2 原型链的知识</h3><blockquote><p>原型链是面向对象的基础，是非常重要的部分。有以下几种知识：</p></blockquote><ul><li>创建对象有几种方法</li><li>原型、构造函数、实例、原型链</li><li><code>instanceof</code>的原理</li><li><code>new</code> 运算符</li></ul><h2 id="_2-创建对象有几种方法" tabindex="-1"><a class="header-anchor" href="#_2-创建对象有几种方法" aria-hidden="true">#</a> 2 创建对象有几种方法</h2><h3 id="_2-1-方式一-字面量" tabindex="-1"><a class="header-anchor" href="#_2-1-方式一-字面量" aria-hidden="true">#</a> 2.1 方式一：字面量</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>    <span class="token keyword">var</span> obj11 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;smyh&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> obj12 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">smyh</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//内置对象（内置的构造函数）</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>上面的两种写法，效果是一样的。因为，第一种写法，<code>obj11</code>会指向<code>Object</code>。</p></blockquote><ul><li>第一种写法是：字面量的方式。</li><li>第二种写法是：内置的构造函数</li></ul><h3 id="_2-2-方式二-通过构造函数" tabindex="-1"><a class="header-anchor" href="#_2-2-方式二-通过构造函数" aria-hidden="true">#</a> 2.2 方式二：通过构造函数</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>    <span class="token keyword">var</span> <span class="token function-variable function">M</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">var</span> obj3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">M</span><span class="token punctuation">(</span><span class="token string">&#39;smyhvae&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-方法三-object-create" tabindex="-1"><a class="header-anchor" href="#_2-3-方法三-object-create" aria-hidden="true">#</a> 2.3 方法三：Object.create</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>    <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;smyhvae&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> obj3 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//此方法创建的对象，是用原型链连接的</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>第三种方法，很少有人能说出来。这种方式里，<code>obj3</code>是实例，<code>p</code>是<code>obj3的``原型（</code>name<code>是p原型里的属性），构造函数是</code>Objecet` 。</p></blockquote><p><img src="http://img.smyhvae.com/20180306_1633.png" alt=""></p><h2 id="_3-原型、构造函数、实例-以及原型链" tabindex="-1"><a class="header-anchor" href="#_3-原型、构造函数、实例-以及原型链" aria-hidden="true">#</a> 3 原型、构造函数、实例，以及原型链</h2><p><img src="http://img.smyhvae.com/20180306_1540.png" alt=""></p><blockquote><p>PS：任何一个函数，如果在前面加了<code>new</code>，那就是构造函数。</p></blockquote><h3 id="_3-1-原型、构造函数、实例三者之间的关系" tabindex="-1"><a class="header-anchor" href="#_3-1-原型、构造函数、实例三者之间的关系" aria-hidden="true">#</a> 3.1 原型、构造函数、实例三者之间的关系</h3><p><img src="http://img.smyhvae.com/20180306_2107.png" alt=""></p><ol><li>构造函数通过 <code>new</code> 生成实例</li><li>构造函数也是函数，构造函数的<code>prototype</code>指向原型。（所有的函数有<code>prototype</code>属性，但实例没有 <code>prototype</code>属性）</li><li>原型对象中有 <code>constructor</code>，指向该原型的构造函数。</li></ol><blockquote><p>上面的三行，代码演示：</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token keyword">var</span> <span class="token function-variable function">Foo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token string">&#39;smyhvae&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>上面的代码中，<code>Foo.prototype.constructor === Foo</code>的结果是<code>true</code>：</p></blockquote><p><img src="http://img.smyhvae.com/20180306_2120.png" alt=""></p><ol start="4"><li>实例的<code>__proto__</code>指向原型。也就是说，<code>Foo.__proto__ === M.prototype</code>。</li></ol><blockquote><p>声明：所有的<strong>引用类型</strong>（数组、对象、函数）都有<code>__proto__</code>这个属性。</p></blockquote><p><code>Foo.__proto__ === Function.prototype</code>的结果为true，说明<code>Foo</code>这个普通的函数，是<code>Function</code>构造函数的一个实例。</p><h3 id="_3-2-原型链" tabindex="-1"><a class="header-anchor" href="#_3-2-原型链" aria-hidden="true">#</a> 3.2 原型链</h3><p><strong>原型链的基本原理</strong>：任何一个<strong>实例</strong>，通过原型链，找到它上面的<strong>原型</strong>，该原型对象中的方法和属性，可以被所有的原型实例共享。</p><blockquote><p><code>Object</code>是原型链的顶端。</p></blockquote><ul><li>原型可以起到继承的作用。原型里的方法都可以被不同的实例共享：</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token comment">//给Foo的原型添加 say 函数</span>\n  <span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>原型链的关键</strong>：在访问一个实例的时候，如果实例本身没找到此方法或属性，就往原型上找。如果还是找不到，继续往上一级的原型上找。</p><h3 id="_3-3-instanceof的原理" tabindex="-1"><a class="header-anchor" href="#_3-3-instanceof的原理" aria-hidden="true">#</a> 3.3 <code>instanceof</code>的原理</h3><p><img src="http://img.smyhvae.com/20180306_2209.png" alt=""></p><ul><li><code>instanceof</code>的<strong>作用</strong>：用于判断<strong>实例</strong>属于哪个<strong>构造函数</strong>。</li><li><code>instanceof</code>的<strong>原理</strong>：判断实例对象的<code>__proto__</code>属性，和构造函数的<code>prototype</code>属性，是否为同一个引用（是否指向同一个地址）。</li></ul><blockquote><ul><li><strong>注意1</strong>：虽然说，实例是由构造函数 new 出来的，但是实例的<code>__proto__</code>属性引用的是构造函数的<code>prototype</code>。也就是说，实例的<code>__proto__</code>属性与构造函数本身无关。</li><li><strong>注意2</strong>：在原型链上，原型的上面可能还会有原型，以此类推往上走，继续找<code>__proto__</code>属性。这条链上如果能找到， instanceof 的返回结果也是 true。</li></ul></blockquote><p>比如说：</p><ul><li><code>foo instance of Foo</code>的结果为true，因为<code>foo.__proto__ === M.prototype</code>为<code>true</code></li><li><strong><code>foo instance of Objecet</code>的结果也为true</strong>，为<code>Foo.prototype.__proto__ === Object.prototype</code>为<code>true</code>。</li></ul><blockquote><p>但我们不能轻易的说：<code>foo</code> 一定是 由<code>Object</code>创建的实例`。这句话是错误的。我们来看下一个问题就明白了。</p></blockquote><h3 id="_3-4-分析一个问题" tabindex="-1"><a class="header-anchor" href="#_3-4-分析一个问题" aria-hidden="true">#</a> 3.4 分析一个问题</h3><p><strong>问题：<strong>已知A继承了B，B继承了C。怎么判断 a 是由A</strong>直接生成</strong>的实例，还是B直接生成的实例呢？还是C直接生成的实例呢？</p><blockquote><p>分析：这就要用到原型的<code>constructor</code>属性了。</p></blockquote><ul><li><code>foo.__proto__.constructor === M</code>的结果为<code>true</code>，但是 <code>foo.__proto__.constructor === Object</code>的结果为<code>false</code>。</li><li>所以，用 <code>consturctor</code>判断就比用 <code>instanceof</code>判断，更为严谨。</li></ul><h2 id="_4-new-运算符" tabindex="-1"><a class="header-anchor" href="#_4-new-运算符" aria-hidden="true">#</a> 4 new 运算符</h2><blockquote><p>当<code>new Foo()</code>时发生了什么：</p></blockquote><ul><li>创建一个<strong>新的空对象实例</strong>。</li><li>将此空对象的隐式原型指向其构造函数的显示原型。</li><li>执行构造函数（传入相应的参数，如果没有参数就不用传），同时 <code>this</code> 指向这个新实例。</li><li>如果返回值是一个新对象，那么直接返回该对象；如果无返回值或者返回一个非对象值，那么就将步骤（1）创建的对象返回。</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div>',51)],t={},c=(0,a(13860).Z)(t,[["render",function(e,n){return(0,s.wg)(),(0,s.iD)("div",null,o)}]])},13860:(e,n)=>{n.Z=(e,n)=>{const a=e.__vccOpts||e;for(const[e,s]of n)a[e]=s;return a}},90183:(e,n,a)=>{a.r(n),a.d(n,{data:()=>s});const s=JSON.parse('{"key":"v-f92b2c74","path":"/Interview/base/createObj_and_the_prototype_chain.html","title":"创建对象和原型链","lang":"zh-CN","frontmatter":{"title":"创建对象和原型链","icon":null,"date":"2022-12-15T00:00:00.000Z","category":["Interview"],"star":true,"summary":"1 前言 1.1 面向对象的三大特性 封装; 继承; 多态; 1.2 原型链的知识 \\" 原型链是面向对象的基础，是非常重要的部分。有以下几种知识：\\" 创建对象有几种方法; 原型、构造函数、实例、原型链; instanceof的原理; new 运算符; 2 创建对象有几种方法 2.1 方式一：字面量 \\" 上面的两种写法，效果是一样的。因为，第一种写法，obj1","head":[["meta",{"property":"og:url","content":"https://0808200.xyz/Interview/base/createObj_and_the_prototype_chain.html"}],["meta",{"property":"og:site_name","content":"𝑀𝑟.𝑔𝑜𝑜𝑔𝑥ℎ"}],["meta",{"property":"og:title","content":"创建对象和原型链"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-01-17T08:24:10.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:published_time","content":"2022-12-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-17T08:24:10.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"1 前言","slug":"_1-前言","children":[{"level":3,"title":"1.1 面向对象的三大特性","slug":"_1-1-面向对象的三大特性","children":[]},{"level":3,"title":"1.2 原型链的知识","slug":"_1-2-原型链的知识","children":[]}]},{"level":2,"title":"2 创建对象有几种方法","slug":"_2-创建对象有几种方法","children":[{"level":3,"title":"2.1 方式一：字面量","slug":"_2-1-方式一-字面量","children":[]},{"level":3,"title":"2.2 方式二：通过构造函数","slug":"_2-2-方式二-通过构造函数","children":[]},{"level":3,"title":"2.3 方法三：Object.create","slug":"_2-3-方法三-object-create","children":[]}]},{"level":2,"title":"3 原型、构造函数、实例，以及原型链","slug":"_3-原型、构造函数、实例-以及原型链","children":[{"level":3,"title":"3.1 原型、构造函数、实例三者之间的关系","slug":"_3-1-原型、构造函数、实例三者之间的关系","children":[]},{"level":3,"title":"3.2 原型链","slug":"_3-2-原型链","children":[]},{"level":3,"title":"3.3 instanceof的原理","slug":"_3-3-instanceof的原理","children":[]},{"level":3,"title":"3.4 分析一个问题","slug":"_3-4-分析一个问题","children":[]}]},{"level":2,"title":"4 new 运算符","slug":"_4-new-运算符","children":[]}],"git":{"createdTime":1673943850000,"updatedTime":1673943850000,"contributors":[{"name":"googxh","email":"gxh522@qq.com","commits":1}]},"readingTime":{"minutes":3.77,"words":1132},"filePathRelative":"Interview/base/createObj_and_the_prototype_chain.md","localizedDate":"2022年12月15日"}')}}]);