"use strict";(self.webpackChunkmyblog=self.webpackChunkmyblog||[]).push([[19968],{39615:(e,t,c)=>{c.r(t),c.d(t,{default:()=>b});var o=c(60329);const a=(0,o.uE)('<p>在深入源码前，让我们先建立<code>更新机制</code>的<code>心智模型</code>。</p><p>在后面两节讲解源码时，我们会将代码与<code>心智模型</code>联系上，方便你更好理解。</p><h2 id="同步更新的react" tabindex="-1"><a class="header-anchor" href="#同步更新的react" aria-hidden="true">#</a> 同步更新的React</h2><p>我们可以将<code>更新机制</code>类比<code>代码版本控制</code>。</p><p>在没有<code>代码版本控制</code>前，我们在代码中逐步叠加功能。一切看起来井然有序，直到我们遇到了一个紧急线上bug（红色节点）。</p>',5),r=["src"],d=(0,o._)("p",null,"为了修复这个bug，我们需要首先将之前的代码提交。",-1),l=(0,o._)("code",null,"React",-1),n=(0,o._)("code",null,"ReactDOM.render",-1),i=(0,o._)("code",null,"更新状态",-1),p=(0,o.uE)('<p>即没有<code>优先级</code>概念，<code>高优更新</code>（红色节点）需要排在其他<code>更新</code>后面执行。</p><h2 id="并发更新的react" tabindex="-1"><a class="header-anchor" href="#并发更新的react" aria-hidden="true">#</a> 并发更新的React</h2><p>当有了<code>代码版本控制</code>，有紧急线上bug需要修复时，我们暂存当前分支的修改，在<code>master分支</code>修复bug并紧急上线。</p>',3),u=["src"],m=(0,o._)("p",null,[(0,o.Uk)("bug修复上线后通过"),(0,o._)("code",null,"git rebase"),(0,o.Uk)("命令和"),(0,o._)("code",null,"开发分支"),(0,o.Uk)("连接上。"),(0,o._)("code",null,"开发分支"),(0,o.Uk)("基于"),(0,o._)("code",null,"修复bug的版本"),(0,o.Uk)("继续开发。")],-1),s=["src"],h=(0,o.uE)('<p>在<code>React</code>中，通过<code>ReactDOM.createBlockingRoot</code>和<code>ReactDOM.createRoot</code>创建的应用会采用<code>并发</code>的方式<code>更新状态</code>。</p><p><code>高优更新</code>（红色节点）中断正在进行中的<code>低优更新</code>（蓝色节点），先完成<code>render - commit流程</code>。</p><p>待<code>高优更新</code>完成后，<code>低优更新</code>基于<code>高优更新</code>的结果<code>重新更新</code>。</p><p>接下来两节我们会从源码角度讲解这套<code>并发更新</code>是如何实现的。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>',5),g={href:"https://www.youtube.com/watch?v=v6iR3Zk4oDY",target:"_blank",rel:"noopener noreferrer"},_=(0,o._)("code",null,"外网",-1),k=(0,o._)("code",null,"英文",-1),R={},b=(0,c(13860).Z)(R,[["render",function(e,t){const c=(0,o.up)("RouterLink"),R=(0,o.up)("ExternalLinkIcon");return(0,o.wg)(),(0,o.iD)("div",null,[a,(0,o._)("img",{src:e.$withBase("/img/git1.png"),alt:"流程1"},null,8,r),d,(0,o._)("p",null,[(0,o.Uk)("在"),l,(0,o.Uk)("中，所有通过"),n,(0,o.Uk)("创建的应用（其他创建应用的方式参考"),(0,o.Wm)(c,{to:"/react/state/reactdom.html#react%E7%9A%84%E5%85%B6%E4%BB%96%E5%85%A5%E5%8F%A3%E5%87%BD%E6%95%B0"},{default:(0,o.w5)((()=>[(0,o.Uk)("ReactDOM.render一节")])),_:1}),(0,o.Uk)("）都是通过类似的方式"),i,(0,o.Uk)("。")]),p,(0,o._)("img",{src:e.$withBase("/img/git2.png"),alt:"流程2"},null,8,u),m,(0,o._)("img",{src:e.$withBase("/img/git3.png"),alt:"流程3"},null,8,s),h,(0,o._)("p",null,[(0,o._)("a",g,[_,(0,o.Uk)(),k,(0,o.Uk)(" React Core Team Dan介绍React未来发展方向"),(0,o.Wm)(R)])])])}]])},13860:(e,t)=>{t.Z=(e,t)=>{const c=e.__vccOpts||e;for(const[e,o]of t)c[e]=o;return c}},11063:(e,t,c)=>{c.r(t),c.d(t,{data:()=>o});const o=JSON.parse('{"key":"v-ca25e76e","path":"/react/state/mental.html","title":"心智模型","lang":"zh-CN","frontmatter":{"title":"心智模型","author":"BetaSu","tag":["React"],"summary":"在深入源码前，让我们先建立更新机制的心智模型。 在后面两节讲解源码时，我们会将代码与心智模型联系上，方便你更好理解。 同步更新的React 我们可以将更新机制类比代码版本控制。 在没有代码版本控制前，我们在代码中逐步叠加功能。一切看起来井然有序，直到我们遇到了一个紧急线上bug（红色节点）。 为了修复这个bug，我们需要首先将之前的代码提交。 在React中","head":[["meta",{"property":"og:url","content":"https://0808200.xyz/react/state/mental.html"}],["meta",{"property":"og:site_name","content":"𝑀𝑟.𝑔𝑜𝑜𝑔𝑥ℎ"}],["meta",{"property":"og:title","content":"心智模型"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-08-29T09:14:21.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"BetaSu"}],["meta",{"property":"article:tag","content":"React"}],["meta",{"property":"article:modified_time","content":"2022-08-29T09:14:21.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"同步更新的React","slug":"同步更新的react","children":[]},{"level":2,"title":"并发更新的React","slug":"并发更新的react","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","children":[]}],"git":{"createdTime":1661764461000,"updatedTime":1661764461000,"contributors":[{"name":"googxh","email":"gxh522@qq.com","commits":1}]},"readingTime":{"minutes":1.56,"words":469},"filePathRelative":"react/state/mental.md","localizedDate":"2022年8月29日"}')}}]);