"use strict";(self.webpackChunkmyblog=self.webpackChunkmyblog||[]).push([[24350],{95590:(i,l,e)=>{e.r(l),e.d(l,{default:()=>a});var t=e(60329);const p=[(0,t.uE)('<h3 id="性能优化" tabindex="-1"><a class="header-anchor" href="#性能优化" aria-hidden="true">#</a> 性能优化</h3><hr><p><strong>如何进行网站性能优化</strong></p><ul><li><p>content方面</p><ul><li>减少HTTP请求：合并文件、CSS精灵、inline Image</li><li>减少DNS查询：DNS查询完成之前浏览器不能从这个主机下载任何任何文件。方法：DNS缓存、将资源分布到恰当数量的主机名，平衡并行下载和DNS查询</li><li>避免重定向：多余的中间访问</li><li>使Ajax可缓存</li><li>非必须组件延迟加载</li><li>未来所需组件预加载</li><li>减少DOM元素数量</li><li>将资源放到不同的域下：浏览器同时从一个域下载资源的数目有限，增加域可以提高并行下载量</li><li>减少iframe数量</li><li>不要404</li></ul></li><li><p>Server方面</p><ul><li>使用CDN</li><li>添加Expires或者Cache-Control响应头</li><li>对组件使用Gzip压缩</li><li>配置ETag</li><li>Flush Buffer Early</li><li>Ajax使用GET进行请求</li><li>避免空src的img标签</li></ul></li><li><p>Cookie方面</p><ul><li>减小cookie大小</li><li>引入资源的域名不要包含cookie</li></ul></li><li><p>css方面</p><ul><li>将样式表放到页面顶部</li><li>不使用CSS表达式</li><li>不使用IE的Filter</li></ul></li><li><p>Javascript方面</p><ul><li>将脚本放到页面底部</li><li>将javascript和css从外部引入</li><li>压缩javascript和css</li><li>删除不需要的脚本</li><li>减少DOM访问</li><li>合理设计事件监听器</li></ul></li><li><p>图片方面</p><ul><li>优化图片：根据实际颜色需要选择色深、压缩</li><li>优化css精灵</li><li>不要在HTML中拉伸图片</li><li>保证favicon.ico小并且可缓存</li></ul></li><li><p>移动方面</p><ul><li>保证组件小于25k</li><li><code>Pack Components into a Multipart Document</code></li></ul></li></ul><p><strong>你有用过哪些前端性能优化的方法？</strong></p><ul><li>减少http请求次数：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓存 ，图片服务器。</li><li>前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数</li><li>用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。</li><li>当需要设置的样式很多时设置className而不是直接操作style</li><li>少用全局变量、缓存DOM节点查找的结果。减少IO读取操作</li><li>避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)</li><li>图片预加载，将样式表放在顶部，将脚本放在底部 加上时间戳</li><li>避免在页面的主体布局中使用table，table要等其中的内容完全下载之后才会显示出来，显示比div+css布局慢</li></ul><p><strong>谈谈性能优化问题</strong></p><ul><li>代码层面：避免使用css表达式，避免使用高级选择器，通配选择器</li><li>缓存利用：缓存Ajax，使用CDN，使用外部js和css文件以便缓存，添加Expires头，服务端配置Etag，减少DNS查找等</li><li>请求数量：合并样式和脚本，使用css图片精灵，初始首屏之外的图片资源按需加载，静态资源延迟加载</li><li>请求带宽：压缩文件，开启GZIP</li></ul><p><strong>代码层面的优化</strong></p><ul><li><p>用hash-table来优化查找</p></li><li><p>少用全局变量</p></li><li><p>用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能</p></li><li><p>用setTimeout来避免页面失去响应</p></li><li><p>缓存DOM节点查找的结果</p></li><li><p>避免使用CSS Expression</p></li><li><p>避免全局查询</p></li><li><p>避免使用with(with会创建自己的作用域，会增加作用域链长度)</p></li><li><p>多个变量声明合并</p></li><li><p>避免图片和iFrame等的空Src。空Src会重新加载当前页面，影响速度和效率</p></li><li><p>尽量避免写在HTML标签中写Style属性</p></li></ul><p><strong>前端性能优化最佳实践？</strong></p><ul><li>性能评级工具（PageSpeed 或 YSlow）</li><li>合理设置 HTTP 缓存：Expires 与 Cache-control</li><li>静态资源打包，开启 Gzip 压缩（节省响应流量）</li><li>CSS3 模拟图像，图标base64（降低请求数）</li><li>模块延迟(defer)加载/异步(async)加载</li><li>Cookie 隔离（节省请求流量）</li><li>localStorage（本地存储）</li><li>使用 CDN 加速（访问最近服务器）</li><li>启用 HTTP/2（多路复用，并行加载）</li><li>前端自动化（gulp/webpack）</li></ul>',12)],r={},a=(0,e(13860).Z)(r,[["render",function(i,l){return(0,t.wg)(),(0,t.iD)("div",null,p)}]])},13860:(i,l)=>{l.Z=(i,l)=>{const e=i.__vccOpts||i;for(const[i,t]of l)e[i]=t;return e}},78610:(i,l,e)=>{e.r(l),e.d(l,{data:()=>t});const t=JSON.parse('{"key":"v-1e5f5550","path":"/Interview/base/performance-optimization.html","title":"如何进行网站性能优化","lang":"zh-CN","frontmatter":{"title":"如何进行网站性能优化","icon":null,"date":"2022-12-15T00:00:00.000Z","category":["Interview"],"summary":"性能优化 --- 如何进行网站性能优化 content方面; 减少HTTP请求：合并文件、CSS精灵、inline Image; 减少DNS查询：DNS查询完成之前浏览器不能从这个主机下载任何任何文件。方法：DNS缓存、将资源分布到恰当数量的主机名，平衡并行下载和DNS查询; 避免重定向：多余的中间访问; 使Ajax可缓存; 非必须组件延迟加载; 未来所需组","head":[["meta",{"property":"og:url","content":"https://0808200.xyz/Interview/base/performance-optimization.html"}],["meta",{"property":"og:site_name","content":"𝑀𝑟.𝑔𝑜𝑜𝑔𝑥ℎ"}],["meta",{"property":"og:title","content":"如何进行网站性能优化"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-01-17T08:24:10.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:published_time","content":"2022-12-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-17T08:24:10.000Z"}]]},"excerpt":"","headers":[{"level":3,"title":"性能优化","slug":"性能优化","children":[]}],"git":{"createdTime":1673943850000,"updatedTime":1673943850000,"contributors":[{"name":"googxh","email":"gxh522@qq.com","commits":1}]},"readingTime":{"minutes":3.41,"words":1023},"filePathRelative":"Interview/base/performance-optimization.md","localizedDate":"2022年12月15日"}')}}]);