"use strict";(self.webpackChunkmyblog=self.webpackChunkmyblog||[]).push([[23043],{95853:(n,a,s)=>{s.r(a),s.d(a,{default:()=>Fa});var e=s(60329);const t=s.p+"assets/img/Chrome-V8.693e3d9e.png",l=s.p+"assets/img/how-v8-works.1d516690.png",i=s.p+"assets/img/google-v8.b46ce9c0.jpg",o=s.p+"assets/img/overview.67f65071.png",p=s.p+"assets/img/register.690adead.jpg",r=s.p+"assets/img/ignition-turbofan-pipeline.1f042823.jpeg",c=s.p+"assets/img/v8.87f3bdb8.jpg",u=s.p+"assets/img/properties.515d184b.jpg",d=s.p+"assets/img/bytecode-ignition.27dcf884.jpg",k=s.p+"assets/img/v8-ui.efe17f4e.jpg",v=s.p+"assets/img/microtask.54b2d48d.jpg",m=s.p+"assets/img/stack.e5191435.jpg",g=s.p+"assets/img/async.0ca55be9.jpg",b=s.p+"assets/img/js.3c58cce5.gif",h=(0,e.uE)('<p><img src="'+t+'" alt="V8">   V8 是由 Google 开发的开源 <strong>JavaScript 引擎</strong>，也被称为<strong>虚拟机</strong>，模拟实际计算机各种功能来<strong>实现代码的编译和执行</strong>。</p><h2 id="记得那年花下-深夜-初识谢娘时" tabindex="-1"><a class="header-anchor" href="#记得那年花下-深夜-初识谢娘时" aria-hidden="true">#</a> 记得那年花下，深夜，初识谢娘时</h2><h3 id="为什么需要-javascript-引擎" tabindex="-1"><a class="header-anchor" href="#为什么需要-javascript-引擎" aria-hidden="true">#</a> 为什么需要 JavaScript 引擎</h3><p>  我们写的 JavaScript 代码直接交给浏览器或者 Node 执行时，底层的 CPU 是不认识的，也没法执行。<strong>CPU 只认识自己的指令集，指令集对应的是汇编代码</strong>。写汇编代码是一件很痛苦的事情。并且<strong>不同类型的 CPU 的指令集是不一样的，那就意味着需要给每一种 CPU 重写汇编代码</strong>。<br>   JavaScirpt 引擎可以将 JS 代码编译为不同 CPU(Intel, ARM 以及 MIPS 等)对应的汇编代码，这样我们就不需要去翻阅每个 CPU 的指令集手册来编写汇编代码了。当然，<strong>JavaScript 引擎的工作也不只是编译代码，它还要负责执行代码、分配内存以及垃圾回收</strong>。</p><div class="language-s ext-s line-numbers-mode"><pre class="language-s"><code># 将一个寄存器中的数据移动到另外一个寄存器中\n1000100111011000  #机器指令\nmov ax,bx         #汇编指令\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',5),_={href:"http://www.ruanyifeng.com/blog/2018/01/",target:"_blank",rel:"noopener noreferrer"},f=(0,e._)("h3",{id:"热门-javascript-引擎",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#热门-javascript-引擎","aria-hidden":"true"},"#"),(0,e.Uk)(" 热门 JavaScript 引擎")],-1),y={href:"https://v8.dev/",target:"_blank",rel:"noopener noreferrer"},x={href:"https://developer.apple.com/documentation/javascriptcore?language=objc",target:"_blank",rel:"noopener noreferrer"},w=(0,e._)("li",null,"Rhino，由 Mozilla 基金会管理，开放源代码，完全以 Java 编写，用于 HTMLUnit",-1),S={href:"https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey",target:"_blank",rel:"noopener noreferrer"},U=(0,e._)("li",null,"Chakra (JScript 引擎)，用于 Internet Explorer。",-1),V=(0,e._)("li",null,"Chakra (JavaScript 引擎)，用于 Microsoft Edge。",-1),j=(0,e._)("li",null,"KJS，KDE 的 ECMAScript／JavaScript 引擎，最初由哈里·波顿开发，用于 KDE 项目的 Konqueror 网页浏览器中。",-1),J=(0,e._)("li",null,"JerryScript — 三星推出的适用于嵌入式设备的小型 JavaScript 引擎。",-1),E={href:"https://bellard.org/quickjs/",target:"_blank",rel:"noopener noreferrer"},C={href:"https://hermesengine.dev/",target:"_blank",rel:"noopener noreferrer"},T=(0,e._)("h3",{id:"v8",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#v8","aria-hidden":"true"},"#"),(0,e.Uk)(" V8")],-1),A={href:"https://v8.dev/",target:"_blank",rel:"noopener noreferrer"},W={href:"https://www.jianshu.com/p/bff8aa23fe4d",target:"_blank",rel:"noopener noreferrer"},P=(0,e._)("strong",null,"V8 最早被开发用以嵌入到 Google 的开源浏览器 Chrome 中",-1),M={href:"https://baike.baidu.com/item/Google%20Chrome/5638378?fr=aladdin",target:"_blank",rel:"noopener noreferrer"},D=(0,e._)("strong",null,"但是 V8 是一个可以独立运行的模块，完全可以嵌入到任何 C ++应用程序中",-1),O={href:"https://baike.baidu.com/item/javascript%E5%BC%95%E6%93%8E/5356108?fr=aladdin",target:"_blank",rel:"noopener noreferrer"},q=(0,e._)("strong",null,"V8 会编译 / 执行 JavaScript 代码，管理内存，负责垃圾回收，与宿主语言的交互等。通过暴露宿主对象 ( 变量，函数等 ) 到 JavaScript，JavaScript 可以访问宿主环境中的对象，并在脚本中完成对宿主对象的操作",-1),B=(0,e._)("p",null,[(0,e._)("img",{src:l,alt:"V8"})],-1),z={href:"https://v8.dev/logo",target:"_blank",rel:"noopener noreferrer"},F={href:"https://en.wikipedia.org/wiki/V8_(JavaScript_engine)",target:"_blank",rel:"noopener noreferrer"},I={href:"https://static001.geekbang.org/con/31/pdf/229180902/file/GMTC2018-%E3%80%8AV8%E3%80%81JavaScript+%E7%9A%84%E7%8E%B0%E5%9C%A8%E4%B8%8E%E6%9C%AA%E6%9D%A5%E3%80%8B-%E8%BF%B7%E6%B8%A1.pdf",target:"_blank",rel:"noopener noreferrer"},L={href:"https://www.jianshu.com/p/bff8aa23fe4d",target:"_blank",rel:"noopener noreferrer"},N={href:"https://baike.baidu.com/item/V8%E5%8F%91%E5%8A%A8%E6%9C%BA",target:"_blank",rel:"noopener noreferrer"},R=(0,e._)("h2",{id:"与君初相识-犹如故人归",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#与君初相识-犹如故人归","aria-hidden":"true"},"#"),(0,e.Uk)(" 与君初相识，犹如故人归")],-1),Y=(0,e._)("h3",{id:"什么是-d8",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#什么是-d8","aria-hidden":"true"},"#"),(0,e.Uk)(" 什么是 D8")],-1),H=(0,e._)("p",null,[(0,e.Uk)("  d8 是一个非常有用的调试工具，你可以把它看成是 "),(0,e._)("strong",null,"debug for V8"),(0,e.Uk)(" 的缩写。我们"),(0,e._)("strong",null,"可以使用 d8 来查看 V8 在执行 JavaScript 过程中的各种中间数据，比如作用域、AST、字节码、优化的二进制代码、垃圾回收的状态，还可以使用 d8 提供的私有 API 查看一些内部信息"),(0,e.Uk)("。")],-1),G=(0,e._)("code",null,"developer shell",-1),X={href:"http://i18njs.com/",target:"_blank",rel:"noopener noreferrer"},K={href:"https://v8.dev/docs/d8",target:"_blank",rel:"noopener noreferrer"},$=(0,e._)("h3",{id:"安装-d8",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#安装-d8","aria-hidden":"true"},"#"),(0,e.Uk)(" 安装 D8")],-1),Q=(0,e._)("p",null,"方法一：自行下载编译",-1),Z={href:"https://time.geekbang.org/column/article/219418",target:"_blank",rel:"noopener noreferrer"},nn={href:"https://v8.dev/docs/d8",target:"_blank",rel:"noopener noreferrer"},an=(0,e._)("p",null,"方法二：使用编译好的 d8 工具",-1),sn={href:"https://storage.googleapis.com/chromium-v8/official/canary/v8-mac64-dbg-8.4.109.zip",target:"_blank",rel:"noopener noreferrer"},en={href:"https://storage.googleapis.com/chromium-v8/official/canary/v8-linux32-dbg-8.4.109.zip",target:"_blank",rel:"noopener noreferrer"},tn={href:"https://storage.googleapis.com/chromium-v8/official/canary/v8-linux64-dbg-8.4.109.zip",target:"_blank",rel:"noopener noreferrer"},ln={href:"https://storage.googleapis.com/chromium-v8/official/canary/v8-win32-dbg-8.4.109.zip",target:"_blank",rel:"noopener noreferrer"},on={href:"https://storage.googleapis.com/chromium-v8/official/canary/v8-win64-dbg-8.4.109.zip",target:"_blank",rel:"noopener noreferrer"},pn=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 解压文件，点击d8打开（mac安全策略限制的话，按住control，再点击，弹出菜单中选择打开）</span>\n  <span class="token constant">V8</span> version <span class="token number">8.4</span><span class="token number">.109</span>\n  d8<span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span>\n    <span class="token number">3</span>\n  d8<span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">&#39;4&#39;</span>\n    <span class="token string">&quot;24&quot;</span>\n  d8<span class="token operator">&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span>\n    <span class="token number">23</span>\n    <span class="token keyword">undefined</span>\n  d8<span class="token operator">&gt;</span> <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>\n    <span class="token keyword">undefined</span>\n  d8<span class="token operator">&gt;</span> a <span class="token operator">+</span> <span class="token number">2</span>\n    <span class="token number">3</span>\n  d8<span class="token operator">&gt;</span> <span class="token keyword">this</span>\n    <span class="token punctuation">[</span>object global<span class="token punctuation">]</span>\n  d8<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本文后续用于 demo 演示时的文件目录结构：</p><div class="language-s ext-s line-numbers-mode"><pre class="language-s"><code>　V8：\n    # d8可执行文件\n    d8\n    icudtl.dat\n    libc++.dylib\n    libchrome_zlib.dylib\n    libicui18n.dylib\n    libicuuc.dylib\n    libv8.dylib\n    libv8_debug_helper.dylib\n    libv8_for_testing.dylib\n    libv8_libbase.dylib\n    libv8_libplatform.dylib\n    obj\n    snapshot_blob.bin\n    v8_build_config.json\n    # 新建的js示例文件\n    test.js\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>方法三：mac</p><div class="language-s ext-s line-numbers-mode"><pre class="language-s"><code>  # 如果已有HomeBrew，忽略第一条命令\n  ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;\n  brew install v8\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>方法四：<strong>使用 node 代替</strong>，比如可以用<code>node --print-bytecode ./test.js</code>，打印出 Ignition（解释器）生成的 Bytecode（字节码）。</p></li></ul>',4),rn=(0,e.uE)('<h3 id="d8-命令查看" tabindex="-1"><a class="header-anchor" href="#d8-命令查看" aria-hidden="true">#</a> d8 命令查看</h3><ul><li><p>查看 d8 命令</p><div class="language-s ext-s line-numbers-mode"><pre class="language-s"><code>  # 如果不想使用./d8这种方式进行调试，可将d8加入环境变量，之后就可以直接`d8 --help`了\n  ./d8 --help\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>过滤特定的命令</p><div class="language-s ext-s line-numbers-mode"><pre class="language-s"><code>  # 如果是 Windows 系统，可能缺少 grep 程序，请自行下载安装并添加环境变量\n  ./d8 --help |grep print\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如：</p><ul><li>print-bytecode 查看生成的字节码</li><li>print-opt-code 查看优化后的代码</li><li>print-ast 查看中间生成的 AST</li><li>print-scopes 查看中间生成的作用域</li><li>trace-gc 查看这段代码的内存回收状态</li><li>trace-opt 查看哪些代码被优化了</li><li>trace-deopt 查看哪些代码被反优化了</li><li>turbofan-stats 是打印出来优化编译器的一些统计数据的命令</li></ul></li></ul><h3 id="使用-d8-进行调试" tabindex="-1"><a class="header-anchor" href="#使用-d8-进行调试" aria-hidden="true">#</a> 使用 d8 进行调试</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// test.js</span>\n<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-s ext-s line-numbers-mode"><pre class="language-s"><code>  # d8 后面跟上文件名和要执行的命令，如执行下面这行命令，就会打印出 test.js 文件所生成的字节码。\n  ./d8 ./test.js --print-bytecode\n  # 执行以下命令，输出9\n  ./d8 ./test.js\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="内部方法" tabindex="-1"><a class="header-anchor" href="#内部方法" aria-hidden="true">#</a> 内部方法</h3><p>  你还可以使用 V8 所提供的一些<strong>内部方法</strong>，只需要在启动 V8 时传入 <code>--allow-natives-syntax</code> 命令，你就可以在 test.js 中使用诸如<code>HasFastProperties</code>（检查一个对象是否拥有快属性）的内部方法。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token parameter">property_num<span class="token punctuation">,</span> element_num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">//添加可索引属性</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> element_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">element</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">//添加常规属性</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> property_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> ppt <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">property</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">[</span>ppt<span class="token punctuation">]</span> <span class="token operator">=</span> ppt<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 检查一个对象是否拥有快属性</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">%</span><span class="token function">HasFastProperties</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">delete</span> bar<span class="token punctuation">.</span>property2<span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">%</span><span class="token function">HasFastProperties</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-s ext-s line-numbers-mode"><pre class="language-s"><code>  ./d8 --allow-natives-syntax ./test.js\n  # 依次打印：true false\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="心似双丝网-中有千千结" tabindex="-1"><a class="header-anchor" href="#心似双丝网-中有千千结" aria-hidden="true">#</a> 心似双丝网，中有千千结</h2><p><img src="'+i+'" alt="V8知识图谱"></p><h3 id="v8-引擎的内部结构" tabindex="-1"><a class="header-anchor" href="#v8-引擎的内部结构" aria-hidden="true">#</a> V8 引擎的内部结构</h3><p>  V8 是一个非常复杂的项目，有超过 100 万行 C++代码。它由许多子模块构成，其中这 4 个模块是最重要的：</p>',13),cn={href:"https://v8.dev/blog/scanner",target:"_blank",rel:"noopener noreferrer"},un=(0,e._)("blockquote",null,[(0,e._)("p",null,[(0,e.Uk)("确切的说，在“Parser”将 JavaScript 源码转换为 AST 前，还有一个叫”Scanner“的过程，具体流程如下： "),(0,e._)("img",{src:o,alt:"Scanner"})])],-1),dn={href:"https://v8.dev/docs/ignition",target:"_blank",rel:"noopener noreferrer"},kn=(0,e._)("strong",null,"通常有两种类型的解释器，基于栈 (Stack-based)和基于寄存器 (Register-based)",-1),vn=(0,e._)("strong",null,"区别体现在它们提供的指令集体系",-1),mn=(0,e._)("strong",null,"大多数解释器都是基于栈的",-1),gn=(0,e._)("strong",null,"现在的 V8 虚拟机则采用了基于寄存器的设计",-1),bn=(0,e._)("br",null,null,-1),hn=(0,e._)("strong",null,"基于寄存器的解释器架构",-1),_n=(0,e._)("img",{src:p,alt:"基于寄存器的解释器架构"},null,-1),fn={href:"https://time.geekbang.org/column/article/224908",target:"_blank",rel:"noopener noreferrer"},yn={href:"https://v8.dev/docs/turbofan",target:"_blank",rel:"noopener noreferrer"},xn={href:"https://v8.dev/blog/trash-talk",target:"_blank",rel:"noopener noreferrer"},wn=(0,e.uE)('<p>  其中，Parser，Ignition 以及 TurboFan 可以将 JS 源码编译为汇编代码，其流程图如下：</p><p><img src="'+r+'" alt="V8流程"></p><p>  简单地说，Parser 将 JS 源码转换为 AST，然后 Ignition 将 AST 转换为 Bytecode，最后 TurboFan 将 Bytecode 转换为经过优化的 Machine Code(实际上是汇编代码)。</p><ul><li>如果函数没有被调用，则 V8 不会去编译它。</li><li>如果函数只被调用 1 次，则 Ignition 将其编译 Bytecode 就直接解释执行了。TurboFan 不会进行优化编译，因为它需要 Ignition 收集函数执行时的类型信息。这就要求函数至少需要执行 1 次，TurboFan 才有可能进行优化编译。</li><li>如果函数被调用多次，则它有可能会被识别为<strong>热点函数</strong>，且 Ignition 收集的类型信息证明可以进行优化编译的话，这时 TurboFan 则会将 Bytecode 编译为 Optimized Machine Code（已优化的机器码），以提高代码的执行性能。</li></ul><p>  图片中的红色虚线是逆向的，也就是说 Optimized Machine Code 会被还原为 Bytecode，这个过程叫做 <strong>Deoptimization</strong>。这是因为 Ignition 收集的信息可能是错误的，比如 add 函数的参数之前是整数，后来又变成了字符串。生成的 Optimized Machine Code 已经假定 add 函数的参数是整数，那当然是错误的，于是需要进行 Deoptimization。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>  在运行 C、C++以及 Java 等程序之前，需要进行编译，不能直接执行源码；但对于 JavaScript 来说，我们可以直接执行源码(比如：node test.js)，它是在运行的时候先编译再执行，这种方式被称为<strong>即时编译(Just-in-time compilation)</strong>，简称为 JIT。因此，V8 也属于 <strong>JIT 编译器</strong>。</p>',7),Sn={href:"https://www.cnblogs.com/fundebug/archive/2019/07/16/how-does-v8-work.html",target:"_blank",rel:"noopener noreferrer"},Un=(0,e._)("h3",{id:"v8-是怎么执行一段-javascript-代码的",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#v8-是怎么执行一段-javascript-代码的","aria-hidden":"true"},"#"),(0,e.Uk)(" V8 是怎么执行一段 JavaScript 代码的")],-1),Vn=(0,e._)("li",null,[(0,e._)("p",null,[(0,e.Uk)("在 "),(0,e._)("strong",null,"V8 出现之前，所有的 JavaScript 虚拟机所采用的都是解释执行的方式，这是 JavaScript 执行速度过慢的一个主要原因"),(0,e.Uk)("。而 V8 率先引入了"),(0,e._)("strong",null,[(0,e.Uk)("即时编译（JIT）"),(0,e._)("strong",null,"的"),(0,e.Uk)("双轮驱动")]),(0,e.Uk)("的设计（混合使用编译器和解释器的技术），这是一种权衡策略，"),(0,e._)("strong",null,"混合编译执行和解释执行这两种手段"),(0,e.Uk)("，给 JavaScript 的执行速度带来了极大的提升。V8 出现之后，各大厂商也都在自己的 JavaScript 虚拟机中引入了 JIT 机制，所以目前市面上 JavaScript 虚拟机都有着类似的架构。另外，"),(0,e._)("strong",null,"V8 也是早于其他虚拟机引入了惰性编译、内联缓存、隐藏类等机制，进一步优化了 JavaScript 代码的编译执行效率"),(0,e.Uk)("。")])],-1),jn=(0,e._)("p",null,[(0,e.Uk)("V8 执行一段 JavaScript 的流程图： "),(0,e._)("img",{src:c,alt:"V8执行一段JavaScript流程图"})],-1),Jn={href:"https://time.geekbang.org/column/article/211682",target:"_blank",rel:"noopener noreferrer"},En=(0,e.uE)("<li><p><strong>V8 本质上是一个虚拟机</strong>，因为计算机只能识别二进制指令，所以要让计算机执行一段高级语言通常有两种手段：</p><ul><li>第一种是将高级代码转换为二进制代码，再让计算机去执行；</li><li>另外一种方式是在计算机安装一个解释器，并由解释器来解释执行。</li></ul></li><li><p>解释执行和编译执行都有各自的优缺点，<strong>解释执行启动速度快，但是执行时速度慢，而编译执行启动速度慢，但是执行速度快</strong>。为了充分地利用解释执行和编译执行的优点，规避其缺点，<strong>V8 采用了一种权衡策略，在启动过程中采用了解释执行的策略，但是如果某段代码的执行频率超过一个值，那么 V8 就会采用优化编译器将其编译成执行效率更加高效的机器代码</strong>。</p></li><li><p>总结：</p><p><strong>V8 执行一段 JavaScript 代码所经历的主要流程</strong>包括：</p><ul><li>初始化基础环境；</li><li>解析源码生成 AST 和作用域；</li><li>依据 AST 和作用域生成字节码；</li><li>解释执行字节码；</li><li>监听热点代码；</li><li>优化热点代码为二进制的机器代码；</li><li>反优化生成的二进制机器代码。</li></ul></li>",3),Cn=(0,e.uE)('<h3 id="一等公民与闭包" tabindex="-1"><a class="header-anchor" href="#一等公民与闭包" aria-hidden="true">#</a> 一等公民与闭包</h3><h4 id="一等公民的定义" tabindex="-1"><a class="header-anchor" href="#一等公民的定义" aria-hidden="true">#</a> 一等公民的定义</h4><ul><li>在编程语言中，<strong>一等公民</strong>可以作为函数参数，可以作为函数返回值，也可以赋值给变量。</li><li><strong>如果某个编程语言的函数，可以和这个语言的数据类型做一样的事情，我们就把这个语言中的函数称为一等公民</strong>。例如，字符串在几乎所有编程语言中都是一等公民，字符串可以做为函数参数，字符串可以作为函数返回值，字符串也可以赋值给变量。对于各种编程语言来说，函数就不一定是一等公民了，比如 Java 8 之前的版本。</li><li>对于 JavaScript 来说，函数可以赋值给变量，也可以作为函数参数，还可以作为函数返回值，因此 <strong>JavaScript 中函数是一等公民</strong>。</li></ul><h4 id="动态作用域与静态作用域" tabindex="-1"><a class="header-anchor" href="#动态作用域与静态作用域" aria-hidden="true">#</a> 动态作用域与静态作用域</h4><ul><li>如果一门语言的作用域是<strong>静态作用域</strong>，那么符号之间的引用关系能够根据程序代码在编译时就确定清楚，在运行时不会变。某个函数是在哪声明的，就具有它所在位置的作用域。它能够访问哪些变量，那么就跟这些变量绑定了，在运行时就一直能访问这些变量。即静态作用域可以由程序代码决定，在编译时就能完全确定。大多数语言都是静态作用域的。</li><li><strong>动态作用域（Dynamic Scope）</strong>。也就是说，变量引用跟变量声明不是在编译时就绑定死了的。在运行时，它是在运行环境中动态地找一个相同名称的变量。在 macOS 或 Linux 中用的 bash 脚本语言，就是动态作用域的。</li></ul><h4 id="闭包的三个基础特性" tabindex="-1"><a class="header-anchor" href="#闭包的三个基础特性" aria-hidden="true">#</a> 闭包的三个基础特性</h4><ul><li>JavaScript 语言允许在函数内部定义新的函数</li><li>可以在内部函数中访问父函数中定义的变量</li><li>因为 JavaScript 中的函数是一等公民，所以函数可以作为另外一个函数的返回值</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 闭包（静态作用域，一等公民，调用栈的矛盾体）</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b <span class="token operator">+</span> d<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> c<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',8),Tn={href:"https://segmentfault.com/a/1190000021586767",target:"_blank",rel:"noopener noreferrer"},An=(0,e.uE)('<h4 id="惰性解析" tabindex="-1"><a class="header-anchor" href="#惰性解析" aria-hidden="true">#</a> 惰性解析</h4><p>  所谓<strong>惰性解析</strong>是指解析器在解析的过程中，如果遇到函数声明，那么会跳过函数内部的代码，并不会为其生成 AST 和字节码，而仅仅生成顶层代码的 AST 和字节码。</p><ul><li>在编译 JavaScript 代码的过程中，V8 并不会一次性将所有的 JavaScript 解析为中间代码，这主要是基于以下两点： <ul><li>首先，<strong>如果一次解析和编译所有的 JavaScript 代码</strong>，过多的代码会增加编译时间，这会严重影响到首次执行 JavaScript 代码的速度，让用户感觉到<strong>卡顿</strong>。因为有时候一个页面的 JavaScript 代码很大，如果要将所有的代码一次性解析编译完成，那么会大大增加用户的等待时间；</li><li>其次，解析完成的字节码和编译之后的机器代码都会存放在内存中，如果一次性解析和编译所有 JavaScript 代码，那么这些中间代码和机器代码将会一直<strong>占用内存</strong>。</li></ul></li><li>基于以上的原因，所有主流的 JavaScript 虚拟机都实现了惰性解析。</li><li><strong>闭包给惰性解析带来的问题</strong>：上文的 d 不能随着 foo 函数的执行上下文被销毁掉。</li></ul><h4 id="预解析器" tabindex="-1"><a class="header-anchor" href="#预解析器" aria-hidden="true">#</a> 预解析器</h4><p>  V8 引入<strong>预解析器</strong>，比如当解析顶层代码的时候，遇到了一个函数，那么预解析器并不会直接跳过该函数，而是对该函数做一次快速的预解析。</p><ul><li><strong>判断当前函数是不是存在一些语法上的错误</strong>，发现了语法错误，那么就会向 V8 抛出语法错误；</li><li><strong>检查函数内部是否引用了外部变量，如果引用了外部的变量，预解析器会将栈中的变量复制到堆中，在下次执行到该函数的时候，直接使用堆中的引用，这样就解决了闭包所带来的问题</strong>。</li></ul><h3 id="v8-内部是如何存储对象的-快属性和慢属性" tabindex="-1"><a class="header-anchor" href="#v8-内部是如何存储对象的-快属性和慢属性" aria-hidden="true">#</a> V8 内部是如何存储对象的：快属性和慢属性</h3><p>下面的代码会输出什么：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// test.js</span>\n<span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;test-200&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;test-1&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;test-100&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;bar-B&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;test-50&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;test-9&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;test-8&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;test-3&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;test-5&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">&#39;D&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;bar-D&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;bar-C&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> bar<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">index:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">  value:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>bar<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">//输出：</span>\n<span class="token comment">// index:1  value:test-1</span>\n<span class="token comment">// index:3  value:test-3</span>\n<span class="token comment">// index:5  value:test-5</span>\n<span class="token comment">// index:8  value:test-8</span>\n<span class="token comment">// index:9  value:test-9</span>\n<span class="token comment">// index:50  value:test-50</span>\n<span class="token comment">// index:100  value:test-100</span>\n<span class="token comment">// index:200  value:test-200</span>\n<span class="token comment">// index:B  value:bar-B</span>\n<span class="token comment">// index:D  value:bar-D</span>\n<span class="token comment">// index:C  value:bar-C</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>  在 ECMAScript 规范中定义了<strong>数字属性应该按照索引值大小升序排列，字符串属性根据创建时的顺序升序排列</strong>。在这里我们把对象中的数字属性称为<strong>排序属性</strong>，在 V8 中被称为 elements，字符串属性就被称为<strong>常规属性</strong>，在 V8 中被称为 properties。在 V8 内部，为了有效地提升存储和访问这两种属性的性能，分别使用了两个线性数据结构来分别保存排序属性和常规属性。同时 v8 将部分常规属性直接存储到对象本身，我们把这称为<strong>对象内属性 (in-object properties)</strong>，不过对象内属性的数量是固定的，默认是 10 个。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token parameter">property_num<span class="token punctuation">,</span> element_num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">//添加可索引属性</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> element_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">element</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">//添加常规属性</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> property_num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> ppt <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">property</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">[</span>ppt<span class="token punctuation">]</span> <span class="token operator">=</span> ppt<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',11),Wn=(0,e._)("strong",null,"内存快照",-1),Pn=(0,e._)("code",null,"Take heap snapshot",-1),Mn={href:"https://zhuanlan.zhihu.com/p/80792297",target:"_blank",rel:"noopener noreferrer"},Dn=(0,e.uE)('<p>  我们将保存在线性数据结构中的属性称之为“<strong>快属性</strong>”，因为线性数据结构中只需要通过索引即可以访问到属性，虽然访问线性结构的速度快，但是<strong>如果从线性结构中添加或者删除大量的属性时，则执行效率会非常低，这主要因为会产生大量时间和内存开销</strong>。因此，如果一个对象的属性过多时，V8 就会采取另外一种存储策略，那就是“<strong>慢属性</strong>”策略，但慢属性的对象内部会有独立的非线性数据结构 (字典) 作为属性存储容器。所有的属性元信息不再是线性存储的，而是直接保存在属性字典中。</p><p>v8 属性存储： <img src="'+u+'" alt="v8属性存储"></p><p>总结：</p><p>  因为 JavaScript 中的对象是由一组组属性和值组成的，所以最简单的方式是使用一个字典来保存属性和值，但是由于字典是非线性结构，所以如果使用字典，读取效率会大大降低。为了提升查找效率，<strong>V8 在对象中添加了两个隐藏属性，排序属性和常规属性</strong>，element 属性指向了 elements 对象，在 elements 对象中，会按照顺序存放排序属性。properties 属性则指向了 properties 对象，在 properties 对象中，会按照创建时的顺序保存常规属性。</p><p>  通过引入这两个属性，加速了 V8 查找属性的速度，为了更加进一步提升查找效率，V8 还实现了内置内属性的策略，当常规属性少于一定数量时，V8 就会将这些常规属性直接写进对象中，这样又节省了一个中间步骤。</p><p>  但是<strong>如果对象中的属性过多时，或者存在反复添加或者删除属性的操作，那么 V8 就会将线性的存储模式降级为非线性的字典存储模式，这样虽然降低了查找速度，但是却提升了修改对象的属性的速度</strong>。</p>',6),On={href:"https://time.geekbang.org/column/article/213250",target:"_blank",rel:"noopener noreferrer"},qn=(0,e.uE)('<h3 id="堆空间和栈空间" tabindex="-1"><a class="header-anchor" href="#堆空间和栈空间" aria-hidden="true">#</a> 堆空间和栈空间</h3><h4 id="栈空间" tabindex="-1"><a class="header-anchor" href="#栈空间" aria-hidden="true">#</a> 栈空间</h4><ul><li>现代语言都是基于函数的，每个函数在执行过程中，都有自己的生命周期和作用域，当函数执行结束时，其作用域也会被销毁，因此，我们会使用栈这种数据结构来管理函数的调用过程，我们也把管理函数调用过程的栈结构称之为<strong>调用栈</strong>。</li><li><strong>栈空间</strong>主要是用来管理 JavaScript 函数调用的，栈是内存中连续的一块空间，同时栈结构是“先进后出”的策略。在函数调用过程中，涉及到上下文相关的内容都会存放在栈上，比如原生类型、引用到的对象的地址、函数的执行状态、this 值等都会存在在栈上。当一个函数执行结束，那么该函数的执行上下文便会被销毁掉。</li><li><strong>栈空间的最大的特点是空间连续</strong>，所以在栈中每个元素的地址都是固定的，因此栈空间的查找效率非常高，但是通常在内存中，很难分配到一块很大的连续空间，因此，V8 对栈空间的大小做了限制，如果函数调用层过深，那么 V8 就有可能抛出栈溢出的错误。</li><li>栈的优势和缺点： <ul><li>栈的结构非常适合函数调用过程。</li><li>在栈上分配资源和销毁资源的速度非常快，这主要归结于栈空间是连续的，分配空间和销毁空间只需要移动下指针就可以了。</li><li>虽然操作速度非常快，但是栈也是有缺点的，其中最大的缺点也是它的优点所造成的，那就是栈是连续的，所以要想在内存中分配一块连续的大空间是非常难的，因此栈空间是有限的。</li></ul></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">50000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="堆空间" tabindex="-1"><a class="header-anchor" href="#堆空间" aria-hidden="true">#</a> 堆空间</h4><ul><li><strong>堆空间</strong>是一种树形的存储结构，用来存储对象类型的离散的数据，JavaScript 中除了原生类型的数据，其他的都是对象类型，诸如函数、数组，在浏览器中还有 window 对象、document 对象等，这些都是存在堆空间的。</li><li>宿主在启动 V8 的过程中，会同时创建堆空间和栈空间，再继续往下执行，产生的新数据都会存放在这两个空间中。</li></ul><h3 id="继承" tabindex="-1"><a class="header-anchor" href="#继承" aria-hidden="true">#</a> 继承</h3><p>  <strong>继承就是一个对象可以访问另外一个对象中的属性和方法，在 JavaScript 中，我们通过原型和原型链的方式来实现了继承特性</strong>。</p><p>  JavaScript 的每个对象都包含了一个隐藏属性 <code>__proto__</code> ，我们就把该隐藏属性 <code>__proto__</code> 称之为该对象的原型 (prototype)，<code>__proto__</code> 指向了内存中的另外一个对象，我们就把 <code>__proto__</code> 指向的对象称为该对象的原型对象，那么该对象就可以直接访问其原型对象的方法或者属性。</p><p>  JavaScript 中的继承非常简洁，就是每个对象都有一个原型属性，该属性指向了原型对象，查找属性的时候，JavaScript 虚拟机会沿着原型一层一层向上查找，直至找到正确的属性。</p><h4 id="隐藏属性-proto" tabindex="-1"><a class="header-anchor" href="#隐藏属性-proto" aria-hidden="true">#</a> 隐藏属性<code>__proto__</code></h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> animal <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Default&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;Default&#39;</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">getInfo</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Type is: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">，color is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Dog&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;Black&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>利用<code>__proto__</code>实现继承：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>dog<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> animal<span class="token punctuation">;</span>\ndog<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>  通常隐藏属性是不能使用 JavaScript 来直接与之交互的。虽然现代浏览器都开了一个口子，让 JavaScript 可以访问隐藏属性 <code>__proto__</code>，但是在实际项目中，我们不应该直接通过 <code>__proto__</code> 来访问或者修改该属性，其主要原因有两个：</p><ul><li>首先，<strong>这是隐藏属性，并不是标准定义的</strong>;</li><li>其次，<strong>使用该属性会造成严重的性能问题</strong>。因为 JavaScript 通过隐藏类优化了很多原有的对象结构，所以通过直接修改<code>__proto__</code>会直接破坏现有已经优化的结构，触发 V8 重构该对象的隐藏类！</li></ul><h4 id="构造函数是怎么创建对象的" tabindex="-1"><a class="header-anchor" href="#构造函数是怎么创建对象的" aria-hidden="true">#</a> 构造函数是怎么创建对象的？</h4><p>  在 JavaScript 中，使用 new 加上构造函数的这种组合来创建对象和实现对象的继承。不过使用这种方式<strong>隐含的语义过于隐晦</strong>。其实是 JavaScript 为了吸引 Java 程序员、在语法层面去蹭 Java 热点，所以就被硬生生地强制加入了非常不协调的关键字 new。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">DogFactory</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DogFactory</span><span class="token punctuation">(</span><span class="token string">&#39;Dog&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Black&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>  其实当 V8 执行上面这段代码时，V8 在背后悄悄地做了以下几件事情：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\ndog<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token class-name">DogFactory</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>\n<span class="token function">DogFactory</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>dog<span class="token punctuation">,</span> <span class="token string">&#39;Dog&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Black&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="机器码、字节码" tabindex="-1"><a class="header-anchor" href="#机器码、字节码" aria-hidden="true">#</a> 机器码、字节码</h3><h4 id="v8-为什么要引入字节码" tabindex="-1"><a class="header-anchor" href="#v8-为什么要引入字节码" aria-hidden="true">#</a> V8 为什么要引入字节码</h4><ul><li><p><strong>早期的 V8</strong> 为了提升代码的<strong>执行速度</strong>，直接将 JavaScript 源代码编译成了<strong>没有优化的二进制机器代码</strong>，如果某一段二进制代码执行频率过高，那么 V8 会将其标记为<strong>热点代码</strong>，热点代码会被优化编译器优化，优化后的机器代码执行效率更高。</p></li><li><p>随着移动设备的普及，V8 团队逐渐发现将 JavaScript 源码直接编译成二进制代码存在两个致命的问题：</p><ul><li><strong>时间问题</strong>：编译时间过久，影响代码启动速度；</li><li><strong>空间问题</strong>：缓存编译后的二进制代码占用更多的内存。</li></ul></li><li><p>这两个问题无疑会阻碍 V8 在移动设备上的普及，于是 V8 团队大规模重构代码，引入了中间的字节码。字节码的优势有如下三点：</p><ul><li><strong>解决启动问题</strong>：生成字节码的时间很短；</li><li><strong>解决空间问题</strong>：字节码虽然占用的空间比原始的 JavaScript 多，但是相较于机器代码，字节码还是小了太多，缓存字节码会大大降低内存的使用。</li><li><strong>代码架构清晰</strong>：采用字节码，可以简化程序的复杂度，使得 V8 移植到不同的 CPU 架构平台更加容易。</li></ul></li><li><p><strong>Bytecode 某种程度上就是汇编语言，只是它没有对应特定的 CPU，或者说它对应的是虚拟的 CPU</strong>。这样的话，生成 Bytecode 时简单很多，无需为不同的 CPU 生产不同的代码。要知道，V8 支持 9 种不同的 CPU，引入一个中间层 Bytecode，可以简化 V8 的编译流程，提高可扩展性。</p></li><li><p>如果我们在不同硬件上去生成 Bytecode，会发现生成代码的指令是一样的。</p></li></ul><h4 id="如何查看字节码" tabindex="-1"><a class="header-anchor" href="#如何查看字节码" aria-hidden="true">#</a> 如何查看字节码</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// test.js</span>\n<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> z <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> z<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行<code>./d8 ./test.js --print-bytecode</code>:</p><div class="language-s ext-s line-numbers-mode"><pre class="language-s"><code>[generated bytecode for function: add (0x01000824fe59 &lt;SharedFunctionInfo add&gt;)]\nParameter count 3 #三个参数，包括了显式地传入的 x 和 y，还有一个隐式地传入的 this\nRegister count 1\nFrame size 8\n         0x10008250026 @    0 : 25 02             Ldar a1 #将a1寄存器中的值加载到累加器中，LoaD Accumulator from Register\n         0x10008250028 @    2 : 34 03 00          Add a0, [0]\n         0x1000825002b @    5 : 26 fb             Star r0 #Store Accumulator to Register，把累加器中的值保存到r0寄存器中\n         0x1000825002d @    7 : aa                Return  #结束当前函数的执行，并将控制权传回给调用方\nConstant pool (size = 0)\nHandler Table (size = 0)\nSource Position Table (size = 0)\n3\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>常用字节码指令</strong>：</p><ul><li>Ldar：表示将寄存器中的值加载到累加器中，你可以把它理解为 LoaD Accumulator from Register，就是把某个寄存器中的值，加载到累加器中。</li><li>Star：表示 Store Accumulator Register， 你可以把它理解为 Store Accumulator to Register，就是把累加器中的值保存到某个寄存器中</li><li>Add：<code>Add a0, [0]</code>是从 a0 寄存器加载值并将其与累加器中的值相加，然后将结果再次放入累加器。 <blockquote><p>add a0 后面的[0]称之为 feedback vector slot，又叫<strong>反馈向量槽</strong>，它是一个数组，解释器将解释执行过程中的一些数据类型的分析信息都保存在这个反馈向量槽中了，目的是为了给 TurboFan 优化编译器提供优化信息，很多字节码都会为反馈向量槽提供运行时信息。</p></blockquote></li><li>LdaSmi：将小整数（Smi）加载到累加器寄存器中</li><li>Return：结束当前函数的执行，并将控制权传回给调用方。返回的值是累加器中的值。</li></ul><p><img src="'+d+'" alt="bytecode-ignition"></p>',31),Bn={href:"https://github.com/v8/v8/blob/master/src/interpreter/bytecodes.h",target:"_blank",rel:"noopener noreferrer"},zn={href:"https://zhuanlan.zhihu.com/p/28590489",target:"_blank",rel:"noopener noreferrer"},Fn=(0,e.uE)('<h3 id="隐藏类和内联缓存" tabindex="-1"><a class="header-anchor" href="#隐藏类和内联缓存" aria-hidden="true">#</a> 隐藏类和内联缓存</h3><p>  <strong>JavaScript 是一门动态语言，其执行效率要低于静态语言，V8 为了提升 JavaScript 的执行速度，借鉴了很多静态语言的特性，比如实现了 JIT 机制，为了提升对象的属性访问速度而引入了隐藏类，为了加速运算而引入了内联缓存</strong>。</p><h4 id="为什么静态语言的效率更高" tabindex="-1"><a class="header-anchor" href="#为什么静态语言的效率更高" aria-hidden="true">#</a> 为什么静态语言的效率更高?</h4><p>  静态语言中，如 C++ 在声明一个对象之前需要定义该对象的结构，代码在执行之前需要先被编译，编译的时候，每个对象的形状都是固定的，也就是说，在代码的执行过程中是无法被改变的。可以直接通过<strong>偏移量</strong>查询来查询对象的属性值，这也就是静态语言的执行效率高的一个原因。</p><p>  JavaScript 在运行时，对象的属性是可以被修改的，所以当 V8 使用了一个对象时，比如使用了 obj.x 的时候，它并不知道该对象中是否有 x，也不知道 x 相对于对象的偏移量是多少，也就是说 V8 并不知道该对象的具体的形状。那么，当在 JavaScript 中要查询对象 obj 中的 x 属性时，V8 会按照具体的规则一步一步来查询，这个过程非常的慢且耗时。</p><h4 id="将静态的特性引入到-v8" tabindex="-1"><a class="header-anchor" href="#将静态的特性引入到-v8" aria-hidden="true">#</a> 将静态的特性引入到 V8</h4><ul><li><strong>V8 采用的一个思路就是将 JavaScript 中的对象静态化，也就是 V8 在运行 JavaScript 的过程中，会假设 JavaScript 中的对象是静态的</strong>。</li><li>具体地讲，V8 对每个对象做如下两点假设： <ul><li>对象创建好了之后就不会添加新的属性；</li><li>对象创建好了之后也不会删除属性。</li></ul></li><li>符合这两个假设之后，V8 就可以对 JavaScript 中的对象做深度优化了。V8 会为每个对象创建一个隐藏类，对象的隐藏类中记录了该对象一些基础的布局信息，包括以下两点： <ul><li>对象中所包含的所有的属性；</li><li>每个属性相对于对象的偏移量。</li></ul></li><li>有了隐藏类之后，那么当 V8 访问某个对象中的某个属性时，就会先去隐藏类中查找该属性相对于它的对象的偏移量，有了偏移量和属性类型，V8 就可以直接去内存中取出对应的属性值，而不需要经历一系列的查找过程，那么这就大大提升了 V8 查找对象的效率。</li><li>在 V8 中，把隐藏类又称为 map，每个对象都有一个 map 属性，其值指向内存中的隐藏类；</li><li>map 描述了对象的内存布局，比如对象都包括了哪些属性，这些数据对应于对象的偏移量是多少。</li></ul><h4 id="通过-d8-查看隐藏类" tabindex="-1"><a class="header-anchor" href="#通过-d8-查看隐藏类" aria-hidden="true">#</a> 通过 d8 查看隐藏类</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// test.js</span>\n<span class="token keyword">let</span> point1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">200</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> point2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">300</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> point3 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>point1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>point2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>point3<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-s ext-s line-numbers-mode"><pre class="language-s"><code> ./d8 --allow-natives-syntax ./test.js\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-s ext-s line-numbers-mode"><pre class="language-s"><code># ===============\nDebugPrint: 0x1ea3080c5bc5: [JS_OBJECT_TYPE]\n# V8 为 point1 对象创建的隐藏类\n - map: 0x1ea308284ce9 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties]\n - prototype: 0x1ea308241395 &lt;Object map = 0x1ea3082801c1&gt;\n - elements: 0x1ea3080406e9 &lt;FixedArray[0]&gt; [HOLEY_ELEMENTS]\n - properties: 0x1ea3080406e9 &lt;FixedArray[0]&gt; {\n    #x: 100 (const data field 0)\n    #y: 200 (const data field 1)\n }\n0x1ea308284ce9: [Map]\n - type: JS_OBJECT_TYPE\n - instance size: 20\n - inobject properties: 2\n - elements kind: HOLEY_ELEMENTS\n - unused property fields: 0\n - enum length: invalid\n - stable_map\n - back pointer: 0x1ea308284cc1 &lt;Map(HOLEY_ELEMENTS)&gt;\n - prototype_validity cell: 0x1ea3081c0451 &lt;Cell value= 1&gt;\n - instance descriptors (own) #2: 0x1ea3080c5bf5 &lt;DescriptorArray[2]&gt;\n - prototype: 0x1ea308241395 &lt;Object map = 0x1ea3082801c1&gt;\n - constructor: 0x1ea3082413b1 &lt;JSFunction Object (sfi = 0x1ea3081c557d)&gt;\n - dependent code: 0x1ea3080401ed &lt;Other heap object (WEAK_FIXED_ARRAY_TYPE)&gt;\n - construction counter: 0\n\n# ===============\nDebugPrint: 0x1ea3080c5c1d: [JS_OBJECT_TYPE]\n# V8 为 point2 对象创建的隐藏类\n - map: 0x1ea308284ce9 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties]\n - prototype: 0x1ea308241395 &lt;Object map = 0x1ea3082801c1&gt;\n - elements: 0x1ea3080406e9 &lt;FixedArray[0]&gt; [HOLEY_ELEMENTS]\n - properties: 0x1ea3080406e9 &lt;FixedArray[0]&gt; {\n    #x: 200 (const data field 0)\n    #y: 300 (const data field 1)\n }\n0x1ea308284ce9: [Map]\n - type: JS_OBJECT_TYPE\n - instance size: 20\n - inobject properties: 2\n - elements kind: HOLEY_ELEMENTS\n - unused property fields: 0\n - enum length: invalid\n - stable_map\n - back pointer: 0x1ea308284cc1 &lt;Map(HOLEY_ELEMENTS)&gt;\n - prototype_validity cell: 0x1ea3081c0451 &lt;Cell value= 1&gt;\n - instance descriptors (own) #2: 0x1ea3080c5bf5 &lt;DescriptorArray[2]&gt;\n - prototype: 0x1ea308241395 &lt;Object map = 0x1ea3082801c1&gt;\n - constructor: 0x1ea3082413b1 &lt;JSFunction Object (sfi = 0x1ea3081c557d)&gt;\n - dependent code: 0x1ea3080401ed &lt;Other heap object (WEAK_FIXED_ARRAY_TYPE)&gt;\n - construction counter: 0\n\n# ===============\nDebugPrint: 0x1ea3080c5c31: [JS_OBJECT_TYPE]\n# V8 为 point3 对象创建的隐藏类\n - map: 0x1ea308284d39 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties]\n - prototype: 0x1ea308241395 &lt;Object map = 0x1ea3082801c1&gt;\n - elements: 0x1ea3080406e9 &lt;FixedArray[0]&gt; [HOLEY_ELEMENTS]\n - properties: 0x1ea3080406e9 &lt;FixedArray[0]&gt; {\n    #x: 100 (const data field 0)\n }\n0x1ea308284d39: [Map]\n - type: JS_OBJECT_TYPE\n - instance size: 16\n - inobject properties: 1\n - elements kind: HOLEY_ELEMENTS\n - unused property fields: 0\n - enum length: invalid\n - stable_map\n - back pointer: 0x1ea308284d11 &lt;Map(HOLEY_ELEMENTS)&gt;\n - prototype_validity cell: 0x1ea3081c0451 &lt;Cell value= 1&gt;\n - instance descriptors (own) #1: 0x1ea3080c5c41 &lt;DescriptorArray[1]&gt;\n - prototype: 0x1ea308241395 &lt;Object map = 0x1ea3082801c1&gt;\n - constructor: 0x1ea3082413b1 &lt;JSFunction Object (sfi = 0x1ea3081c557d)&gt;\n - dependent code: 0x1ea3080401ed &lt;Other heap object (WEAK_FIXED_ARRAY_TYPE)&gt;\n - construction counter: 0\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="多个对象共用一个隐藏类" tabindex="-1"><a class="header-anchor" href="#多个对象共用一个隐藏类" aria-hidden="true">#</a> 多个对象共用一个隐藏类</h4><ul><li>在 V8 中，每个对象都有一个 map 属性，该属性值指向该对象的隐藏类。不过如果两个对象的形状是相同的，V8 就会为其复用同一个隐藏类，这样有两个好处： <ul><li>减少隐藏类的创建次数，也间接加速了代码的执行速度；</li><li>减少了隐藏类的存储空间。</li></ul></li><li>那么，什么情况下两个对象的形状是相同的，要满足以下两点： <ul><li>相同的属性名称；</li><li>相等的属性个数。</li></ul></li></ul><h4 id="重新构建隐藏类" tabindex="-1"><a class="header-anchor" href="#重新构建隐藏类" aria-hidden="true">#</a> 重新构建隐藏类</h4><ul><li>给一个对象添加新的属性，删除新的属性，或者改变某个属性的数据类型都会改变这个对象的形状，那么势必也就会触发 V8 为改变形状后的对象重建新的隐藏类。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// test.js</span>\n<span class="token keyword">let</span> point <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">;</span>\npoint<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>\n<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">;</span>\npoint<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>\n<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-s ext-s line-numbers-mode"><pre class="language-s"><code># ./d8 --allow-natives-syntax ./test.js\nDebugPrint: 0x32c7080c5b2d: [JS_OBJECT_TYPE]\n - map: 0x32c7082802d9 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties]\n ...\n\nDebugPrint: 0x32c7080c5b2d: [JS_OBJECT_TYPE]\n - map: 0x32c708284cc1 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties]\n ...\n\nDebugPrint: 0x32c7080c5b2d: [JS_OBJECT_TYPE]\n - map: 0x32c708284ce9 &lt;Map(HOLEY_ELEMENTS)&gt; [FastProperties]\n ...\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>每次给对象添加了一个新属性之后，该对象的隐藏类的地址都会改变，这也就意味着隐藏类也随着改变了；如果删除对象的某个属性，那么对象的形状也就随着发生了改变，这时 V8 也会重建该对象的隐藏类；</li><li><strong>最佳实践</strong><ul><li>使用字面量初始化对象时，要保证属性的顺序是一致的；</li><li>尽量使用字面量一次性初始化完整对象属性；</li><li>尽量避免使用 delete 方法。</li></ul></li></ul><h4 id="通过内联缓存来提升函数执行效率" tabindex="-1"><a class="header-anchor" href="#通过内联缓存来提升函数执行效率" aria-hidden="true">#</a> 通过内联缓存来提升函数执行效率</h4><p>  虽然隐藏类能够加速查找对象的速度，但是在 V8 查找对象属性值的过程中，依然有查找对象的隐藏类和根据隐藏类来查找对象属性值的过程。如果一个函数中利用了对象的属性，并且这个函数会被多次执行：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">loadX</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> obj<span class="token punctuation">.</span>x<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">6</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token literal-property property">z</span><span class="token operator">:</span> <span class="token number">8</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">90000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 对比时间差异</span>\n  console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">---</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">----</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">loadX</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">---</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">----</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">loadX</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 产生多态</span>\n  <span class="token function">loadX</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>通常 V8 获取 obj.x 的流程</strong>：</p><ul><li>找对象 obj 的隐藏类；</li><li>再通过隐藏类查找 x 属性偏移量；</li><li>然后根据偏移量获取属性值，在这段代码中 loadX 函数会被反复执行，那么获取 obj.x 的流程也需要反复被执行；</li></ul><p><strong>内联缓存及其原理</strong>：</p><ul><li>函数 loadX 在一个 for 循环里面被重复执行了很多次，因此 V8 会想尽一切办法来压缩这个查找过程，以提升对象的查找效率。这个加速函数执行的策略就是<strong>内联缓存 (Inline Cache)</strong>，简称为 IC；</li><li><strong>IC 的原理</strong>：在 V8 执行函数的过程中，会观察函数中一些<strong>调用点 (CallSite)</strong> 上的关键中间数据，然后将这些数据缓存起来，当下次再次执行该函数的时候，V8 就可以直接利用这些中间数据，节省了再次获取这些数据的过程，因此 V8 利用 IC，可以有效提升一些重复代码的执行效率。</li><li>IC 会为每个函数维护一个<strong>反馈向量 (FeedBack Vector)</strong>，反馈向量记录了函数在执行过程中的一些关键的中间数据。</li><li>反馈向量其实就是一个表结构，它由很多项组成的，每一项称为一个插槽 (Slot)，V8 会依次将执行 loadX 函数的中间数据写入到反馈向量的插槽中。</li><li>当 V8 再次调用 loadX 函数时，比如执行到 loadX 函数中的 return obj.x 语句时，它就会在对应的插槽中查找 x 属性的偏移量，之后 V8 就能直接去内存中获取 obj.x 的属性值了。这样就大大提升了 V8 的执行效率。</li></ul><p><strong>单态、多态和超态</strong>：</p><ul><li>如果一个插槽中只包含 1 个隐藏类，那么我们称这种状态为单态 (monomorphic)；</li><li>如果一个插槽中包含了 2 ～ 4 个隐藏类，那我们称这种状态为多态 (polymorphic)；</li><li>如果一个插槽中超过 4 个隐藏类，那我们称这种状态为超态 (magamorphic)。</li><li>单态的性能优于多态和超态，所以我们需要稍微避免多态和超态的情况。要避免多态和超态，那么就尽量默认所有的对象属性是不变的，比如你写了一个 loadX(obj) 的函数，那么当传递参数时，尽量不要使用多个不同形状的 obj 对象。</li></ul><p><strong>总结：</strong><br>   V8 引入了内联缓存（IC），<strong>IC 会监听每个函数的执行过程，并在一些关键的地方埋下监听点</strong>，这些包括了加载对象属性 (Load)、给对象属性赋值 (Store)、还有函数调用 (Call)，V8 会将监听到的数据写入一个称为反馈向量 (FeedBack Vector) 的结构中，同时 V8 会为每个执行的函数维护一个反馈向量。有了反馈向量缓存的临时数据，V8 就可以缩短对象属性的查找路径，从而提升执行效率。但是针对函数中的同一段代码，如果对象的隐藏类是不同的，那么反馈向量也会记录这些不同的隐藏类，这就出现了多态和超态的情况。我们在实际项目中，要尽量避免出现多态或者超态的情况。</p><h3 id="异步编程与消息队列" tabindex="-1"><a class="header-anchor" href="#异步编程与消息队列" aria-hidden="true">#</a> 异步编程与消息队列</h3><h4 id="v8-是如何执行回调函数的" tabindex="-1"><a class="header-anchor" href="#v8-是如何执行回调函数的" aria-hidden="true">#</a> V8 是如何执行回调函数的</h4><p>  回调函数有两种类型：同步回调和异步回调，同步回调函数是在执行函数内部被执行的，而异步回调函数是在执行函数外部被执行的。<br>   通用 UI 线程宏观架构： <img src="'+k+'" alt="通用UI线程架构">   UI 线程提供一个<strong>消息队列</strong>，并将待执行的事件添加到消息队列中，然后 UI 线程会不断循环地从消息队列中取出事件、执行事件。关于异步回调，这里也有两种不同的类型，其典型代表是 setTimeout 和 XMLHttpRequest：</p><ul><li>setTimeout 的执行流程其实是比较简单的，在 setTimeout 函数内部封装回调消息，并将回调消息添加进消息队列，然后主线程从消息队列中取出回调事件，并执行回调函数。</li><li>XMLHttpRequest 稍微复杂一点，因为下载过程需要放到单独的一个线程中去执行，所以执行 XMLHttpRequest.send 的时候，宿主会将实际请求转发给网络线程，然后 send 函数退出，主线程继续执行下面的任务。网络线程在执行下载的过程中，会将一些中间信息和回调函数封装成新的消息，并将其添加进消息队列中，然后主线程从消息队列中取出回调事件，并执行回调函数。</li></ul><h4 id="宏任务和微任务" tabindex="-1"><a class="header-anchor" href="#宏任务和微任务" aria-hidden="true">#</a> 宏任务和微任务</h4><ul><li><p>调用栈：调用栈是一种数据结构，用来管理在主线程上执行的函数的调用关系。主线程在执行任务的过程中，如果函数的调用层次过深，可能造成栈溢出的错误，我们可以使用 setTimeout 来解决栈溢出的问题。setTimeout 的本质是将同步函数调用改成异步函数调用，这里的异步调用是将回调函数封装成宏任务，并将其添加进消息队列中，然后主线程再按照一定规则循环地从消息队列中读取下一个宏任务。</p></li><li><p>宏任务：就是指消息队列中的等待被主线程执行的事件。每个宏任务在执行时，V8 都会重新创建栈，然后随着宏任务中函数调用，栈也随之变化，最终，当该宏任务执行结束时，整个栈又会被清空，接着主线程继续执行下一个宏任务。</p></li><li><p>微任务：你可以把微任务看成是一个需要异步执行的函数，执行时机是在主函数执行结束之后、当前宏任务结束之前。</p></li><li><p>JavaScript 中之所以要引入微任务，主要是由于主线程执行消息队列中宏任务的时间颗粒度太粗了，无法胜任一些对精度和实时性要求较高的场景，微任务可以在实时性和效率之间做一个有效的权衡。另外使用微任务，可以改变我们现在的异步编程模型，使得我们可以使用同步形式的代码来编写异步调用。</p></li><li><p>微任务是基于消息队列、事件循环、UI 主线程还有堆栈而来的，然后基于微任务，又可以延伸出协程、Promise、Generator、await/async 等现代前端经常使用的一些技术。</p><p><img src="'+v+'" alt="微任务技术栈"></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 不会使浏览器卡死</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="'+m+'" alt="调用栈、主线程、消息队列"> 微任务：</p></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 浏览器console控制台可使浏览器卡死（无法响应鼠标事件等）</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果当前的任务中产生了一个微任务，通过 Promise.resolve() 或者 Promise.reject() 都会触发微任务，触发的微任务不会在当前的函数中被执行，所以执行微任务时，不会导致栈的无限扩张；</li><li>和异步调用不同，微任务依然会在当前任务执行结束之前被执行，这也就意味着在当前微任务执行结束之前，消息队列中的其他任务是不可能被执行的。因此在函数内部触发的微任务，一定比在函数内部触发的宏任务要优先执行。</li><li>微任务依然是在当前的任务中执行的，所以如果在微任务中循环触发新的微任务，那么将导致消息队列中的其他任务没有机会被执行。</li></ul><h4 id="前端异步编程方案史" tabindex="-1"><a class="header-anchor" href="#前端异步编程方案史" aria-hidden="true">#</a> 前端异步编程方案史</h4><p><img src="'+g+'" alt="前端异步编程方案史"></p><ul><li>Callback 模式的异步编程模型需要实现大量的回调函数，大量的回调函数会打乱代码的正常逻辑，使得代码变得不线性、不易阅读，这就是我们所说的<strong>回调地狱问题</strong>。</li><li>Promise 能很好地解决回调地狱的问题，我们可以按照线性的思路来编写代码，这个过程是线性的，非常符合人的直觉。</li><li>但是这种方式<strong>充满了 Promise 的 then() 方法</strong>，如果处理流程比较复杂的话，那么整段代码将<strong>充斥着大量的 then，语义化不明显，代码不能很好地表示执行流程</strong>。我们想要通过<strong>线性的方式</strong>来编写异步代码，要实现这个理想，<strong>最关键的是要能实现函数暂停和恢复执行的功能</strong>。而<strong>生成器</strong>就可以实现函数暂停和恢复，我们可以在生成器中使用同步代码的逻辑来异步代码 (实现该逻辑的核心是协程)。</li><li>但是在生成器之外，我们还需要一个<strong>触发器</strong>来驱动生成器的执行。前端的最终方案就是 async/await，async 是一个可以暂停和恢复执行的函数，在 async 函数内部使用 await 来暂停 async 函数的执行，await 等待的是一个 Promise 对象，如果 Promise 的状态变成 resolve 或者 reject，那么 async 函数会恢复执行。因此，使用 async/await 可以实现以同步的方式编写异步代码这一目标。和生成器函数一样，使用了 async 声明的函数在执行时，也是一个单独的协程，我们可以使用 await 来暂停该协程，由于 await 等待的是一个 Promise 对象，我们可以 resolve 来恢复该协程。</li></ul><blockquote><p><strong>协程</strong>是一种比线程更加轻量级的存在。你可以把协程看成是跑在线程上的任务，一个线程上可以存在多个协程，但是在线程上同时只能执行一个协程。比如，当前执行的是 A 协程，要启动 B 协程，那么 A 协程就需要将主线程的控制权交给 B 协程，这就体现在 A 协程暂停执行，B 协程恢复执行；同样，也可以从 B 协程中启动 A 协程。通常，如果从 A 协程启动 B 协程，我们就把 A 协程称为 B 协程的父协程。</p></blockquote><blockquote><p><strong>正如一个进程可以拥有多个线程一样，一个线程也可以拥有多个协程</strong>。每一时刻，该线程只能执行其中某一个协程。最重要的是，<strong>协程不是被操作系统内核所管理，而完全是由程序所控制（也就是在用户态执行）</strong>。这样带来的好处就是性能得到了很大的提升，不会像线程切换那样消耗资源。</p></blockquote>',41),In={href:"http://www.ruanyifeng.com/blog/2015/05/co.html",target:"_blank",rel:"noopener noreferrer"},Ln=(0,e.uE)('<h3 id="垃圾回收" tabindex="-1"><a class="header-anchor" href="#垃圾回收" aria-hidden="true">#</a> 垃圾回收</h3><h4 id="垃圾数据" tabindex="-1"><a class="header-anchor" href="#垃圾数据" aria-hidden="true">#</a> 垃圾数据</h4><p>  从“<strong>GC Roots</strong>”对象出发，遍历 GC Root 中的所有对象，如果通过 GC Roots 没有遍历到的对象，则这些对象便是垃圾数据。V8 会有专门的垃圾回收器来回收这些垃圾数据。</p><h4 id="垃圾回收算法" tabindex="-1"><a class="header-anchor" href="#垃圾回收算法" aria-hidden="true">#</a> 垃圾回收算法</h4><p>垃圾回收大致可以分为以下几个步骤：</p><ul><li><p>第一步，<strong>通过 GC Root 标记空间中活动对象和非活动对象</strong>。目前 V8 采用的<strong>可访问性（reachability）算法</strong>来判断堆中的对象是否是活动对象。具体地讲，这个算法是将一些 GC Root 作为初始存活的对象的集合，从 GC Roots 对象出发，遍历 GC Root 中的所有对象：</p><ul><li>通过 GC Root 遍历到的对象，我们就认为该对象是<strong>可访问的（reachable）</strong>，那么必须保证这些对象应该在内存中保留，我们也称可访问的对象为<strong>活动对象</strong>；</li><li>通过 GC Roots 没有遍历到的对象，则是<strong>不可访问的（unreachable）</strong>，那么这些不可访问的对象就可能被回收，我们称不可访问的对象为<strong>非活动对象</strong>。</li><li>在<strong>浏览器环境中，GC Root 有很多</strong>，通常包括了以下几种 (但是不止于这几种)： <ul><li>全局的 window 对象（位于每个 iframe 中）；</li><li>文档 DOM 树，由可以通过遍历文档到达的所有原生 DOM 节点组成；</li><li>存放栈上变量。</li></ul></li></ul></li><li><p>第二步，<strong>回收非活动对象所占据的内存</strong>。其实就是在所有的标记完成之后，统一清理内存中所有被标记为可回收的对象。</p></li><li><p>第三步，<strong>做内存整理</strong>。一般来说，频繁回收对象后，内存中就会存在大量不连续空间，我们把这些不连续的内存空间称为<strong>内存碎片</strong>。当内存中出现了大量的内存碎片之后，如果需要分配较大的连续内存时，就有可能出现内存不足的情况，所以最后一步需要整理这些内存碎片。但这步其实是可选的，因为有的垃圾回收器不会产生内存碎片(比如副垃圾回收器)。</p></li></ul><h4 id="垃圾回收-1" tabindex="-1"><a class="header-anchor" href="#垃圾回收-1" aria-hidden="true">#</a> 垃圾回收</h4><ul><li>V8 依据<strong>代际假说</strong>，将堆内存划分为<strong>新生代和老生代</strong>两个区域，新生代中存放的是生存时间短的对象，老生代中存放生存时间久的对象。代际假说有两个特点： <ul><li>第一个是大部分对象都是“<strong>朝生夕死</strong>”的，也就是说<strong>大部分对象在内存中存活的时间很短</strong>，比如函数内部声明的变量，或者块级作用域中的变量，当函数或者代码块执行结束时，作用域中定义的变量就会被销毁。因此这一类对象一经分配内存，很快就变得不可访问；</li><li>第二个是<strong>不死的对象，会活得更久</strong>，比如全局的 window、DOM、Web API 等对象。</li></ul></li><li>为了提升垃圾回收的效率，V8 设置了两个垃圾回收器，主垃圾回收器和副垃圾回收器。 <ul><li><strong>主垃圾回收器</strong>负责收集老生代中的垃圾数据，<strong>副垃圾回收器</strong>负责收集新生代中的垃圾数据。</li><li><strong>副垃圾回收器采用了 Scavenge 算法</strong>，是把新生代空间对半划分为两个区域（有些地方也称作 From 和 To 空间），一半是对象区域，一半是空闲区域。新的数据都分配在对象区域，等待对象区域快分配满的时候，垃圾回收器便执行垃圾回收操作，之后将存活的对象从对象区域拷贝到空闲区域，并将两个区域互换。 <ul><li>这种角色翻转的操作还能让新生代中的这两块区域无限重复使用下去。</li><li>副垃圾回收器每次执行清理操作时，都需要将存活的对象从对象区域复制到空闲区域，复制操作需要时间成本，如果新生区空间设置得太大了，那么每次清理的时间就会过久，所以为了执行效率，一般<strong>新生区的空间会被设置得比较小</strong>。</li><li>副垃圾回收器还会采用<strong>对象晋升策略</strong>，也就是移动那些经过两次垃圾回收依然还存活的对象到老生代中。</li></ul></li><li>主垃圾回收器回收器主要负责<strong>老生代中的垃圾数据的回收操作，会经历标记、清除和整理过程</strong>。 <ul><li>主垃圾回收器主要负责老生代中的垃圾回收。除了新生代中晋升的对象，一些大的对象会直接被分配到老生代里。</li><li>老生代中的对象有两个特点：一个是对象占用空间大；另一个是对象存活时间长。</li></ul></li></ul></li></ul><h4 id="stop-the-world" tabindex="-1"><a class="header-anchor" href="#stop-the-world" aria-hidden="true">#</a> Stop-The-World</h4><p>  由于 JavaScript 是运行在主线程之上的，因此，一旦执行垃圾回收算法，都需要将正在执行的 JavaScript 脚本暂停下来，待垃圾回收完毕后再恢复脚本执行。我们把这种行为叫做<strong>全停顿（Stop-The-World）</strong>。</p>',10),Nn=(0,e._)("li",null,[(0,e.Uk)("V8 最开始的垃圾回收器有两个特点： "),(0,e._)("ul",null,[(0,e._)("li",null,"第一个是垃圾回收在主线程上执行，"),(0,e._)("li",null,"第二个特点是一次执行一个完整的垃圾回收流程。")])],-1),Rn=(0,e._)("li",null,[(0,e.Uk)("第一个方案是"),(0,e._)("strong",null,"并行回收"),(0,e.Uk)("，在执行一个完整的垃圾回收过程中，垃圾回收器会使用多个辅助线程来并行执行垃圾回收。")],-1),Yn=(0,e._)("li",null,[(0,e.Uk)("第二个方案是"),(0,e._)("strong",null,"增量式垃圾回收"),(0,e.Uk)("，垃圾回收器将标记工作分解为更小的块，并且穿插在主线程不同的任务之间执行。采用增量垃圾回收时，垃圾回收器没有必要一次执行完整的垃圾回收过程，每次执行的只是整个垃圾回收过程中的一小部分工作。")],-1),Hn=(0,e._)("strong",null,"并发回收",-1),Gn={href:"https://www.oschina.net/translate/v8-javascript-engine",target:"_blank",rel:"noopener noreferrer"},Xn=(0,e._)("li",null,"主垃圾回收器就综合采用了所有的方案（并发标记，增量标记，辅助清理），副垃圾回收器也采用了部分方案。",-1),Kn=(0,e._)("h2",{id:"似此星辰非昨夜-为谁风露立中宵",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#似此星辰非昨夜-为谁风露立中宵","aria-hidden":"true"},"#"),(0,e.Uk)(" 似此星辰非昨夜，为谁风露立中宵")],-1),$n=(0,e._)("h3",{id:"breaking-the-javascript-speed-limit-with-v8",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#breaking-the-javascript-speed-limit-with-v8","aria-hidden":"true"},"#"),(0,e.Uk)(" Breaking the JavaScript Speed Limit with V8")],-1),Qn={href:"https://zh.wikipedia.org/wiki/Google_I/O",target:"_blank",rel:"noopener noreferrer"},Zn=(0,e._)("strong",null,"Breaking the JavaScript Speed Limit with V8",-1),na=(0,e._)("strong",null,"13 个 JavaScript 性能提升技巧",-1),aa=(0,e.uE)("<ol><li>在构造函数里初始化所有对象的成员(所以这些实例之后不会改变其隐藏类)；</li><li>总是以相同的次序初始化对象成员；</li><li>尽量使用可以用 31 位有符号整数表示的数；</li><li>为数组使用从 0 开始的连续的主键；</li><li>别预分配大数组(比如大于 64K 个元素)到其最大尺寸，令其尺寸顺其自然发展就好；</li><li>别删除数组里的元素，尤其是数字数组；</li><li>别加载未初始化或已删除的元素；</li><li>对于固定大小的数组，使用”array literals“初始化（初始化小额定长数组时，用字面量进行初始化）；</li><li>小数组(小于 64k)在使用之前先预分配正确的尺寸；</li><li>请勿在数字数组中存放非数字的值(对象)；</li><li>尽量使用单一类型（monomorphic）而不是多类型（polymorphic）（如果通过非字面量进行初始化小数组时，切勿触发类型的重新转换）；</li><li>不要使用 <code>try{} catch{}</code>（如果存在 <code>try/catch</code> 代码快，则将性能敏感的代码放到一个嵌套的函数中）；</li><li>在优化后避免在方法中修隐藏的类。</li></ol>",1),sa={href:"https://www.html5rocks.com/en/tutorials/speed/v8/",target:"_blank",rel:"noopener noreferrer"},ea={href:"https://www.dazhuanlan.com/2019/12/07/5deb7aee6b870",target:"_blank",rel:"noopener noreferrer"},ta={href:"https://v.youku.com/v_show/id_XNDk3NzA2Mjg0.html",target:"_blank",rel:"noopener noreferrer"},la={href:"https://www.youtube.com/watch?v=UJPdhx5zTaw&ab_channel=GoogleDevelopers",target:"_blank",rel:"noopener noreferrer"},ia=(0,e.uE)('<h3 id="在-v8-引擎里-5-个优化代码的技巧" tabindex="-1"><a class="header-anchor" href="#在-v8-引擎里-5-个优化代码的技巧" aria-hidden="true">#</a> 在 V8 引擎里 5 个优化代码的技巧</h3><ol><li><strong>对象属性的顺序</strong>: 在实例化你的对象属性的时候一定要使用相同的顺序，这样隐藏类和随后的优化代码才能共享；</li><li><strong>动态属性</strong>: 在对象实例化之后再添加属性会强制使得隐藏类变化，并且会减慢为旧隐藏类所优化的代码的执行。所以，要在对象的构造函数中完成所有属性的分配；</li><li><strong>方法</strong>: 重复执行相同的方法会运行的比不同的方法只执行一次要快 (因为内联缓存)；</li><li><strong>数组</strong>: 避免使用 keys 不是递增的数字的稀疏数组，这种 key 值不是递增数字的稀疏数组其实是一个 hash 表。在这种数组中每一个元素的获取都是昂贵的代价。同时，要避免提前申请大数组。最好的做法是随着你的需要慢慢的增大数组。最后，不要删除数组中的元素，因为这会使得 keys 变得稀疏；</li><li><strong>标记值 (Tagged values)</strong>: V8 用 32 位来表示对象和数字。它使用一位来区分它是对象 (flag = 1) 还是一个整型 (flag = 0)，也被叫做小整型(SMI)，因为它只有 31 位。然后，如果一个数值大于 31 位，V8 将会对其进行 <strong>box 操作</strong>，然后将其转换成 double 型，并且创建一个新的对象来装这个数。所以，为了避免代价很高的 box 操作，尽量使用 31 位的有符号数。</li></ol>',2),oa={href:"https://blog.sessionstack.com/how-javascript-works-inside-the-v8-engine-5-tips-on-how-to-write-optimized-code-ac089e62b12e",target:"_blank",rel:"noopener noreferrer"},pa={href:"https://juejin.im/post/6844903512237670414",target:"_blank",rel:"noopener noreferrer"},ra=(0,e._)("strong",null,"box 操作",-1),ca={href:"https://time.geekbang.org/column/article/78884",target:"_blank",rel:"noopener noreferrer"},ua={href:"https://mp.weixin.qq.com/s/QDHJBCP9E8GyKPlMOExwAA",target:"_blank",rel:"noopener noreferrer"},da={href:"https://juejin.im/post/6844903859765133320",target:"_blank",rel:"noopener noreferrer"},ka=(0,e._)("h3",{id:"javascript-启动性能瓶颈分析与解决方案",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#javascript-启动性能瓶颈分析与解决方案","aria-hidden":"true"},"#"),(0,e.Uk)(" JavaScript 启动性能瓶颈分析与解决方案")],-1),va={href:"https://medium.com/reloading/javascript-start-up-performance-69200f43b201",target:"_blank",rel:"noopener noreferrer"},ma={href:"https://zhuanlan.zhihu.com/p/25221314",target:"_blank",rel:"noopener noreferrer"},ga=(0,e._)("h2",{id:"天长地久有时尽-v8-绵绵无绝期",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#天长地久有时尽-v8-绵绵无绝期","aria-hidden":"true"},"#"),(0,e.Uk)(" 天长地久有时尽，V8 绵绵无绝期")],-1),ba={href:"https://v8.dev/",target:"_blank",rel:"noopener noreferrer"},ha={href:"https://time.geekbang.org/column/intro/296",target:"_blank",rel:"noopener noreferrer"},_a=(0,e._)("strong",null,"图解 Google V8",-1),fa={href:"https://time.geekbang.org/column/intro/216",target:"_blank",rel:"noopener noreferrer"},ya=(0,e._)("strong",null,"浏览器工作原理与实践",-1),xa={href:"https://www.zhihu.com/column/v8core",target:"_blank",rel:"noopener noreferrer"},wa={href:"https://mp.weixin.qq.com/s/qFVxdN2J3qYbBo8_q93SAA",target:"_blank",rel:"noopener noreferrer"},Sa={href:"https://juejin.im/post/6844903510538993671",target:"_blank",rel:"noopener noreferrer"},Ua={href:"https://juejin.im/post/6844903518319411207",target:"_blank",rel:"noopener noreferrer"},Va=(0,e._)("h2",{id:"番外篇",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#番外篇","aria-hidden":"true"},"#"),(0,e.Uk)(" 番外篇")],-1),ja={href:"https://github.com/pd4d10/console-importer",target:"_blank",rel:"noopener noreferrer"},Ja=(0,e._)("br",null,null,-1),Ea=(0,e._)("br",null,null,-1),Ca=(0,e._)("img",{src:b,alt:"Console Importer"},null,-1),Ta=(0,e._)("h2",{id:"发布链接及部分转载",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#发布链接及部分转载","aria-hidden":"true"},"#"),(0,e.Uk)(" 发布链接及部分转载")],-1),Aa={href:"https://segmentfault.com/a/1190000037435824",target:"_blank",rel:"noopener noreferrer"},Wa={href:"https://zhuanlan.zhihu.com/p/266708344",target:"_blank",rel:"noopener noreferrer"},Pa={href:"https://zhuanlan.zhihu.com/p/265001795",target:"_blank",rel:"noopener noreferrer"},Ma={href:"https://mp.weixin.qq.com/s/E-c9gsk-kxIwnwY4R5z_3Q",target:"_blank",rel:"noopener noreferrer"},Da={href:"https://mp.weixin.qq.com/s/ASwOPvsKSVSzxHM0FOKKVA",target:"_blank",rel:"noopener noreferrer"},Oa={href:"https://mp.weixin.qq.com/s/0OxNG1AWrkTIVK6N36wk4A",target:"_blank",rel:"noopener noreferrer"},qa={href:"https://mp.weixin.qq.com/s/3Sy_ajvoHPSFAJeKogAdUg",target:"_blank",rel:"noopener noreferrer"},Ba={href:"https://mp.weixin.qq.com/s/GbNeEgu-1IBr4O_s8c_58g",target:"_blank",rel:"noopener noreferrer"},za={},Fa=(0,s(13860).Z)(za,[["render",function(n,a){const s=(0,e.up)("ExternalLinkIcon");return(0,e.wg)(),(0,e.iD)("div",null,[h,(0,e._)("blockquote",null,[(0,e._)("p",null,[(0,e.Uk)("资料拓展： "),(0,e._)("a",_,[(0,e.Uk)("汇编语言入门教程"),(0,e.Wm)(s)])])]),f,(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("a",y,[(0,e.Uk)("V8 (Google)"),(0,e.Wm)(s)]),(0,e.Uk)("，用 C++编写，开放源代码，由 Google 丹麦开发，是 Google Chrome 的一部分，也用于 Node.js。")]),(0,e._)("li",null,[(0,e._)("a",x,[(0,e.Uk)("JavaScriptCore (Apple)"),(0,e.Wm)(s)]),(0,e.Uk)("，开放源代码，用于 webkit 型浏览器，如 Safari ，2008 年实现了编译器和字节码解释器，升级为了 SquirrelFish。苹果内部代号为“Nitro”的 JavaScript 引擎也是基于 JavaScriptCore 引擎的。")]),w,(0,e._)("li",null,[(0,e._)("a",S,[(0,e.Uk)("SpiderMonkey (Mozilla)"),(0,e.Wm)(s)]),(0,e.Uk)("，第一款 JavaScript 引擎，早期用于 Netscape Navigator，现时用于 Mozilla Firefox。")]),U,V,j,J,(0,e._)("li",null,[(0,e.Uk)("其他：Nashorn、"),(0,e._)("a",E,[(0,e.Uk)("QuickJS"),(0,e.Wm)(s)]),(0,e.Uk)(" 、 "),(0,e._)("a",C,[(0,e.Uk)("Hermes"),(0,e.Wm)(s)])])]),T,(0,e._)("p",null,[(0,e.Uk)("  "),(0,e._)("a",A,[(0,e.Uk)("Google V8"),(0,e.Wm)(s)]),(0,e.Uk)(" 引擎是用 C ++编写的开源高性能 JavaScript 和 "),(0,e._)("a",W,[(0,e.Uk)("WebAssembly"),(0,e.Wm)(s)]),(0,e.Uk)(" 引擎，它已被用于 Chrome 和 Node.js 等。可以运行在 Windows 7+，macOS 10.12+和使用 x64，IA-32，ARM 或 MIPS 处理器的 Linux 系统上。 "),P,(0,e.Uk)("，第一个版本随着第一版"),(0,e._)("a",M,[(0,e.Uk)("Chrome"),(0,e.Wm)(s)]),(0,e.Uk)("于 2008 年 9 月 2 日发布。"),D,(0,e.Uk)("。著名的 Node.js( 一个异步的服务器框架，可以在服务端使用 JavaScript 写出高效的网络服务器 ) 就是基于 V8 引擎的，Couchbase, MongoDB 也使用了 V8 引擎。")]),(0,e._)("p",null,[(0,e.Uk)("  和"),(0,e._)("a",O,[(0,e.Uk)("其他 JavaScript 引擎"),(0,e.Wm)(s)]),(0,e.Uk)("一样，"),q,(0,e.Uk)("。")]),B,(0,e._)("blockquote",null,[(0,e._)("p",null,[(0,e.Uk)("资料拓展："),(0,e._)("a",z,[(0,e.Uk)("v8 logo"),(0,e.Wm)(s)]),(0,e.Uk)(" | "),(0,e._)("a",F,[(0,e.Uk)("V8 (JavaScript engine)"),(0,e.Wm)(s)]),(0,e.Uk)(" | "),(0,e._)("a",I,[(0,e.Uk)("《V8、JavaScript+的现在与未来》"),(0,e.Wm)(s)]),(0,e.Uk)(" | "),(0,e._)("a",L,[(0,e.Uk)("几张图让你看懂 WebAssembly"),(0,e.Wm)(s)])])]),(0,e._)("blockquote",null,[(0,e._)("p",null,[(0,e.Uk)("V8 一词最早见于“V-8 engine”，即"),(0,e._)("a",N,[(0,e.Uk)("V8 发动机"),(0,e.Wm)(s)]),(0,e.Uk)("，一般使用在中高端车辆上。8 个气缸分成两组，每组 4 个，成 V 型排列。是高层次汽车运动中最常见的发动机结构，尤其在美国，IRL，ChampCar 和 NASCAR 都要求使用 V8 发动机。")])]),R,Y,H,(0,e._)("blockquote",null,[(0,e._)("p",null,[(0,e.Uk)('V8 源码编译出来的可执行程序名为 d8。d8 作为 V8 引擎在命令行中可以使用的交互 shell 存在。Google 官方已经不记得 d8 这个名字的由来，但是做为"delveloper shell"的缩写，用首字母 d 和 8 结合，恰到好处。 还有一种说法是 d8 最初叫'),G,(0,e.Uk)("，因为 d 后面有 8 个字符，因此简写为 d8，类似于"),(0,e._)("a",X,[(0,e.Uk)("i18n"),(0,e.Wm)(s)]),(0,e.Uk)("(internationalization)这样的简写。 参考："),(0,e._)("a",K,[(0,e.Uk)("Using d8"),(0,e.Wm)(s)])])]),$,(0,e._)("ul",null,[(0,e._)("li",null,[Q,(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("a",Z,[(0,e.Uk)("v8 google 下载及编译使用"),(0,e.Wm)(s)])]),(0,e._)("li",null,[(0,e.Uk)("官方文档："),(0,e._)("a",nn,[(0,e.Uk)("Using d8"),(0,e.Wm)(s)])])])]),(0,e._)("li",null,[an,(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("a",sn,[(0,e.Uk)("mac 平台"),(0,e.Wm)(s)])]),(0,e._)("li",null,[(0,e._)("a",en,[(0,e.Uk)("linux32 平台"),(0,e.Wm)(s)])]),(0,e._)("li",null,[(0,e._)("a",tn,[(0,e.Uk)("linux64 平台"),(0,e.Wm)(s)])]),(0,e._)("li",null,[(0,e._)("a",ln,[(0,e.Uk)("win32 平台"),(0,e.Wm)(s)])]),(0,e._)("li",null,[(0,e._)("a",on,[(0,e.Uk)("win64 平台"),(0,e.Wm)(s)])])]),pn])]),rn,(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("p",null,[(0,e._)("a",cn,[(0,e.Uk)("Parser"),(0,e.Wm)(s)]),(0,e.Uk)("：负责将 JavaScript 源码转换为 Abstract Syntax Tree (AST)")]),un]),(0,e._)("li",null,[(0,e._)("p",null,[(0,e._)("a",dn,[(0,e.Uk)("Ignition"),(0,e.Wm)(s)]),(0,e.Uk)("：interpreter，即解释器，负责将 AST 转换为 Bytecode，解释执行 Bytecode；同时收集 TurboFan 优化编译所需的信息，比如函数参数的类型；解释器执行时主要有四个模块，内存中的字节码、寄存器、栈、堆。")]),(0,e._)("blockquote",null,[(0,e._)("p",null,[kn,(0,e.Uk)("，基于栈的解释器使用栈来保存函数参数、中间运算结果、变量等；基于寄存器的虚拟机则支持寄存器的指令操作，使用寄存器来保存参数、中间计算结果。通常，基于栈的虚拟机也定义了少量的寄存器，基于寄存器的虚拟机也有堆栈，其"),vn,(0,e.Uk)("。"),mn,(0,e.Uk)("，比如 Java 虚拟机，.Net 虚拟机，还有早期的 V8 虚拟机。基于堆栈的虚拟机在处理函数调用、解决递归问题和切换上下文时简单明快。而"),gn,(0,e.Uk)("，它将一些中间数据保存到寄存器中。"),bn,hn,(0,e.Uk)("："),_n,(0,e.Uk)(" 资料参考："),(0,e._)("a",fn,[(0,e.Uk)("解释器是如何解释执行字节码的？"),(0,e.Wm)(s)])])])]),(0,e._)("li",null,[(0,e._)("p",null,[(0,e._)("a",yn,[(0,e.Uk)("TurboFan"),(0,e.Wm)(s)]),(0,e.Uk)("：compiler，即编译器，利用 Ignition 所收集的类型信息，将 Bytecode 转换为优化的汇编代码；")])]),(0,e._)("li",null,[(0,e._)("p",null,[(0,e._)("a",xn,[(0,e.Uk)("Orinoco"),(0,e.Wm)(s)]),(0,e.Uk)("：garbage collector，垃圾回收模块，负责将程序不再需要的内存空间回收。")])])]),wn,(0,e._)("blockquote",null,[(0,e._)("p",null,[(0,e.Uk)("资料拓展参考："),(0,e._)("a",Sn,[(0,e.Uk)("V8 引擎是如何工作的？"),(0,e.Wm)(s)])])]),Un,(0,e._)("ul",null,[Vn,(0,e._)("li",null,[jn,(0,e._)("blockquote",null,[(0,e._)("p",null,[(0,e.Uk)("资料拓展："),(0,e._)("a",Jn,[(0,e.Uk)("V8 是如何执行一段 JavaScript 代码的？"),(0,e.Wm)(s)])])])]),En]),Cn,(0,e._)("p",null,[(0,e.Uk)("  关于闭包，可参考我以前的"),(0,e._)("a",Tn,[(0,e.Uk)("一篇文章"),(0,e.Wm)(s)]),(0,e.Uk)("，在此不再赘述，在此主要谈下闭包给 Chrome V8 带来的问题及其解决策略。")]),An,(0,e._)("p",null,[(0,e.Uk)("  可以通过 Chrome 开发者工具的 Memory 标签，捕获查看当前的"),Wn,(0,e.Uk)("。通过增大第一个参数来查看存储变化。（Console 面板运行以上代码，打开 Memory 面板，通过点击"),Pn,(0,e.Uk)("记录内存快照，点击快照，筛选出 Foo 进行查看。可参考"),(0,e._)("a",Mn,[(0,e.Uk)("使用 chrome-devtools Memory 面板"),(0,e.Wm)(s)]),(0,e.Uk)("了解 Memory 面板。）")]),Dn,(0,e._)("blockquote",null,[(0,e._)("p",null,[(0,e.Uk)("资料拓展："),(0,e._)("a",On,[(0,e.Uk)("快属性和慢属性：V8 是怎样提升对象属性访问速度的？"),(0,e.Wm)(s)])])]),qn,(0,e._)("blockquote",null,[(0,e._)("p",null,[(0,e._)("a",Bn,[(0,e.Uk)("V8 中的字节码指令集"),(0,e.Wm)(s)]),(0,e.Uk)(" | "),(0,e._)("a",zn,[(0,e.Uk)("理解 V8 的字节码「译」"),(0,e.Wm)(s)])])]),Fn,(0,e._)("blockquote",null,[(0,e._)("p",null,[(0,e.Uk)("资料拓展："),(0,e._)("a",In,[(0,e.Uk)("co 函数库的含义和用法"),(0,e.Wm)(s)])])]),Ln,(0,e._)("ul",null,[Nn,(0,e._)("li",null,[(0,e.Uk)("由于这两个原因，很容易造成主线程卡顿，所以 V8 采用了很多优化执行效率的方案。 "),(0,e._)("ul",null,[Rn,Yn,(0,e._)("li",null,[(0,e.Uk)("第三个方案是"),Hn,(0,e.Uk)("，回收线程在执行 JavaScript 的过程，辅助线程能够在后台完成的执行垃圾回收的操作。 "),(0,e._)("blockquote",null,[(0,e._)("p",null,[(0,e.Uk)("资料参考："),(0,e._)("a",Gn,[(0,e.Uk)("深入解读 V8 引擎的「并发标记」技术"),(0,e.Wm)(s)])])])]),Xn])])]),Kn,$n,(0,e._)("p",null,[(0,e.Uk)("  Daniel Clifford 在 "),(0,e._)("a",Qn,[(0,e.Uk)("Google I/O"),(0,e.Wm)(s)]),(0,e.Uk)(" 2012 上做了一个精彩的演讲“"),Zn,(0,e.Uk)("”。在演讲中，他深入解释了 13 个简单的代码优化方法，可以让你的 JavaScript 代码在 Chrome V8 引擎编译/运行时更加快速。在演讲中，他介绍了怎么优化，并解释了原因。下面简明的列出了"),na,(0,e.Uk)("：")]),aa,(0,e._)("blockquote",null,[(0,e._)("p",null,[(0,e.Uk)("演讲资料参考： "),(0,e._)("a",sa,[(0,e.Uk)("Performance Tips for JavaScript in V8"),(0,e.Wm)(s)]),(0,e.Uk)(" | "),(0,e._)("a",ea,[(0,e.Uk)("译文"),(0,e.Wm)(s)]),(0,e.Uk)(" | "),(0,e._)("a",ta,[(0,e.Uk)("内网视频"),(0,e.Wm)(s)]),(0,e.Uk)(" | "),(0,e._)("a",la,[(0,e.Uk)("YouTube"),(0,e.Wm)(s)])])]),ia,(0,e._)("blockquote",null,[(0,e._)("p",null,[(0,e.Uk)("资料参考："),(0,e._)("a",oa,[(0,e.Uk)("How JavaScript works: inside the V8 engine + 5 tips on how to write optimized code"),(0,e.Wm)(s)]),(0,e.Uk)(" | "),(0,e._)("a",pa,[(0,e.Uk)("译文"),(0,e.Wm)(s)])])]),(0,e._)("blockquote",null,[(0,e._)("p",null,[ra,(0,e.Uk)("参考："),(0,e._)("a",ca,[(0,e.Uk)("JavaScript 类型：关于类型，有哪些你不知道的细节？"),(0,e.Wm)(s)]),(0,e.Uk)(" | "),(0,e._)("a",ua,[(0,e.Uk)("JavaScript 的装箱和拆箱"),(0,e.Wm)(s)]),(0,e.Uk)(" | "),(0,e._)("a",da,[(0,e.Uk)("谈谈 JavaScript 中装箱和拆箱"),(0,e.Wm)(s)])])]),ka,(0,e._)("blockquote",null,[(0,e._)("p",null,[(0,e.Uk)("资料参考： "),(0,e._)("a",va,[(0,e.Uk)("JavaScript Start-up Performance"),(0,e.Wm)(s)]),(0,e.Uk)(" | "),(0,e._)("a",ma,[(0,e.Uk)("JavaScript 启动性能瓶颈分析与解决方案"),(0,e.Wm)(s)])])]),ga,(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("a",ba,[(0,e.Uk)("v8"),(0,e.Wm)(s)])]),(0,e._)("li",null,[(0,e._)("a",ha,[_a,(0,e.Wm)(s)])]),(0,e._)("li",null,[(0,e._)("a",fa,[ya,(0,e.Wm)(s)])]),(0,e._)("li",null,[(0,e._)("a",xa,[(0,e.Uk)("V8、Chrome、Node.js【知乎专栏】"),(0,e.Wm)(s)])]),(0,e._)("li",null,[(0,e._)("a",wa,[(0,e.Uk)("JavaScript 引擎 V8 执行流程概述"),(0,e.Wm)(s)])]),(0,e._)("li",null,[(0,e._)("a",Sa,[(0,e.Uk)("[译] JavaScript 如何工作：对引擎、运行时、调用堆栈的概述"),(0,e.Wm)(s)])]),(0,e._)("li",null,[(0,e._)("a",Ua,[(0,e.Uk)("[译] JavaScript 如何工作的: 事件循环和异步编程的崛起 + 5 个关于如何使用 async/await 编写更好的技巧"),(0,e.Wm)(s)])])]),Va,(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("a",ja,[(0,e.Uk)("Console Importer"),(0,e.Wm)(s)]),(0,e.Uk)("：Easily import JS and CSS resources from Chrome console. （可以在浏览器控制台安装 loadsh、moment、jQuery 等库，在控制台直接验证、使用这些库。）"),Ja,(0,e.Uk)(" 效果图："),Ea,Ca])]),(0,e.kq)(" - [描写相恋诗句](https://www.2juzi.com/ai/77198.html)\n- [爱情诗句](https://www.gushiwen.org/shiju/aiqing.aspx) "),Ta,(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("a",Aa,[(0,e.Uk)("思否：浏览器是如何工作的：Chrome V8 让你更懂 JavaScript"),(0,e.Wm)(s)])]),(0,e._)("li",null,[(0,e._)("a",Wa,[(0,e.Uk)("知乎 1：浏览器是如何工作的：Chrome V8 让你更懂 JavaScript"),(0,e.Wm)(s)])]),(0,e._)("li",null,[(0,e._)("a",Pa,[(0,e.Uk)("知乎 2：浏览器是如何工作的：Chrome V8 让你更懂 JavaScript"),(0,e.Wm)(s)])]),(0,e._)("li",null,[(0,e._)("a",Ma,[(0,e.Uk)("《奇舞周刊》：Chrome V8 让你更懂 JavaScript"),(0,e.Wm)(s)])]),(0,e._)("li",null,[(0,e._)("a",Da,[(0,e.Uk)("code 秘密花园：浏览器是如何工作的：Chrome V8 让你更懂 JavaScript"),(0,e.Wm)(s)])]),(0,e._)("li",null,[(0,e._)("a",Oa,[(0,e.Uk)("前端大全：浏览器是如何工作的：Chrome V8 让你更懂 JavaScript"),(0,e.Wm)(s)])]),(0,e._)("li",null,[(0,e._)("a",qa,[(0,e.Uk)("前端 Q：浏览器是如何工作的：Chrome V8 让你更懂 JavaScript"),(0,e.Wm)(s)])]),(0,e._)("li",null,[(0,e._)("a",Ba,[(0,e.Uk)("Nodejs 技术栈：浏览器是如何工作的：Chrome V8 让你更懂 JavaScript"),(0,e.Wm)(s)])])])])}]])},13860:(n,a)=>{a.Z=(n,a)=>{const s=n.__vccOpts||n;for(const[n,e]of a)s[n]=e;return s}},213:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e=JSON.parse('{"key":"v-61b2932b","path":"/bedstone/google-v8/","title":"Chrome V8 让你更懂JavaScript","lang":"zh-CN","frontmatter":{"title":"Chrome V8 让你更懂JavaScript","icon":null,"category":["google-v8"],"tag":["浏览器"],"summary":"&emsp;&emsp;V8 是由 Google 开发的开源 JavaScript 引擎，也被称为虚拟机，模拟实际计算机各种功能来实现代码的编译和执行。 记得那年花下，深夜，初识谢娘时 为什么需要 JavaScript 引擎 &emsp;&emsp;我们写的 JavaScript 代码直接交给浏览器或者 Node 执行时，底层的 CPU 是不认识的，也没法执","head":[["meta",{"property":"og:url","content":"https://0808200.xyz/bedstone/google-v8/"}],["meta",{"property":"og:site_name","content":"𝑀𝑟.𝑔𝑜𝑜𝑔𝑥ℎ"}],["meta",{"property":"og:title","content":"Chrome V8 让你更懂JavaScript"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://0808200.xyz/"}],["meta",{"property":"og:updated_time","content":"2022-12-30T02:40:14.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"Chrome V8 让你更懂JavaScript"}],["meta",{"property":"article:tag","content":"浏览器"}],["meta",{"property":"article:modified_time","content":"2022-12-30T02:40:14.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"记得那年花下，深夜，初识谢娘时","slug":"记得那年花下-深夜-初识谢娘时","children":[{"level":3,"title":"为什么需要 JavaScript 引擎","slug":"为什么需要-javascript-引擎","children":[]},{"level":3,"title":"热门 JavaScript 引擎","slug":"热门-javascript-引擎","children":[]},{"level":3,"title":"V8","slug":"v8","children":[]}]},{"level":2,"title":"与君初相识，犹如故人归","slug":"与君初相识-犹如故人归","children":[{"level":3,"title":"什么是 D8","slug":"什么是-d8","children":[]},{"level":3,"title":"安装 D8","slug":"安装-d8","children":[]},{"level":3,"title":"d8 命令查看","slug":"d8-命令查看","children":[]},{"level":3,"title":"使用 d8 进行调试","slug":"使用-d8-进行调试","children":[]},{"level":3,"title":"内部方法","slug":"内部方法","children":[]}]},{"level":2,"title":"心似双丝网，中有千千结","slug":"心似双丝网-中有千千结","children":[{"level":3,"title":"V8 引擎的内部结构","slug":"v8-引擎的内部结构","children":[]},{"level":3,"title":"V8 是怎么执行一段 JavaScript 代码的","slug":"v8-是怎么执行一段-javascript-代码的","children":[]},{"level":3,"title":"一等公民与闭包","slug":"一等公民与闭包","children":[]},{"level":3,"title":"V8 内部是如何存储对象的：快属性和慢属性","slug":"v8-内部是如何存储对象的-快属性和慢属性","children":[]},{"level":3,"title":"堆空间和栈空间","slug":"堆空间和栈空间","children":[]},{"level":3,"title":"继承","slug":"继承","children":[]},{"level":3,"title":"机器码、字节码","slug":"机器码、字节码","children":[]},{"level":3,"title":"隐藏类和内联缓存","slug":"隐藏类和内联缓存","children":[]},{"level":3,"title":"异步编程与消息队列","slug":"异步编程与消息队列","children":[]},{"level":3,"title":"垃圾回收","slug":"垃圾回收","children":[]}]},{"level":2,"title":"似此星辰非昨夜，为谁风露立中宵","slug":"似此星辰非昨夜-为谁风露立中宵","children":[{"level":3,"title":"Breaking the JavaScript Speed Limit with V8","slug":"breaking-the-javascript-speed-limit-with-v8","children":[]},{"level":3,"title":"在 V8 引擎里 5 个优化代码的技巧","slug":"在-v8-引擎里-5-个优化代码的技巧","children":[]},{"level":3,"title":"JavaScript 启动性能瓶颈分析与解决方案","slug":"javascript-启动性能瓶颈分析与解决方案","children":[]}]},{"level":2,"title":"天长地久有时尽，V8 绵绵无绝期","slug":"天长地久有时尽-v8-绵绵无绝期","children":[]},{"level":2,"title":"番外篇","slug":"番外篇","children":[]},{"level":2,"title":"发布链接及部分转载","slug":"发布链接及部分转载","children":[]}],"git":{"createdTime":1672368014000,"updatedTime":1672368014000,"contributors":[{"name":"googxh","email":"gxh522@qq.com","commits":1}]},"readingTime":{"minutes":51.87,"words":15560},"filePathRelative":"bedstone/google-v8/README.md","localizedDate":"2022年12月30日"}')}}]);