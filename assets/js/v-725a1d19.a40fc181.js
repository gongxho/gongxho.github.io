"use strict";(self.webpackChunkmyblog=self.webpackChunkmyblog||[]).push([[30815],{1574:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});var p=a(60329);const e=[(0,p.uE)('<h2 id="什么是typescript" tabindex="-1"><a class="header-anchor" href="#什么是typescript" aria-hidden="true">#</a> 什么是TypeScript？</h2><p>Typescript 是一个强类型的 JavaScript 超集，支持ES6语法，支持面向对象编程的概念，如类、接口、继承、泛型等。Typescript并不直接在浏览器上运行，需要编译器编译成纯Javascript来运行。</p><h2 id="为什么要使用-typescript-typescript-相对于-javascript-的优势是什么" tabindex="-1"><a class="header-anchor" href="#为什么要使用-typescript-typescript-相对于-javascript-的优势是什么" aria-hidden="true">#</a> 为什么要使用 TypeScript ? TypeScript 相对于 JavaScript 的优势是什么？</h2><p>增加了静态类型，可以在开发人员编写脚本时检测错误，使得代码质量更好，更健壮。</p><p>优势:</p><ul><li>杜绝手误导致的变量名写错;</li><li>类型可以一定程度上充当文档;</li><li>IDE自动填充，自动联想;</li></ul><p>TypeScript 中 const 和 readonly 的区别？枚举和常量枚举的区别？接口和类型别名的区别？</p><p>const 和 readonly: const可以防止变量的值被修改，readonly可以防止变量的属性被修改。</p><p>枚举和常量枚举: 常量枚举只能使用常量枚举表达式，并且不同于常规的枚举，它们在编译阶段会被删除。 常量枚举成员在使用的地方会被内联进来。 之所以可以这么做是因为，常量枚举不允许包含计算成员。</p><p>接口和类型别名: 两者都可以用来描述对象或函数的类型。与接口不同，类型别名还可以用于其他类型，如基本类型（原始值）、联合类型、元组。</p><h2 id="typescript中内置类型" tabindex="-1"><a class="header-anchor" href="#typescript中内置类型" aria-hidden="true">#</a> typescript中内置类型</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token literal-property property">str</span><span class="token operator">:</span> string <span class="token operator">=</span> <span class="token string">&quot;jimmy&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> <span class="token literal-property property">num</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> <span class="token literal-property property">bool</span><span class="token operator">:</span> boolean <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> <span class="token literal-property property">u</span><span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> <span class="token literal-property property">n</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> <span class="token literal-property property">obj</span><span class="token operator">:</span> object <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> <span class="token literal-property property">big</span><span class="token operator">:</span> bigint <span class="token operator">=</span> <span class="token number">100n</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> <span class="token literal-property property">sym</span><span class="token operator">:</span> symbol <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;me&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="null和undefined的区别" tabindex="-1"><a class="header-anchor" href="#null和undefined的区别" aria-hidden="true">#</a> null和undefined的区别</h2><p>默认情况下 null 和 undefined 是所有类型的子类型。 就是说你可以把 null 和 undefined 赋值给其他类型。</p><h2 id="number和bigint" tabindex="-1"><a class="header-anchor" href="#number和bigint" aria-hidden="true">#</a> number和bigint</h2><p>虽然number和bigint都表示数字，但是这两个类型不兼容。</p><h2 id="any和unknown" tabindex="-1"><a class="header-anchor" href="#any和unknown" aria-hidden="true">#</a> any和unknown</h2><p>any 类型，则允许被赋值为任意类型。</p><p>使用 any 类型，可以很容易地编写类型正确但在运行时有问题的代码。</p><p>如果我们使用 any 类型，就无法使用 TypeScript 提供的大量的保护机制。</p><p>请记住，any 是魔鬼！尽量不要用any。为了解决 any 带来的问题，TypeScript 3.0 引入了 unknown 类型。</p><p>unknown与any的最大区别是： 任何类型的值可以赋值给any，同时any类型的值也可以赋值给任何型。</p><p>unknown 任何类型的值都可以赋值给它，但它只能赋值给unknown和any。</p><p>这种机制起到了很强的预防性，更安全，这就要求我们必须缩小类型，我们可以使用typeof、类型断言等方式来缩小未知范围</p><h2 id="object、object-和" tabindex="-1"><a class="header-anchor" href="#object、object-和" aria-hidden="true">#</a> object、Object 和 {}</h2><p>另外，object（首字母小写，以下称“小 object”）、Object（首字母大写，以下称“大 Object”）和 {}（以下称“空对象”）</p><p>小 object 代表的是所有非原始类型，也就是说我们不能把 number、string、boolean、symbol等 原始类型赋值给 object。在严格模式下，null 和 undefined 类型也不能赋给 object。</p><p>JavaScript 中以下类型被视为原始类型：string、boolean、number、bigint、symbol、null 和 undefined。</p><p>大Object 代表所有拥有 toString、hasOwnProperty 方法的类型，所以所有原始类型、非原始类型都可以赋给 Object。同样，在严格模式下，null 和 undefined 类型也不能赋给 Object。</p><p>大 Object 包含原始类型，小 object 仅包含非原始类型，所以大 Object 似乎是小 object 的父类型。实际上，大 Object 不仅是小 object 的父类型，同时也是小 object 的子类型。</p><p>{}空对象类型和大 Object 一样，也是表示原始类型和非原始类型的集合，并且在严格模式下，null 和 undefined 也不能赋给 {}</p><p>结论：{}、大 Object 是比小 object 更宽泛的类型（least specific），{} 和大 Object 可以互相代替，用来表示原始类型（null、undefined 除外）和非原始类型；而小 object 则表示非原始类型。</p><h2 id="void" tabindex="-1"><a class="header-anchor" href="#void" aria-hidden="true">#</a> void</h2><p>void表示没有任何类型，和其他类型是平等关系，不能直接赋值:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span> \n<span class="token keyword">let</span> <span class="token literal-property property">b</span><span class="token operator">:</span> number <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token comment">// Error</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>你只能为它赋予null和undefined（在strictNullChecks未指定为true时）。声明一个void类型的变量没有什么大用，我们一般也只有在函数没有返回值时去声明。</p><p>值得注意的是，方法没有返回值将得到undefined，但是我们需要定义成void类型，而不是undefined类型。否则将报错:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;this is TypeScript&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数重载" tabindex="-1"><a class="header-anchor" href="#函数重载" aria-hidden="true">#</a> 函数重载</h2><p>函数重载或方法重载是使用相同名称和不同参数数量或类型创建多个方法的一种能力。 要解决前面遇到的问题，方法就是为同一个函数提供多个函数类型定义来进行函数重载，编译器会根据这个列表去处理函数的调用。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>type Types <span class="token operator">=</span> number <span class="token operator">|</span> string\n<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">a</span><span class="token operator">:</span>number<span class="token punctuation">,</span><span class="token literal-property property">b</span><span class="token operator">:</span>number</span><span class="token punctuation">)</span><span class="token operator">:</span>number<span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">a</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> string<span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">a</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> string<span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">a</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> string<span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">a</span><span class="token operator">:</span>Types<span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span>Types</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> a <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> b <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;Semlinker&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39; Kakuqo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nresult<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="array" tabindex="-1"><a class="header-anchor" href="#array" aria-hidden="true">#</a> Array</h2><p>对数组类型的定义有两种方式：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token literal-property property">arr</span><span class="token operator">:</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> <span class="token literal-property property">arr2</span><span class="token operator">:</span>Array<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">]</span>；\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>定义联合类型数组</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token literal-property property">arr</span><span class="token operator">:</span><span class="token punctuation">(</span>number <span class="token operator">|</span> string<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\narr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>定义指定对象成员的数组：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">interface</span> <span class="token class-name">Arrobj</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">name</span><span class="token operator">:</span>string<span class="token punctuation">,</span>\n    <span class="token literal-property property">age</span><span class="token operator">:</span>number\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> <span class="token literal-property property">arr3</span><span class="token operator">:</span>Arrobj<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;jimmy&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">22</span><span class="token punctuation">}</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="never类型" tabindex="-1"><a class="header-anchor" href="#never类型" aria-hidden="true">#</a> never类型</h2><p>never类型表示的是那些永不存在的值的类型。</p><p>值会永不存在的两种情况：</p><ul><li>如果一个函数执行时抛出了异常，那么这个函数永远不存在返回值（因为抛出异常会直接中断程序运行，这使得程序运行不到返回值那一步，即具有不可达的终点，也就永不存在返回了）；</li><li>函数中执行无限循环的代码（死循环），使得程序永远无法运行到函数返回值那一步，永不存在返回</li></ul><h2 id="接口和类型别名type有什么区别" tabindex="-1"><a class="header-anchor" href="#接口和类型别名type有什么区别" aria-hidden="true">#</a> 接口和类型别名type有什么区别</h2><p>接口可以继承,还可以重复申明,当有多个命名一样的接口是他们被定义的类型会发生合并,不支持联合/交叉类型</p><p>类型别名不可以继承,也不可以重复定义,支持使用联合类型和交叉类型</p><h2 id="类型收窄" tabindex="-1"><a class="header-anchor" href="#类型收窄" aria-hidden="true">#</a> 类型收窄</h2><p>TypeScript 类型收窄就是从宽类型转换成窄类型的过程，其常用于处理联合类型变量的场景。</p><p>在TypeScript中，有许多方法可以收窄变量的类型：</p><ul><li>类型断言</li><li>类型守卫</li><li>双重断言</li></ul><h2 id="类型断言" tabindex="-1"><a class="header-anchor" href="#类型断言" aria-hidden="true">#</a> 类型断言</h2><p>类型断言可以明确地告诉 TypeScript 值的详细类型。</p><p>当在某些场景下，我们非常确认某个值的类型，即使与 TypeScript 推断出来的类型不一致，这时我们就可以使用类型断言，其语法如下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>值 <span class="token keyword">as</span> 类型\n<span class="token comment">// or</span>\n<span class="token operator">&lt;</span>类型<span class="token operator">&gt;</span>值\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 tsx 语法（React 的 jsx 语法的 ts 版）中必须使用前者，即 值 as 类型。同时，因为 &lt;&gt; 容易跟泛型语法起冲突，所以建议大家在使用类型断言时，统一使用 值 as 类型 这样的语法。 当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们只能访问此联合类型的所有类型中共有的属性或方法。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>\n <span class="token literal-property property">name</span><span class="token operator">:</span> stirng<span class="token punctuation">;</span>\n  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">interface</span> <span class="token class-name">Fish</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span>\n  <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">animal</span><span class="token operator">:</span> Cat <span class="token operator">|</span> Fish</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> animal<span class="token punctuation">.</span>name\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而有时候，我们确实需要在还不确定类型的时候就访问其中一个类型特有的属性或方法，如：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>\n <span class="token literal-property property">name</span><span class="token operator">:</span> stirng<span class="token punctuation">;</span>\n  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">interface</span> <span class="token class-name">Fish</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span>\n  <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">isFish</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">animal</span><span class="token operator">:</span> Cat <span class="token operator">|</span> Fish</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> animal<span class="token punctuation">.</span>swim <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的例子中，获取 animal.swim 的时候会报错。此时可以使用类型断言，将 animal 断言成 Fish 类型，就可以解决访问 animal.swim 时报错的问题：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>\n <span class="token literal-property property">name</span><span class="token operator">:</span> stirng<span class="token punctuation">;</span>\n  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">interface</span> <span class="token class-name">Fish</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span>\n  <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">isFish</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">animal</span><span class="token operator">:</span> Cat <span class="token operator">|</span> Fish</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span>animal <span class="token keyword">as</span> Fish<span class="token punctuation">)</span><span class="token punctuation">.</span>swim <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，类型断言只能够「欺骗」TypeScript 编译器，无法避免运行时的错误，反而滥用类型断言可能会导致运行时错误：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>\n <span class="token literal-property property">name</span><span class="token operator">:</span> stirng<span class="token punctuation">;</span>\n  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">interface</span> <span class="token class-name">Fish</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span>\n  <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">animal</span><span class="token operator">:</span> Cat <span class="token operator">|</span> Fish</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">(</span>animal <span class="token keyword">as</span> Fish<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token literal-property property">tom</span><span class="token operator">:</span> Cat <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Tom&quot;</span><span class="token punctuation">,</span>\n  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;run&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">swim</span><span class="token punctuation">(</span>tom<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Uncaught TypeError: animal.swim is not a function</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TypeScript 编译器信任了我们的断言，故在调用 swim() 时没有编译错误，但由于 Cat 上并没有 swim 方法，就会导致在运行时发生错误。</p><p>使用类型断言时一定要格外小心，尽量避免断言后调用方法或引用深层属性，以减少不必要的运行时错误。</p><h2 id="类型保护的方式有哪些" tabindex="-1"><a class="header-anchor" href="#类型保护的方式有哪些" aria-hidden="true">#</a> 类型保护的方式有哪些</h2><p>联合类型 当某些特定类型有共有属性的时候,可以使用联合类型结合if/else判断语句,来保护类型指定类型才能调用指定的方法</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">interface</span> <span class="token class-name">Brid</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">fly</span><span class="token operator">:</span> boolean\n    <span class="token function-variable function">sing</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">fly</span><span class="token operator">:</span> boolean\n    <span class="token function-variable function">bark</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 联合类型仅提示共有属性</span>\n<span class="token keyword">function</span> <span class="token function">tranAnial</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">animal</span><span class="token operator">:</span> Brid <span class="token operator">|</span> Dog</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 类型断言 实现类型保护</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>animal<span class="token punctuation">.</span>fly<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token punctuation">(</span>animal <span class="token keyword">as</span> Brid<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token punctuation">(</span>animal <span class="token keyword">as</span> Dog<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>in 语法</p><p>当类型区别于其他方法有特定的属性是可以用in语法来保护类型启用对应的类型方法和属性等</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">interface</span> <span class="token class-name">Brid</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">fly</span><span class="token operator">:</span> boolean\n    <span class="token function-variable function">sing</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">fly</span><span class="token operator">:</span> boolean\n    <span class="token function-variable function">bark</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">tranAnialSecond</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">animal</span><span class="token operator">:</span> Brid <span class="token operator">|</span> Dog</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// in 语法实现类型保护</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;sing&#39;</span> <span class="token keyword">in</span> animal<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        animal<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        animal<span class="token punctuation">.</span><span class="token function">bark</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>typeof</p><p>当某数据类型是指定的某原始类型,可以用typeof结合===运算符进行类型保护</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">first</span><span class="token operator">:</span> string <span class="token operator">|</span> number<span class="token punctuation">,</span> <span class="token literal-property property">second</span><span class="token operator">:</span> string <span class="token operator">|</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// typeof 语法实现类型保护</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> first <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> second <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>first<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>second<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> first <span class="token operator">+</span> second\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用instanceof语法</p><p>判断某对象类型数据是否来自于对应的构造函数(instanceof用于检查构造函数的prototype属性是否存在于某实例里)</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 使用 instanceof 语法做类型保护</span>\n<span class="token keyword">class</span> <span class="token class-name">NumberObj</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 声明变量</span>\n    <span class="token literal-property property">count</span><span class="token operator">:</span> number\n    <span class="token comment">// 创建构造函数</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">count</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> count\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">addSecond</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">first</span><span class="token operator">:</span> object <span class="token operator">|</span> NumberObj<span class="token punctuation">,</span> <span class="token literal-property property">second</span><span class="token operator">:</span> object <span class="token operator">|</span> NumberObj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token keyword">instanceof</span> <span class="token class-name">NumberObj</span> <span class="token operator">&amp;&amp;</span> second <span class="token keyword">instanceof</span> <span class="token class-name">NumberObj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> first<span class="token punctuation">.</span>count <span class="token operator">+</span> second<span class="token punctuation">.</span>count\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token number">0</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="元祖越界问题" tabindex="-1"><a class="header-anchor" href="#元祖越界问题" aria-hidden="true">#</a> 元祖越界问题</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token literal-property property">aaa</span><span class="token operator">:</span> <span class="token punctuation">[</span>string<span class="token punctuation">,</span> number<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// 添加时不会报错</span>\naaa<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 打印整个元祖不会报错</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aaa<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;aaa&#39;,5,6];</span>\n<span class="token comment">// 打印添加的元素时会报错</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aaa<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// error</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常量枚举与普通枚举的区别" tabindex="-1"><a class="header-anchor" href="#常量枚举与普通枚举的区别" aria-hidden="true">#</a> 常量枚举与普通枚举的区别</h2><ul><li>常量枚举会在编译阶段被删除</li><li>枚举成员只能是常量成员</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token keyword">enum</span> Colors <span class="token punctuation">{</span>\n    Red<span class="token punctuation">,</span>\n    Yellow<span class="token punctuation">,</span>\n    Blue\n<span class="token punctuation">}</span>\n<span class="token comment">// 常量枚举会在编译阶段被删除</span>\n<span class="token keyword">let</span> myColors <span class="token operator">=</span> <span class="token punctuation">[</span>Colors<span class="token punctuation">.</span>Red<span class="token punctuation">,</span> Colors<span class="token punctuation">.</span>Yellow<span class="token punctuation">,</span> Colors<span class="token punctuation">.</span>Blue<span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译成 JS</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> myColors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token comment">/* Red */</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">/* Yellow */</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token comment">/* Blue */</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>常量枚举<em><strong>不能包含计算成员，如果</strong></em>包含了计算成员，则会在编译阶段报错</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 报错</span>\n<span class="token keyword">const</span> <span class="token keyword">enum</span> Color <span class="token punctuation">{</span>Red<span class="token punctuation">,</span> Yellow<span class="token punctuation">,</span> Blue <span class="token operator">=</span> <span class="token string">&quot;blue&quot;</span><span class="token punctuation">.</span>length<span class="token punctuation">}</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Colors<span class="token punctuation">.</span><span class="token constant">RED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="什么是函数类型接口" tabindex="-1"><a class="header-anchor" href="#什么是函数类型接口" aria-hidden="true">#</a> 什么是函数类型接口</h2><p>对方法传入的参数和返回值进行约束</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 注意区别</span>\n\n<span class="token comment">// 普通的接口</span>\n<span class="token keyword">interface</span> <span class="token class-name">discount1</span><span class="token punctuation">{</span>\n  <span class="token function-variable function">getNum</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">price</span><span class="token operator">:</span>number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> number\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 函数类型接口</span>\n<span class="token keyword">interface</span> <span class="token class-name">discount2</span><span class="token punctuation">{</span>\n  <span class="token comment">// 注意:</span>\n  <span class="token comment">// “:” 前面的是函数的签名，用来约束函数的参数</span>\n  <span class="token comment">// &quot;:&quot; 后面的用来约束函数的返回值</span>\n  <span class="token punctuation">(</span>price<span class="token operator">:</span>number<span class="token punctuation">)</span><span class="token operator">:</span>number\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> <span class="token literal-property property">cost</span><span class="token operator">:</span><span class="token function-variable function">discount2</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">price</span><span class="token operator">:</span>number</span><span class="token punctuation">)</span><span class="token operator">:</span>number<span class="token punctuation">{</span>\n   <span class="token keyword">return</span> price <span class="token operator">*</span> <span class="token number">.8</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 也可以使用类型别名</span>\ntype <span class="token function-variable function">Add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">x</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> number\n<span class="token keyword">let</span> <span class="token literal-property property">add</span><span class="token operator">:</span> <span class="token function-variable function">Add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">a</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="继承-vs-多态" tabindex="-1"><a class="header-anchor" href="#继承-vs-多态" aria-hidden="true">#</a> 继承 vs 多态</h2><ul><li>继承：子类继承父类，子类除了拥有父类的所有特性外，还有一些更具体的特性</li><li>多态：由继承而产生了相关的不同的类，对同一个方法可以有不同的响应</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>\n    <span class="token function">speak</span><span class="token punctuation">(</span>word<span class="token operator">:</span> string<span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&#39;Animal: &#39;</span> <span class="token operator">+</span> word<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>\n    <span class="token function">speak</span><span class="token punctuation">(</span>word<span class="token operator">:</span> string<span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&#39;Cat:&#39;</span> <span class="token operator">+</span> word<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>\n    <span class="token function">speak</span><span class="token punctuation">(</span>word<span class="token operator">:</span> string<span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&#39;Dog:&#39;</span> <span class="token operator">+</span> word<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cat<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="什么是泛型" tabindex="-1"><a class="header-anchor" href="#什么是泛型" aria-hidden="true">#</a> 什么是泛型</h2><p>泛型是指在定义函数、接口或类的时候，不预先指定具体的类型，使用时再去指定类型的一种特性。</p><p>可以把泛型理解为代表类型的参数</p><h2 id="非空断言符的使用" tabindex="-1"><a class="header-anchor" href="#非空断言符的使用" aria-hidden="true">#</a> 非空断言符的使用</h2><p>TS 3.7版本正式支持使用</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token literal-property property">root</span><span class="token operator">:</span> any <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nroot<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> <span class="token literal-property property">root2</span><span class="token operator">:</span> <span class="token punctuation">(</span>HTMLElement <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 非空断言操作符--&gt; 这样写只是为了骗过编译器，防止编译的时候报错，打包后的代码可能还是会报错</span>\nroot2<span class="token operator">!</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="typescript-中-、-、-、-、-、-等符号的含义" tabindex="-1"><a class="header-anchor" href="#typescript-中-、-、-、-、-、-等符号的含义" aria-hidden="true">#</a> TypeScript 中 ?.、??、!、!.、_、* 等符号的含义？*</h2><p><code>?. 可选链</code> 遇到 null 和 undefined 可以立即停止表达式的运行。</p><p><code>?? 空值合并运算符</code> 当左侧操作数为 null 或 undefined 时，其返回右侧的操作数，否则返回左侧的操作数。</p><p><code>! 非空断言运算符</code> x! 将从 x 值域中排除 null 和 undefined <code>!.</code> 在变量名后添加，可以断言排除undefined和null类型</p><p><code>_ 数字分割符</code> 分隔符不会改变数值字面量的值，使人更容易读懂数字 .e.g 1_101_324。</p><p><code>**求幂</code></p><h2 id="declare-declare-global是什么" tabindex="-1"><a class="header-anchor" href="#declare-declare-global是什么" aria-hidden="true">#</a> declare，declare global是什么？</h2><p>declare 是用来定义全局变量、全局函数、全局命名空间、js modules、class等 declare global 为全局对象 window 增加新的属性</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>declare global <span class="token punctuation">{</span> \n   <span class="token keyword">interface</span> <span class="token class-name">Window</span> <span class="token punctuation">{</span> \n        <span class="token literal-property property">csrf</span><span class="token operator">:</span> string<span class="token punctuation">;</span> \n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="对-typescript-类中成员的-public、private、protected、readonly-修饰符的理解" tabindex="-1"><a class="header-anchor" href="#对-typescript-类中成员的-public、private、protected、readonly-修饰符的理解" aria-hidden="true">#</a> 对 TypeScript 类中成员的 public、private、protected、readonly 修饰符的理解？</h2><ul><li>public: 成员都默认为public，被此限定符修饰的成员是可以被外部访问；</li><li>private: 被此限定符修饰的成员是只可以被类的内部访问；</li><li>protected: 被此限定符修饰的成员是只可以被类的内部以及类的子类访问;</li><li>readonly: 关键字将属性设置为只读的。 只读属性必须在声明时或构造函数里被初始化。</li></ul><h2 id="keyof-和-typeof-关键字的作用" tabindex="-1"><a class="header-anchor" href="#keyof-和-typeof-关键字的作用" aria-hidden="true">#</a> keyof 和 typeof 关键字的作用？</h2><p>keyof 索引类型查询操作符 获取索引类型的属性名，构成联合类型。 typeof 获取一个变量或对象的类型。</p><p>简述工具类型 Exclude、Omit、Merge、Intersection、Overwrite的作用。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Exclude&lt;T, U&gt; 从 T 中排除出可分配给 U的元素。 \nOmit&lt;T, K&gt; 的作用是忽略T中的某些属性。 \nMerge&lt;O1, O2&gt; 是将两个对象的属性合并。 \nCompute&lt;A &amp; B&gt; 是将交叉类型合并 \nIntersection&lt;T, U&gt;的作用是取T的属性,此属性同样也存在与U。 \nOverwrite&lt;T, U&gt; 是用U的属性覆盖T的相同属性。\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',121)],t={},o=(0,a(13860).Z)(t,[["render",function(n,s){return(0,p.wg)(),(0,p.iD)("div",null,e)}]])},13860:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,p]of s)a[n]=p;return a}},41921:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p=JSON.parse('{"key":"v-725a1d19","path":"/Interview/h5/typescript.html","title":"Typescript","lang":"zh-CN","frontmatter":{"title":"Typescript","icon":null,"date":"2023-02-18T00:00:00.000Z","category":["Interview"],"summary":"什么是TypeScript？ Typescript 是一个强类型的 JavaScript 超集，支持ES6语法，支持面向对象编程的概念，如类、接口、继承、泛型等。Typescript并不直接在浏览器上运行，需要编译器编译成纯Javascript来运行。 为什么要使用 TypeScript ? TypeScript 相对于 JavaScript 的优势是什么？","head":[["meta",{"property":"og:url","content":"https://0808200.xyz/Interview/h5/typescript.html"}],["meta",{"property":"og:site_name","content":"𝑀𝑟.𝑔𝑜𝑜𝑔𝑥ℎ"}],["meta",{"property":"og:title","content":"Typescript"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-02-22T05:24:57.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:published_time","content":"2023-02-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-02-22T05:24:57.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"什么是TypeScript？","slug":"什么是typescript","children":[]},{"level":2,"title":"为什么要使用 TypeScript ? TypeScript 相对于 JavaScript 的优势是什么？","slug":"为什么要使用-typescript-typescript-相对于-javascript-的优势是什么","children":[]},{"level":2,"title":"typescript中内置类型","slug":"typescript中内置类型","children":[]},{"level":2,"title":"null和undefined的区别","slug":"null和undefined的区别","children":[]},{"level":2,"title":"number和bigint","slug":"number和bigint","children":[]},{"level":2,"title":"any和unknown","slug":"any和unknown","children":[]},{"level":2,"title":"object、Object 和 {}","slug":"object、object-和","children":[]},{"level":2,"title":"void","slug":"void","children":[]},{"level":2,"title":"函数重载","slug":"函数重载","children":[]},{"level":2,"title":"Array","slug":"array","children":[]},{"level":2,"title":"never类型","slug":"never类型","children":[]},{"level":2,"title":"接口和类型别名type有什么区别","slug":"接口和类型别名type有什么区别","children":[]},{"level":2,"title":"类型收窄","slug":"类型收窄","children":[]},{"level":2,"title":"类型断言","slug":"类型断言","children":[]},{"level":2,"title":"类型保护的方式有哪些","slug":"类型保护的方式有哪些","children":[]},{"level":2,"title":"元祖越界问题","slug":"元祖越界问题","children":[]},{"level":2,"title":"常量枚举与普通枚举的区别","slug":"常量枚举与普通枚举的区别","children":[]},{"level":2,"title":"什么是函数类型接口","slug":"什么是函数类型接口","children":[]},{"level":2,"title":"继承 vs 多态","slug":"继承-vs-多态","children":[]},{"level":2,"title":"什么是泛型","slug":"什么是泛型","children":[]},{"level":2,"title":"非空断言符的使用","slug":"非空断言符的使用","children":[]},{"level":2,"title":"TypeScript 中 ?.、??、!、!.、_、* 等符号的含义？*","slug":"typescript-中-、-、-、-、-、-等符号的含义","children":[]},{"level":2,"title":"declare，declare global是什么？","slug":"declare-declare-global是什么","children":[]},{"level":2,"title":"对 TypeScript 类中成员的 public、private、protected、readonly 修饰符的理解？","slug":"对-typescript-类中成员的-public、private、protected、readonly-修饰符的理解","children":[]},{"level":2,"title":"keyof 和 typeof 关键字的作用？","slug":"keyof-和-typeof-关键字的作用","children":[]}],"git":{"createdTime":1677043497000,"updatedTime":1677043497000,"contributors":[{"name":"googxh","email":"49309686+googxho@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":11.85,"words":3555},"filePathRelative":"Interview/h5/typescript.md","localizedDate":"2023年2月18日"}')}}]);