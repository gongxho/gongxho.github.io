"use strict";(self.webpackChunkmyblog=self.webpackChunkmyblog||[]).push([[34107],{98061:(e,a,t)=>{t.r(a),t.d(a,{default:()=>o});var n=t(60329);const s=[(0,n.uE)('<h2 id="一、网络相关" tabindex="-1"><a class="header-anchor" href="#一、网络相关" aria-hidden="true">#</a> 一、网络相关</h2><h3 id="_1-1-dns-预解析" tabindex="-1"><a class="header-anchor" href="#_1-1-dns-预解析" aria-hidden="true">#</a> 1.1 DNS 预解析</h3><ul><li>DNS 解析也是需要时间的，可以通过预解析的方式来预先获得域名所对应的 IP</li></ul><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dns-prefetch<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>//yuchengkai.cn<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-2-缓存" tabindex="-1"><a class="header-anchor" href="#_1-2-缓存" aria-hidden="true">#</a> 1.2 缓存</h3><ul><li>缓存对于前端性能优化来说是个很重要的点，良好的缓存策略可以降低资源的重复加载提高网页的整体加载速度</li><li>通常浏览器缓存策略分为两种：强缓存和协商缓存</li></ul><p><strong>强缓存</strong></p><blockquote><p>实现强缓存可以通过两种响应头实现：<code>Expires </code>和 <code>Cache-Control</code> 。强缓存表示在缓存期间不需要请求，<code>state code </code>为 <code>200</code></p></blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Expires: Wed, 22 Oct 2018 08:41:00 GMT\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><code>Expires</code> 是 <code>HTTP / 1.0</code> 的产物，表示资源会在 <code>Wed, 22 Oct 2018 08:41:00 GMT</code> 后过期，需要再次请求。并且 <code>Expires</code> 受限于本地时间，如果修改了本地时间，可能会造成缓存失效</p></blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Cache-control: max-age=30\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p><code>Cache-Control</code> 出现于 <code>HTTP / 1.1</code>，优先级高于 <code>Expires</code> 。该属性表示资源会在 <code>30</code> 秒后过期，需要再次请求</p></blockquote><p><strong>协商缓存</strong></p><ul><li>如果缓存过期了，我们就可以使用协商缓存来解决问题。协商缓存需要请求，如果缓存有效会返回 304</li><li>协商缓存需要客户端和服务端共同实现，和强缓存一样，也有两种实现方式</li></ul><p>Last-Modified 和 If-Modified-Since</p><ul><li><code>Last-Modified</code> 表示本地文件最后修改日期，<code>If-Modified-Since</code> 会将 <code>Last-Modified </code>的值发送给服务器，询问服务器在该日期后资源是否有更新，有更新的话就会将新的资源发送回来</li><li>但是如果在本地打开缓存文件，就会造成 <code>Last-Modified</code> 被修改，所以在 <code>HTTP / 1.1</code> 出现了 <code>ETag</code></li></ul><p>ETag 和 If-None-Match</p><ul><li><code>ETag</code> 类似于文件指纹，<code>If-None-Match</code> 会将当前 <code>ETag</code> 发送给服务器，询问该资源 ETag 是否变动，有变动的话就将新的资源发送回来。并且 <code>ETag</code> 优先级比 <code>Last-Modified</code> 高</li></ul><p><strong>选择合适的缓存策略</strong></p><blockquote><p>对于大部分的场景都可以使用强缓存配合协商缓存解决，但是在一些特殊的地方可能需要选择特殊的缓存策略</p></blockquote><ul><li>对于某些不需要缓存的资源，可以使用 <code>Cache-control: no-store</code> ，表示该资源不需要缓存</li><li>对于频繁变动的资源，可以使用 <code>Cache-Control: no-cache</code> 并配合 <code>ETag</code> 使用，表示该资源已被缓存，但是每次都会发送请求询问资源是否更新。</li><li>对于代码文件来说，通常使用 <code>Cache-Control: max-age=31536000</code> 并配合策略缓存使用，然后对文件进行指纹处理，一旦文件名变动就会立刻下载新的文件</li></ul><h3 id="_1-3-使用-http-2-0" tabindex="-1"><a class="header-anchor" href="#_1-3-使用-http-2-0" aria-hidden="true">#</a> 1.3 使用 HTTP / 2.0</h3><ul><li>因为浏览器会有并发请求限制，在 HTTP / 1.1 时代，每个请求都需要建立和断开，消耗了好几个 RTT 时间，并且由于 TCP 慢启动的原因，加载体积大的文件会需要更多的时间</li><li>在 HTTP / 2.0 中引入了多路复用，能够让多个请求使用同一个 TCP 链接，极大的加快了网页的加载速度。并且还支持 Header 压缩，进一步的减少了请求的数据大小</li></ul><h3 id="_1-4-预加载" tabindex="-1"><a class="header-anchor" href="#_1-4-预加载" aria-hidden="true">#</a> 1.4 预加载</h3><ul><li>在开发中，可能会遇到这样的情况。有些资源不需要马上用到，但是希望尽早获取，这时候就可以使用预加载</li><li>预加载其实是声明式的 <code>fetch</code> ，强制浏览器请求资源，并且不会阻塞 <code>onload</code> 事件，可以使用以下代码开启预加载</li></ul><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>preload<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://example.com<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>预加载可以一定程度上降低首屏的加载时间，因为可以将一些不影响首屏但重要的文件延后加载，唯一缺点就是兼容性不好</p></blockquote><h3 id="_1-5-预渲染" tabindex="-1"><a class="header-anchor" href="#_1-5-预渲染" aria-hidden="true">#</a> 1.5 预渲染</h3><blockquote><p>可以通过预渲染将下载的文件预先在后台渲染，可以使用以下代码开启预渲染</p></blockquote><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>prerender<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://example.com<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>预渲染虽然可以提高页面的加载速度，但是要确保该页面百分百会被用户在之后打开，否则就白白浪费资源去渲染</li></ul><h2 id="二、优化渲染过程" tabindex="-1"><a class="header-anchor" href="#二、优化渲染过程" aria-hidden="true">#</a> 二、优化渲染过程</h2><h3 id="_2-1-懒执行" tabindex="-1"><a class="header-anchor" href="#_2-1-懒执行" aria-hidden="true">#</a> 2.1 懒执行</h3><ul><li>懒执行就是将某些逻辑延迟到使用时再计算。该技术可以用于首屏优化，对于某些耗时逻辑并不需要在首屏就使用的，就可以使用懒执行。懒执行需要唤醒，一般可以通过定时器或者事件的调用来唤醒</li></ul><h3 id="_2-2-懒加载" tabindex="-1"><a class="header-anchor" href="#_2-2-懒加载" aria-hidden="true">#</a> 2.2 懒加载</h3><ul><li>懒加载就是将不关键的资源延后加载</li></ul><blockquote><p>懒加载的原理就是只加载自定义区域（通常是可视区域，但也可以是即将进入可视区域）内需要加载的东西。对于图片来说，先设置图片标签的 src 属性为一张占位图，将真实的图片资源放入一个自定义属性中，当进入自定义区域时，就将自定义属性替换为 src 属性，这样图片就会去下载资源，实现了图片懒加载</p></blockquote><ul><li>懒加载不仅可以用于图片，也可以使用在别的资源上。比如进入可视区域才开始播放视频等</li></ul>',38)],l={},o=(0,t(13860).Z)(l,[["render",function(e,a){return(0,n.wg)(),(0,n.iD)("div",null,s)}]])},13860:(e,a)=>{a.Z=(e,a)=>{const t=e.__vccOpts||e;for(const[e,n]of a)t[e]=n;return t}},90899:(e,a,t)=>{t.r(a),t.d(a,{data:()=>n});const n=JSON.parse('{"key":"v-d03b4c40","path":"/Interview/base/performance.html","title":"页面性能优化","lang":"zh-CN","frontmatter":{"title":"页面性能优化","icon":null,"date":"2022-12-15T00:00:00.000Z","category":["Interview"],"summary":"一、网络相关 1.1 DNS 预解析 DNS 解析也是需要时间的，可以通过预解析的方式来预先获得域名所对应的 IP; 1.2 缓存 缓存对于前端性能优化来说是个很重要的点，良好的缓存策略可以降低资源的重复加载提高网页的整体加载速度; 通常浏览器缓存策略分为两种：强缓存和协商缓存; 强缓存 \\" 实现强缓存可以通过两种响应头实现：Expires 和 Cache-","head":[["meta",{"property":"og:url","content":"https://0808200.xyz/Interview/base/performance.html"}],["meta",{"property":"og:site_name","content":"𝑀𝑟.𝑔𝑜𝑜𝑔𝑥ℎ"}],["meta",{"property":"og:title","content":"页面性能优化"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-01-17T08:24:10.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:published_time","content":"2022-12-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-17T08:24:10.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"一、网络相关","slug":"一、网络相关","children":[{"level":3,"title":"1.1 DNS 预解析","slug":"_1-1-dns-预解析","children":[]},{"level":3,"title":"1.2 缓存","slug":"_1-2-缓存","children":[]},{"level":3,"title":"1.3 使用 HTTP / 2.0","slug":"_1-3-使用-http-2-0","children":[]},{"level":3,"title":"1.4 预加载","slug":"_1-4-预加载","children":[]},{"level":3,"title":"1.5 预渲染","slug":"_1-5-预渲染","children":[]}]},{"level":2,"title":"二、优化渲染过程","slug":"二、优化渲染过程","children":[{"level":3,"title":"2.1 懒执行","slug":"_2-1-懒执行","children":[]},{"level":3,"title":"2.2 懒加载","slug":"_2-2-懒加载","children":[]}]}],"git":{"createdTime":1673943850000,"updatedTime":1673943850000,"contributors":[{"name":"googxh","email":"gxh522@qq.com","commits":1}]},"readingTime":{"minutes":4.49,"words":1346},"filePathRelative":"Interview/base/performance.md","localizedDate":"2022年12月15日"}')}}]);