"use strict";(self.webpackChunkmyblog=self.webpackChunkmyblog||[]).push([[14822],{23359:(n,s,e)=>{e.r(s),e.d(s,{default:()=>Bn});var a=e(78e3);const o=(0,a.uE)("<p><code>ref</code>是<code>reference</code>（引用）的缩写。在<code>React</code>中，我们习惯用<code>ref</code>保存<code>DOM</code>。</p><p>事实上，任何需要被&quot;引用&quot;的数据都可以保存在<code>ref</code>中，<code>useRef</code>的出现将这种思想进一步发扬光大。</p>",2),t=(0,a.Uk)("在"),c=(0,a.Uk)("Hooks数据结构一节"),p=(0,a.Uk)("我们讲到："),l=(0,a.uE)('<blockquote><p>对于<code>useRef(1)</code>，<code>memoizedState</code>保存<code>{current: 1}</code></p></blockquote><p>本节我们会介绍<code>useRef</code>的实现，以及<code>ref</code>的工作流程。</p><p>由于<code>string</code>类型的<code>ref</code>已不推荐使用，所以本节针对<code>function | {current: any}</code>类型的<code>ref</code>。</p><h2 id="useref" tabindex="-1"><a class="header-anchor" href="#useref" aria-hidden="true">#</a> useRef</h2><p>与其他<code>Hook</code>一样，对于<code>mount</code>与<code>update</code>，<code>useRef</code>对应两个不同<code>dispatcher</code>。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> mountRef<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>initialValue<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token operator">|</span>current<span class="token operator">:</span> <span class="token constant">T</span><span class="token operator">|</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 获取当前useRef hook</span>\n  <span class="token keyword">const</span> hook <span class="token operator">=</span> <span class="token function">mountWorkInProgressHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 创建ref</span>\n  <span class="token keyword">const</span> ref <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">current</span><span class="token operator">:</span> initialValue<span class="token punctuation">}</span><span class="token punctuation">;</span>\n  hook<span class="token punctuation">.</span>memoizedState <span class="token operator">=</span> ref<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> ref<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> updateRef<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>initialValue<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token operator">|</span>current<span class="token operator">:</span> <span class="token constant">T</span><span class="token operator">|</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 获取当前useRef hook</span>\n  <span class="token keyword">const</span> hook <span class="token operator">=</span> <span class="token function">updateWorkInProgressHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// 返回保存的数据</span>\n  <span class="token keyword">return</span> hook<span class="token punctuation">.</span>memoizedState<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',6),r=(0,a.Uk)("你可以在"),i={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberHooks.old.js#L1208-L1221",target:"_blank",rel:"noopener noreferrer"},u=(0,a.Uk)("这里"),d=(0,a.Uk)("看到这段代码"),k=(0,a.uE)('<p>可见，<code>useRef</code>仅仅是返回一个包含<code>current</code>属性的对象。</p><p>为了验证这个观点，我们再看下<code>React.createRef</code>方法的实现：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> RefObject <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> refObject <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">current</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> refObject<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',3),m=(0,a.Uk)("你可以从"),f={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react/src/ReactCreateRef.js",target:"_blank",rel:"noopener noreferrer"},v=(0,a.Uk)("这里"),b=(0,a.Uk)("看到这段代码"),g=(0,a.uE)('<p>了解了<code>ref</code>的数据结构后，我们再来看看<code>ref</code>的工作流程。</p><h2 id="ref的工作流程" tabindex="-1"><a class="header-anchor" href="#ref的工作流程" aria-hidden="true">#</a> ref的工作流程</h2><p>在<code>React</code>中，<code>HostComponent</code>、<code>ClassComponent</code>、<code>ForwardRef</code>可以赋值<code>ref</code>属性。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// HostComponent</span>\n<span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token punctuation">{</span>domRef<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n<span class="token comment">// ClassComponent / ForwardRef</span>\n<span class="token operator">&lt;</span>App ref<span class="token operator">=</span><span class="token punctuation">{</span>cpnRef<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>ForwardRef</code>只是将<code>ref</code>作为第二个参数传递下去，不会进入<code>ref</code>的工作流程。</p><p>所以接下来讨论<code>ref</code>的工作流程时会排除<code>ForwardRef</code>。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 对于ForwardRef，secondArg为传递下去的ref</span>\n<span class="token keyword">let</span> children <span class="token operator">=</span> <span class="token function">Component</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> secondArg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>',7),h=(0,a.Uk)("你可以在"),y={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberHooks.old.js#L415",target:"_blank",rel:"noopener noreferrer"},w=(0,a.Uk)("这里"),_=(0,a.Uk)("看到这段代码"),R=(0,a.uE)('<p>我们知道<code>HostComponent</code>在<code>commit阶段</code>的<code>mutation阶段</code>执行<code>DOM</code>操作。</p><p>所以，对应<code>ref</code>的更新也是发生在<code>mutation阶段</code>。</p><p>再进一步，<code>mutation阶段</code>执行<code>DOM</code>操作的依据为<code>effectTag</code>。</p><p>所以，对于<code>HostComponent</code>、<code>ClassComponent</code>如果包含<code>ref</code>操作，那么也会赋值相应的<code>effectTag</code>。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ...</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> Placement <span class="token operator">=</span> <span class="token comment">/*                    */</span> <span class="token number">0b0000000000000010</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> Update <span class="token operator">=</span> <span class="token comment">/*                       */</span> <span class="token number">0b0000000000000100</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> Deletion <span class="token operator">=</span> <span class="token comment">/*                     */</span> <span class="token number">0b0000000000001000</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> Ref <span class="token operator">=</span> <span class="token comment">/*                          */</span> <span class="token number">0b0000000010000000</span><span class="token punctuation">;</span>\n<span class="token comment">// ...</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',5),U=(0,a.Uk)("你可以在"),C={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactSideEffectTags.js#L24",target:"_blank",rel:"noopener noreferrer"},j=(0,a.Uk)("ReactSideEffectTags文件"),W=(0,a.Uk)("中看到"),T=(0,a._)("code",null,"ref",-1),x=(0,a.Uk)("对应的"),F=(0,a._)("code",null,"effectTag",-1),E=(0,a.uE)('<p>所以，<code>ref</code>的工作流程可以分为两部分：</p><ul><li><p><code>render阶段</code>为含有<code>ref</code>属性的<code>fiber</code>添加<code>Ref effectTag</code></p></li><li><p><code>commit阶段</code>为包含<code>Ref effectTag</code>的<code>fiber</code>执行对应操作</p></li></ul><h2 id="render阶段" tabindex="-1"><a class="header-anchor" href="#render阶段" aria-hidden="true">#</a> render阶段</h2><p>在<code>render阶段</code>的<code>beginWork</code>与<code>completeWork</code>中有个同名方法<code>markRef</code>用于为含有<code>ref</code>属性的<code>fiber</code>增加<code>Ref effectTag</code>。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// beginWork的markRef</span>\n<span class="token keyword">function</span> <span class="token function">markRef</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">current</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token literal-property property">workInProgress</span><span class="token operator">:</span> Fiber</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> ref <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>ref<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>\n    <span class="token punctuation">(</span>current <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> ref <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">||</span>\n    <span class="token punctuation">(</span>current <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> current<span class="token punctuation">.</span>ref <span class="token operator">!==</span> ref<span class="token punctuation">)</span>\n  <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Schedule a Ref effect</span>\n    workInProgress<span class="token punctuation">.</span>effectTag <span class="token operator">|=</span> Ref<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// completeWork的markRef</span>\n<span class="token keyword">function</span> <span class="token function">markRef</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">workInProgress</span><span class="token operator">:</span> Fiber</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  workInProgress<span class="token punctuation">.</span>effectTag <span class="token operator">|=</span> Ref<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',5),H=(0,a.Uk)("你可以在"),q={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberBeginWork.old.js#L693",target:"_blank",rel:"noopener noreferrer"},D=(0,a.Uk)("这里"),L=(0,a.Uk)("看到"),P=(0,a._)("code",null,"beginWork",-1),S=(0,a.Uk)("的"),I=(0,a._)("code",null,"markRef",-1),O=(0,a.Uk)("、"),z={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberCompleteWork.old.js#L153",target:"_blank",rel:"noopener noreferrer"},M=(0,a.Uk)("这里"),A=(0,a.Uk)("看到"),B=(0,a._)("code",null,"completeWork",-1),N=(0,a.Uk)("的"),Z=(0,a._)("code",null,"markRef",-1),V=(0,a._)("p",null,[(0,a.Uk)("在"),(0,a._)("code",null,"beginWork"),(0,a.Uk)("中，如下两处调用了"),(0,a._)("code",null,"markRef"),(0,a.Uk)("：")],-1),J=(0,a._)("code",null,"updateClassComponent",-1),G=(0,a.Uk)("内的"),K={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberBeginWork.old.js#L958",target:"_blank",rel:"noopener noreferrer"},Q=(0,a.Uk)("finishClassComponent"),X=(0,a.Uk)("，对应"),Y=(0,a._)("code",null,"ClassComponent",-1),$=(0,a._)("p",null,[(0,a.Uk)("注意"),(0,a._)("code",null,"ClassComponent"),(0,a.Uk)("即使"),(0,a._)("code",null,"shouldComponentUpdate"),(0,a.Uk)("为"),(0,a._)("code",null,"false"),(0,a.Uk)("该组件也会调用"),(0,a._)("code",null,"markRef")],-1),nn={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberBeginWork.old.js#L1156",target:"_blank",rel:"noopener noreferrer"},sn=(0,a.Uk)("updateHostComponent"),en=(0,a.Uk)("，对应"),an=(0,a._)("code",null,"HostComponent",-1),on=(0,a._)("p",null,[(0,a.Uk)("在"),(0,a._)("code",null,"completeWork"),(0,a.Uk)("中，如下两处调用了"),(0,a._)("code",null,"markRef"),(0,a.Uk)("：")],-1),tn=(0,a._)("code",null,"completeWork",-1),cn=(0,a.Uk)("中的"),pn={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberCompleteWork.old.js#L728",target:"_blank",rel:"noopener noreferrer"},ln=(0,a.Uk)("HostComponent"),rn=(0,a.Uk)("类型"),un=(0,a._)("code",null,"completeWork",-1),dn=(0,a.Uk)("中的"),kn={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberCompleteWork.old.js#L1278",target:"_blank",rel:"noopener noreferrer"},mn=(0,a.Uk)("ScopeComponent"),fn=(0,a.Uk)("类型"),vn=(0,a._)("code",null,"ScopeComponent",-1),bn=(0,a.Uk)("是一种用于管理"),gn=(0,a._)("code",null,"focus",-1),hn=(0,a.Uk)("的测试特性，详见"),yn={href:"https://github.com/facebook/react/pull/16587",target:"_blank",rel:"noopener noreferrer"},wn=(0,a.Uk)("PR"),_n=(0,a.uE)('<p>总结下<code>组件</code>对应<code>fiber</code>被赋值<code>Ref effectTag</code>需要满足的条件：</p><ul><li><p><code>fiber</code>类型为<code>HostComponent</code>、<code>ClassComponent</code>、<code>ScopeComponent</code>（这种情况我们不讨论）</p></li><li><p>对于<code>mount</code>，<code>workInProgress.ref !== null</code>，即存在<code>ref</code>属性</p></li><li><p>对于<code>update</code>，<code>current.ref !== workInProgress.ref</code>，即<code>ref</code>属性改变</p></li></ul><h2 id="commit阶段" tabindex="-1"><a class="header-anchor" href="#commit阶段" aria-hidden="true">#</a> commit阶段</h2><p>在<code>commit阶段</code>的<code>mutation阶段</code>中，对于<code>ref</code>属性改变的情况，需要先移除之前的<code>ref</code>。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">commitMutationEffects</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">root</span><span class="token operator">:</span> FiberRoot<span class="token punctuation">,</span> renderPriorityLevel</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>nextEffect <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">const</span> effectTag <span class="token operator">=</span> nextEffect<span class="token punctuation">.</span>effectTag<span class="token punctuation">;</span>\n    <span class="token comment">// ...</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>effectTag <span class="token operator">&amp;</span> Ref<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> current <span class="token operator">=</span> nextEffect<span class="token punctuation">.</span>alternate<span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 移除之前的ref</span>\n        <span class="token function">commitDetachRef</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// ...</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',5),Rn=(0,a.Uk)("你可以在"),Un={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberWorkLoop.old.js#L2342",target:"_blank",rel:"noopener noreferrer"},Cn=(0,a.Uk)("这里"),jn=(0,a.Uk)("看到这段代码"),Wn=(0,a.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">commitDetachRef</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">current</span><span class="token operator">:</span> Fiber</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> currentRef <span class="token operator">=</span> current<span class="token punctuation">.</span>ref<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>currentRef <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> currentRef <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// function类型ref，调用他，传参为null</span>\n      <span class="token function">currentRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 对象类型ref，current赋值为null</span>\n      currentRef<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，在<code>mutation阶段</code>，对于<code>Deletion effectTag</code>的<code>fiber</code>（对应需要删除的<code>DOM节点</code>），需要递归他的子树，对子孙<code>fiber</code>的<code>ref</code>执行类似<code>commitDetachRef</code>的操作。</p>',2),Tn=(0,a.Uk)("在"),xn=(0,a.Uk)("mutation阶段一节"),Fn=(0,a.Uk)("我们讲到"),En=(0,a.uE)('<blockquote><p>对于<code>Deletion effectTag</code>的<code>fiber</code>，会执行<code>commitDeletion</code>。</p></blockquote><p>在<code>commitDeletion</code>——<code>unmountHostComponents</code>——<code>commitUnmount</code>——<code>ClassComponent | HostComponent</code>类型<code>case</code>中调用的<code>safelyDetachRef</code>方法负责执行类似<code>commitDetachRef</code>的操作。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">safelyDetachRef</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">current</span><span class="token operator">:</span> Fiber</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> ref <span class="token operator">=</span> current<span class="token punctuation">.</span>ref<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>ref <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> ref <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>refError<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">captureCommitPhaseError</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> refError<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      ref<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',3),Hn=(0,a.Uk)("你可以在"),qn={href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiberCommitWork.old.js#L183",target:"_blank",rel:"noopener noreferrer"},Dn=(0,a.Uk)("这里"),Ln=(0,a.Uk)("看到这段代码"),Pn=(0,a.Uk)("接下来进入"),Sn=(0,a._)("code",null,"ref",-1),In=(0,a.Uk)("的赋值阶段。我们在"),On=(0,a.Uk)("Layout阶段一节"),zn=(0,a.Uk)("讲到"),Mn=(0,a.uE)('<blockquote><p><code>commitLayoutEffect</code>会执行<code>commitAttachRef</code>（赋值<code>ref</code>）</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">commitAttachRef</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">finishedWork</span><span class="token operator">:</span> Fiber</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> ref <span class="token operator">=</span> finishedWork<span class="token punctuation">.</span>ref<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>ref <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 获取ref属性对应的Component实例</span>\n    <span class="token keyword">const</span> instance <span class="token operator">=</span> finishedWork<span class="token punctuation">.</span>stateNode<span class="token punctuation">;</span>\n    <span class="token keyword">let</span> instanceToUse<span class="token punctuation">;</span>\n    <span class="token keyword">switch</span> <span class="token punctuation">(</span>finishedWork<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">case</span> <span class="token literal-property property">HostComponent</span><span class="token operator">:</span>\n        instanceToUse <span class="token operator">=</span> <span class="token function">getPublicInstance</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token keyword">default</span><span class="token operator">:</span>\n        instanceToUse <span class="token operator">=</span> instance<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 赋值ref</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> ref <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">ref</span><span class="token punctuation">(</span>instanceToUse<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      ref<span class="token punctuation">.</span>current <span class="token operator">=</span> instanceToUse<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，<code>ref</code>的工作流程完毕。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本节我们学习了<code>ref</code>的工作流程。</p><ul><li><p>对于<code>FunctionComponent</code>，<code>useRef</code>负责创建并返回对应的<code>ref</code>。</p></li><li><p>对于赋值了<code>ref</code>属性的<code>HostComponent</code>与<code>ClassComponent</code>，会在<code>render阶段</code>经历赋值<code>Ref effectTag</code>，在<code>commit阶段</code>执行对应<code>ref</code>操作。</p></li></ul>',6),An={},Bn=(0,e(13860).Z)(An,[["render",function(n,s){const e=(0,a.up)("RouterLink"),An=(0,a.up)("ExternalLinkIcon");return(0,a.wg)(),(0,a.iD)("div",null,[o,(0,a._)("p",null,[t,(0,a.Wm)(e,{to:"/react/hooks/structure.html#memoizedstate"},{default:(0,a.w5)((()=>[c])),_:1}),p]),l,(0,a._)("blockquote",null,[(0,a._)("p",null,[r,(0,a._)("a",i,[u,(0,a.Wm)(An)]),d])]),k,(0,a._)("blockquote",null,[(0,a._)("p",null,[m,(0,a._)("a",f,[v,(0,a.Wm)(An)]),b])]),g,(0,a._)("blockquote",null,[(0,a._)("p",null,[h,(0,a._)("a",y,[w,(0,a.Wm)(An)]),_])]),R,(0,a._)("blockquote",null,[(0,a._)("p",null,[U,(0,a._)("a",C,[j,(0,a.Wm)(An)]),W,T,x,F])]),E,(0,a._)("blockquote",null,[(0,a._)("p",null,[H,(0,a._)("a",q,[D,(0,a.Wm)(An)]),L,P,S,I,O,(0,a._)("a",z,[M,(0,a.Wm)(An)]),A,B,N,Z])]),V,(0,a._)("ul",null,[(0,a._)("li",null,[J,G,(0,a._)("a",K,[Q,(0,a.Wm)(An)]),X,Y])]),$,(0,a._)("ul",null,[(0,a._)("li",null,[(0,a._)("a",nn,[sn,(0,a.Wm)(An)]),en,an])]),on,(0,a._)("ul",null,[(0,a._)("li",null,[(0,a._)("p",null,[tn,cn,(0,a._)("a",pn,[ln,(0,a.Wm)(An)]),rn])]),(0,a._)("li",null,[(0,a._)("p",null,[un,dn,(0,a._)("a",kn,[mn,(0,a.Wm)(An)]),fn])])]),(0,a._)("blockquote",null,[(0,a._)("p",null,[vn,bn,gn,hn,(0,a._)("a",yn,[wn,(0,a.Wm)(An)])])]),_n,(0,a._)("blockquote",null,[(0,a._)("p",null,[Rn,(0,a._)("a",Un,[Cn,(0,a.Wm)(An)]),jn])]),Wn,(0,a._)("p",null,[Tn,(0,a.Wm)(e,{to:"/react/hooks/renderer/mutation.html#commitmutationeffects"},{default:(0,a.w5)((()=>[xn])),_:1}),Fn]),En,(0,a._)("blockquote",null,[(0,a._)("p",null,[Hn,(0,a._)("a",qn,[Dn,(0,a.Wm)(An)]),Ln])]),(0,a._)("p",null,[Pn,Sn,In,(0,a.Wm)(e,{to:"/react/renderer/layout.html#commitlayouteffects"},{default:(0,a.w5)((()=>[On])),_:1}),zn]),Mn])}]])},13860:(n,s)=>{s.Z=(n,s)=>{const e=n.__vccOpts||n;for(const[n,a]of s)e[n]=a;return e}},93945:(n,s,e)=>{e.r(s),e.d(s,{data:()=>a});const a=JSON.parse('{"key":"v-f2fec1b6","path":"/react/hooks/useref.html","title":"useRef","lang":"zh-CN","frontmatter":{"title":"useRef","author":"BetaSu","tag":["React"],"summary":"ref是reference（引用）的缩写。在React中，我们习惯用ref保存DOM。 事实上，任何需要被\\"引用\\"的数据都可以保存在ref中，useRef的出现将这种思想进一步发扬光大。 在Hooks数据结构一节我们讲到： \\" 对于useRef(1)，memoizedState保存{current: 1}\\" 本节我们会介绍useRef的实现，以及ref的工作","head":[["meta",{"property":"og:url","content":"https://0808200.xyz/react/hooks/useref.html"}],["meta",{"property":"og:site_name","content":"𝑀𝑟.𝐺𝑜𝑜𝑔𝑥ℎ"}],["meta",{"property":"og:title","content":"useRef"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-08-29T09:14:21.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"BetaSu"}],["meta",{"property":"article:tag","content":"React"}],["meta",{"property":"article:modified_time","content":"2022-08-29T09:14:21.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"useRef","slug":"useref","children":[]},{"level":2,"title":"ref的工作流程","slug":"ref的工作流程","children":[]},{"level":2,"title":"render阶段","slug":"render阶段","children":[]},{"level":2,"title":"commit阶段","slug":"commit阶段","children":[]},{"level":2,"title":"总结","slug":"总结","children":[]}],"git":{"createdTime":1661764461000,"updatedTime":1661764461000,"contributors":[{"name":"googxh","email":"gxh522@qq.com","commits":1}]},"readingTime":{"minutes":4.44,"words":1331},"filePathRelative":"react/hooks/useref.md","localizedDate":"2022年8月29日"}')}}]);