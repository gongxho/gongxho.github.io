"use strict";(self.webpackChunkmyblog=self.webpackChunkmyblog||[]).push([[9491],{23408:(e,o,c)=>{c.r(o),c.d(o,{default:()=>s});var t=c(60329);const d=[(0,t.uE)('<h2 id="_1-前言" tabindex="-1"><a class="header-anchor" href="#_1-前言" aria-hidden="true">#</a> 1 前言</h2><blockquote><p>面试中的安全问题，明确来说，就两个方面：</p></blockquote><ul><li><code>CSRF</code>：基本概念、攻击方式、防御措施</li><li><code>XSS</code>：基本概念、攻击方式、防御措施</li></ul><blockquote><p>这两个问题，一般不会问太难。</p></blockquote><blockquote><p>有人问：<code>SQL</code>注入算吗？答案：这个其实跟前端的关系不是很大。</p></blockquote><h2 id="_2-csrf" tabindex="-1"><a class="header-anchor" href="#_2-csrf" aria-hidden="true">#</a> 2 CSRF</h2><blockquote><p>问的不难，一般问：</p></blockquote><ul><li><code>CSRF</code>的基本概念、缩写、全称</li><li>攻击原理</li><li>防御措施</li></ul><blockquote><p>如果把<strong>攻击原理</strong>和<strong>防御措施</strong>掌握好，基本没什么问题。</p></blockquote><h3 id="_2-1-csrf的基本概念、缩写、全称" tabindex="-1"><a class="header-anchor" href="#_2-1-csrf的基本概念、缩写、全称" aria-hidden="true">#</a> 2.1 CSRF的基本概念、缩写、全称</h3><blockquote><p><code>CSRF</code>（<code>Cross-site request forgery</code>）：<strong>跨站请求伪造</strong>。</p></blockquote><p>PS：中文名一定要记住。英文全称，如果记不住也拉倒。</p><h3 id="_2-2-csrf的攻击原理" tabindex="-1"><a class="header-anchor" href="#_2-2-csrf的攻击原理" aria-hidden="true">#</a> 2.2 CSRF的攻击原理</h3><p><img src="http://img.smyhvae.com/20180307_1735.png" alt=""></p><blockquote><p>用户是网站A的注册用户，且登录进去，于是网站A就给用户下发<code>cookie</code>。</p></blockquote><blockquote><p>从上图可以看出，要完成一次<code>CSRF</code>攻击，受害者必须满足两个必要的条件：</p></blockquote><ol><li>登录受信任网站<code>A</code>，并在本地生成<code>Cookie</code>。（如果用户没有登录网站<code>A</code>，那么网站<code>B</code>在诱导的时候，请求网站<code>A</code>的<code>api</code>接口时，会提示你登录）</li><li>在不登出<code>A</code>的情况下，访问危险网站<code>B</code>（其实是利用了网站<code>A</code>的漏洞）。</li></ol><blockquote><p>我们在讲<code>CSRF</code>时，一定要把上面的两点说清楚。</p></blockquote><blockquote><p>温馨提示一下，<code>cookie</code>保证了用户可以处于登录状态，但网站<code>B</code>其实拿不到 <code>cookie</code>。</p></blockquote><blockquote><p>举个例子，前段时间里，微博网站有个<code>api</code>接口有漏洞，导致很多用户的粉丝暴增。</p></blockquote><h3 id="_2-3-csrf如何防御" tabindex="-1"><a class="header-anchor" href="#_2-3-csrf如何防御" aria-hidden="true">#</a> 2.3 CSRF如何防御</h3><p><strong>方法一、Token 验证：</strong>（用的最多）</p><ol><li>服务器发送给客户端一个<code>token</code>；</li><li>客户端提交的表单中带着这个<code>token</code>。</li><li>如果这个 <code>token</code> 不合法，那么服务器拒绝这个请求。</li></ol><p><strong>方法二：隐藏令牌：</strong></p><ul><li>把 <code>token</code> 隐藏在 <code>http</code> 的 <code>head</code>头中。</li></ul><blockquote><p>方法二和方法一有点像，本质上没有太大区别，只是使用方式上有区别。</p></blockquote><p><strong>方法三、Referer 验证：</strong></p><blockquote><p><code>Referer</code> 指的是页面请求来源。意思是，<strong>只接受本站的请求，服务器才做响应</strong>；如果不是，就拦截。</p></blockquote><h2 id="_3-xss" tabindex="-1"><a class="header-anchor" href="#_3-xss" aria-hidden="true">#</a> 3 XSS</h2><h3 id="_3-1-xss的基本概念" tabindex="-1"><a class="header-anchor" href="#_3-1-xss的基本概念" aria-hidden="true">#</a> 3.1 XSS的基本概念</h3><blockquote><p>`XSS（Cross Site Scripting）``：<strong>跨域脚本攻击</strong>。</p></blockquote><ul><li>接下来，我们详细讲一下 <code>XSS</code> 的内容。</li></ul><blockquote><p>预备知识：<code>HTTP</code>、<code>Cookie</code>、<code>Ajax</code>。</p></blockquote><h3 id="_3-2-xss的攻击原理" tabindex="-1"><a class="header-anchor" href="#_3-2-xss的攻击原理" aria-hidden="true">#</a> 3.2 XSS的攻击原理</h3><blockquote><p><code>XSS</code>攻击的核心原理是：不需要你做任何的登录认证，它会通过合法的操作（比如在<code>url</code>中输入、在评论框中输入），向你的页面注入脚本（可能是<code>js</code>、<code>hmtl</code>代码块等）。</p></blockquote><blockquote><p>最后导致的结果可能是：</p></blockquote><ul><li>盗用<code>Cookie</code></li><li>破坏页面的正常结构，插入广告等恶意内容</li><li><code>D-doss</code>攻击</li></ul><h3 id="_3-3-xss的攻击方式" tabindex="-1"><a class="header-anchor" href="#_3-3-xss的攻击方式" aria-hidden="true">#</a> 3.3 XSS的攻击方式</h3><ol><li>反射型</li></ol><blockquote><p>发出请求时，<code>XSS</code>代码出现在<code>url</code>中，作为输入提交到服务器端，服务器端解析后响应，<code>XSS</code>代码随响应内容一起传回给浏览器，最后浏览器解析执行<code>XSS</code>代码。这个过程像一次反射，所以叫反射型<code>XSS</code>。</p></blockquote><ol start="2"><li>存储型</li></ol><blockquote><p>存储型<code>XSS</code>和反射型<code>XSS</code>的差别在于，提交的代码会存储在服务器端（数据库、内存、文件系统等），下次请求时目标页面时不用再提交XSS代码。</p></blockquote><h3 id="_3-4-xss的防范措施-encode-过滤" tabindex="-1"><a class="header-anchor" href="#_3-4-xss的防范措施-encode-过滤" aria-hidden="true">#</a> 3.4 XSS的防范措施（encode + 过滤）</h3><p><strong>XSS的防范措施主要有三个：</strong></p><p><strong>1. 编码</strong>：</p><blockquote><p>对用户输入的数据进行<code>HTML Entity</code>编码。</p></blockquote><p>如上图所示，把字符转换成 转义字符。</p><blockquote><p><code>Encode</code>的作用是将<code>$var</code>等一些字符进行转化，使得浏览器在最终输出结果上是一样的。</p></blockquote><p>比如说这段代码：</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>若不进行任何处理，则浏览器会执行alert的js操作，实现XSS注入。</p></blockquote><blockquote><p>进行编码处理之后，L在浏览器中的显示结果就是<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>，实现了将``$var<code>作为纯文本进行输出，且不引起J</code>avaScript`的执行。</p></blockquote><p><strong>2、过滤：</strong></p><ul><li>移除用户输入的和事件相关的属性。如<code>onerror</code>可以自动触发攻击，还有<code>onclick</code>等。（总而言是，过滤掉一些不安全的内容）</li><li>移除用户输入的<code>Style</code>节点、<code>Script</code>节点、<code>Iframe</code>节点。（尤其是<code>Script</code>节点，它可是支持跨域的呀，一定要移除）。</li></ul><p><strong>3、校正</strong></p><ul><li>避免直接对<code>HTML Entity</code>进行解码。</li><li>使用<code>DOM Parse</code>转换，校正不配对的<code>DOM</code>标签。</li></ul><blockquote><p>备注：我们应该去了解一下<code>DOM Parse</code>这个概念，它的作用是把文本解析成<code>DOM</code>结构。</p></blockquote><p>比较常用的做法是，通过第一步的编码转成文本，然后第三步转成<code>DOM</code>对象，然后经过第二步的过滤。</p><p><strong>还有一种简洁的答案：</strong></p><p>首先是encode，如果是富文本，就白名单。</p><h2 id="_4-csrf-和-xss-的区别" tabindex="-1"><a class="header-anchor" href="#_4-csrf-和-xss-的区别" aria-hidden="true">#</a> 4 CSRF 和 XSS 的区别</h2><blockquote><p>面试官还可能喜欢问二者的区别。</p></blockquote><p><strong>区别一：</strong></p><ul><li><code>CSRF</code>：需要用户先登录网站<code>A</code>，获取 <code>cookie</code></li><li><code>XSS</code>：不需要登录。</li></ul><p><strong>区别二：（原理的区别）</strong></p><ul><li><code>CSRF</code>：是利用网站<code>A</code>本身的漏洞，去请求网站<code>A</code>的<code>api</code>。</li><li><code>XSS</code>：是向网站 <code>A</code> 注入 <code>JS</code>代码，然后执行 <code>JS</code> 里的代码，篡改网站<code>A</code>的内容。</li></ul>',66)],l={},s=(0,c(13860).Z)(l,[["render",function(e,o){return(0,t.wg)(),(0,t.iD)("div",null,d)}]])},13860:(e,o)=>{o.Z=(e,o)=>{const c=e.__vccOpts||e;for(const[e,t]of o)c[e]=t;return c}},99058:(e,o,c)=>{c.r(o),c.d(o,{data:()=>t});const t=JSON.parse('{"key":"v-46f671ed","path":"/Interview/base/CSRF_and_XSS.html","title":"安全问题：XSS和CSRF","lang":"zh-CN","frontmatter":{"title":"安全问题：XSS和CSRF","icon":null,"date":"2022-12-15T00:00:00.000Z","category":["Interview"],"summary":"1 前言 \\" 面试中的安全问题，明确来说，就两个方面：\\" CSRF：基本概念、攻击方式、防御措施; XSS：基本概念、攻击方式、防御措施; \\" 这两个问题，一般不会问太难。\\" \\" 有人问：SQL注入算吗？答案：这个其实跟前端的关系不是很大。\\" 2 CSRF \\" 问的不难，一般问：\\" CSRF的基本概念、缩写、全称; 攻击原理; 防御措施; \\" 如果把攻击原理","head":[["meta",{"property":"og:url","content":"https://0808200.xyz/Interview/base/CSRF_and_XSS.html"}],["meta",{"property":"og:site_name","content":"𝑀𝑟.𝑔𝑜𝑜𝑔𝑥ℎ"}],["meta",{"property":"og:title","content":"安全问题：XSS和CSRF"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-01-17T08:24:10.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:published_time","content":"2022-12-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-17T08:24:10.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"1 前言","slug":"_1-前言","children":[]},{"level":2,"title":"2 CSRF","slug":"_2-csrf","children":[{"level":3,"title":"2.1 CSRF的基本概念、缩写、全称","slug":"_2-1-csrf的基本概念、缩写、全称","children":[]},{"level":3,"title":"2.2 CSRF的攻击原理","slug":"_2-2-csrf的攻击原理","children":[]},{"level":3,"title":"2.3 CSRF如何防御","slug":"_2-3-csrf如何防御","children":[]}]},{"level":2,"title":"3 XSS","slug":"_3-xss","children":[{"level":3,"title":"3.1 XSS的基本概念","slug":"_3-1-xss的基本概念","children":[]},{"level":3,"title":"3.2 XSS的攻击原理","slug":"_3-2-xss的攻击原理","children":[]},{"level":3,"title":"3.3 XSS的攻击方式","slug":"_3-3-xss的攻击方式","children":[]},{"level":3,"title":"3.4 XSS的防范措施（encode + 过滤）","slug":"_3-4-xss的防范措施-encode-过滤","children":[]}]},{"level":2,"title":"4 CSRF 和 XSS 的区别","slug":"_4-csrf-和-xss-的区别","children":[]}],"git":{"createdTime":1673943850000,"updatedTime":1673943850000,"contributors":[{"name":"googxh","email":"gxh522@qq.com","commits":1}]},"readingTime":{"minutes":4.41,"words":1323},"filePathRelative":"Interview/base/CSRF_and_XSS.md","localizedDate":"2022年12月15日"}')}}]);