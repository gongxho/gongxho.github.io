"use strict";(self.webpackChunkmyblog=self.webpackChunkmyblog||[]).push([[26759],{58109:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});var e=a(60329);const t=[(0,e.uE)('<h2 id="_1-前言" tabindex="-1"><a class="header-anchor" href="#_1-前言" aria-hidden="true">#</a> 1 前言</h2><blockquote><p>类与实例：</p></blockquote><ul><li>类的声明</li><li>生成实例</li></ul><p><strong>类与继承：</strong></p><ul><li>如何实现继承：继承的本质就是原型链</li><li>继承的几种方式</li></ul><h2 id="_2-类的定义、实例化" tabindex="-1"><a class="header-anchor" href="#_2-类的定义、实例化" aria-hidden="true">#</a> 2 类的定义、实例化</h2><h3 id="_2-1-类的定义-类的声明" tabindex="-1"><a class="header-anchor" href="#_2-1-类的定义-类的声明" aria-hidden="true">#</a> 2.1 类的定义/类的声明</h3><p><strong>方式一</strong>：用构造函数模拟类（传统写法）</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>    <span class="token keyword">function</span> <span class="token function">Animal1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;smyhvae&#39;</span><span class="token punctuation">;</span> <span class="token comment">//通过this，表明这是一个构造函数</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>方式二</strong>：用 class 声明（<code>ES6</code>的写法）</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>    <span class="token keyword">class</span> <span class="token class-name">Animal2</span> <span class="token punctuation">{</span>\n        <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//可以在构造函数里写属性</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>控制台的效果：</p><p><img src="http://img.smyhvae.com/20180307_0957.png" alt=""></p><h3 id="_2-2-实例化" tabindex="-1"><a class="header-anchor" href="#_2-2-实例化" aria-hidden="true">#</a> 2.2 实例化</h3><p>类的实例化很简单，直接 <code>new</code> 出来即可。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Animal1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Animal2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//实例化。如果括号里没有参数，则括号可以省略</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="http://img.smyhvae.com/20180307_1000.png" alt=""></p><h2 id="_3-继承的几种方式" tabindex="-1"><a class="header-anchor" href="#_3-继承的几种方式" aria-hidden="true">#</a> 3 继承的几种方式</h2><blockquote><p>继承的本质就是原型链。</p></blockquote><p><strong>继承的方式有几种？每种形式的优缺点是</strong>？这些问题必问的。其实就是考察你对原型链的掌握程度。</p><h3 id="_3-1-方式一-借助构造函数" tabindex="-1"><a class="header-anchor" href="#_3-1-方式一-借助构造函数" aria-hidden="true">#</a> 3.1 方式一：借助构造函数</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>    <span class="token keyword">function</span> <span class="token function">Parent1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;parent1 的属性&#39;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">function</span> <span class="token function">Child1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">Parent1</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//【重要】此处用 call 或 apply 都行：改变 this 的指向</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;child1 的属性&#39;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Child1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>【重要】上方代码中，最重要的那行代码：在子类的构造函数里写了<code>Parent1.call(this);</code>，意思是：<strong>让Parent的构造函数在child的构造函数中执行</strong>。发生的变化是：<strong>改变this的指向</strong>，parent的实例 --&gt; 改为指向child的实例。导致 parent的实例的属性挂在到了child的实例上，这就实现了继承。</p></blockquote><p>打印结果：</p><p><img src="http://img.smyhvae.com/20180307_1015.png" alt=""></p><blockquote><p>上方结果表明：<code>child</code>先有了 <code>parent</code> 实例的属性（继承得以实现），再有了<code>child</code> 实例的属性。</p></blockquote><p><strong>分析</strong>：</p><blockquote><p>这种方式，虽然改变了 <code>this</code> 的指向，但是，<strong>Child1 无法继承 <code>Parent1</code> 的原型</strong>。也就是说，如果我给 <code>Parent1</code> 的原型增加一个方法：</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>    <span class="token class-name">Parent1</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>上面这个方法是无法被 <code>Child1</code> 继承的。如下：</p></blockquote><p><img src="http://img.smyhvae.com/20180307_1030.png" alt=""></p><h3 id="_3-2-方法二-通过原型链实现继承" tabindex="-1"><a class="header-anchor" href="#_3-2-方法二-通过原型链实现继承" aria-hidden="true">#</a> 3.2 方法二：通过原型链实现继承</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>    <span class="token comment">/*\n    通过原型链实现继承\n     */</span>\n    <span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Parent 的属性&#39;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;Child 的属性&#39;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token class-name">Child</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//【重要】</span>\n\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打印结果：</p><p><img src="http://img.smyhvae.com/20180307_1109.png" alt=""></p><blockquote><p>【重要】上方代码中，最重要的那行：每个函数都有<code>prototype</code>属性，于是，构造函数也有这个属性，这个属性是一个对象。现在，<strong>我们把<code>Parent</code>的实例赋值给了<code>Child</code>的<code>prototye</code></strong>，从而实现<strong>继承</strong>。此时，<code>Child</code>构造函数、<code>Parent</code>的实例、<code>Child</code>的实例构成一个三角关系。于是：</p></blockquote><ul><li><code>new Child.__proto__ === new Parent()</code>的结果为<code>true</code></li></ul><p><strong>分析：</strong></p><ul><li>这种继承方式，<strong>Child 可以继承 Parent 的原型</strong>，但有个缺点：</li></ul><blockquote><p>缺点是：<strong>如果修改 child1实例的name属性，child2实例中的name属性也会跟着改变</strong>。</p></blockquote><p>如下：</p><p><img src="http://img.smyhvae.com/20180307_1123.png" alt=""></p><blockquote><p>上面的代码中， <code>child1</code>修改了<code>arr</code>属性，却发现，<code>child2</code>的<code>arr</code>属性也跟着改变了。这显然不太好，在业务中，两个子模块应该隔离才对。如果改了一个对象，另一个对象却发生了改变，就不太好。</p></blockquote><blockquote><p>造成这种缺点的原因是：<code>child1</code>和<code>child2</code>共用原型。即：<code>chi1d1.__proto__ === child2__proto__</code>是严格相同。而 arr方法是在 Parent 的实例上（即 Child实例的原型）的。</p></blockquote><h3 id="_3-3-方式三-组合的方式-构造函数-原型链" tabindex="-1"><a class="header-anchor" href="#_3-3-方式三-组合的方式-构造函数-原型链" aria-hidden="true">#</a> 3.3 方式三：组合的方式：构造函数 + 原型链</h3><p>就是把上面的两种方式组合起来：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>    <span class="token comment">/*\n    组合方式实现继承：构造函数、原型链\n     */</span>\n    <span class="token keyword">function</span> <span class="token function">Parent3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Parent 的属性&#39;</span><span class="token punctuation">;</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">function</span> <span class="token function">Child3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">Parent3</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//【重要1】执行 parent方法</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;Child 的属性&#39;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token class-name">Child3</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//【重要2】第二次执行parent方法</span>\n\n    <span class="token keyword">var</span> child <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这种方式，能解决之前两种方式的问题：既可以继承父类原型的内容，也不会造成原型里属性的修改。</li><li>这种方式的缺点是：让父亲<code>Parent</code>的构造方法执行了两次。</li><li><code>ES6</code>中的继承方式，一带而过即可，重点是要掌握<code>ES5</code>中的继承。</li></ul>',48)],p={},o=(0,a(13860).Z)(p,[["render",function(n,s){return(0,e.wg)(),(0,e.iD)("div",null,t)}]])},13860:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}},19429:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e=JSON.parse('{"key":"v-395a203f","path":"/Interview/base/objectoriented.html","title":"面向对象：类的定义和继承的几种方式","lang":"zh-CN","frontmatter":{"title":"面向对象：类的定义和继承的几种方式","icon":null,"date":"2022-12-15T00:00:00.000Z","category":["Interview"],"summary":"1 前言 \\" 类与实例：\\" 类的声明; 生成实例; 类与继承： 如何实现继承：继承的本质就是原型链; 继承的几种方式; 2 类的定义、实例化 2.1 类的定义/类的声明 方式一：用构造函数模拟类（传统写法） 方式二：用 class 声明（ES6的写法） 控制台的效果： 2.2 实例化 类的实例化很简单，直接 new 出来即可。 3 继承的几种方式 \\" 继承的","head":[["meta",{"property":"og:url","content":"https://0808200.xyz/Interview/base/objectoriented.html"}],["meta",{"property":"og:site_name","content":"𝑀𝑟.𝑔𝑜𝑜𝑔𝑥ℎ"}],["meta",{"property":"og:title","content":"面向对象：类的定义和继承的几种方式"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-01-17T08:24:10.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:published_time","content":"2022-12-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-17T08:24:10.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"1 前言","slug":"_1-前言","children":[]},{"level":2,"title":"2 类的定义、实例化","slug":"_2-类的定义、实例化","children":[{"level":3,"title":"2.1 类的定义/类的声明","slug":"_2-1-类的定义-类的声明","children":[]},{"level":3,"title":"2.2 实例化","slug":"_2-2-实例化","children":[]}]},{"level":2,"title":"3 继承的几种方式","slug":"_3-继承的几种方式","children":[{"level":3,"title":"3.1 方式一：借助构造函数","slug":"_3-1-方式一-借助构造函数","children":[]},{"level":3,"title":"3.2 方法二：通过原型链实现继承","slug":"_3-2-方法二-通过原型链实现继承","children":[]},{"level":3,"title":"3.3 方式三：组合的方式：构造函数 + 原型链","slug":"_3-3-方式三-组合的方式-构造函数-原型链","children":[]}]}],"git":{"createdTime":1673943850000,"updatedTime":1673943850000,"contributors":[{"name":"googxh","email":"gxh522@qq.com","commits":1}]},"readingTime":{"minutes":3.27,"words":981},"filePathRelative":"Interview/base/objectoriented.md","localizedDate":"2022年12月15日"}')}}]);