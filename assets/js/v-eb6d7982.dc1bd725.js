"use strict";(self.webpackChunkmyblog=self.webpackChunkmyblog||[]).push([[12275],{16050:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});var t=a(60329);const e=[(0,t.uE)('<h2 id="_1-前言" tabindex="-1"><a class="header-anchor" href="#_1-前言" aria-hidden="true">#</a> 1 前言</h2><blockquote><p>错误监控包含的内容是：</p></blockquote><ul><li>前端错误的分类</li><li>每种错误的捕获方式</li><li>上报错误的基本原理</li></ul><blockquote><p>面试时，可能有两种问法：</p></blockquote><ul><li>如何监测 <code>js</code> 错误？（开门见山的方式）</li><li>如何保证<strong>产品质量</strong>？（其实问的也是错误监控）</li></ul><h2 id="_2-前端错误的分类" tabindex="-1"><a class="header-anchor" href="#_2-前端错误的分类" aria-hidden="true">#</a> 2 前端错误的分类</h2><p>包括两种：</p><ul><li>即时运行错误（代码错误）</li><li>资源加载错误</li></ul><h2 id="_3-每种错误的捕获方式" tabindex="-1"><a class="header-anchor" href="#_3-每种错误的捕获方式" aria-hidden="true">#</a> 3 每种错误的捕获方式</h2><h3 id="_3-1-即时运行错误的捕获方式" tabindex="-1"><a class="header-anchor" href="#_3-1-即时运行错误的捕获方式" aria-hidden="true">#</a> 3.1 即时运行错误的捕获方式</h3><p><strong>方式1</strong>：<code>try ... catch</code>。</p><blockquote><p>这种方式要部署在代码中。</p></blockquote><p><strong>方式2：</strong><code>window.onerror</code>函数。这个函数是全局的。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>\twindow<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msg<span class="token punctuation">,</span> url<span class="token punctuation">,</span> row<span class="token punctuation">,</span> col<span class="token punctuation">,</span> error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>参数解释：</p></blockquote><ul><li><code>msg</code>为异常基本信息</li><li><code>source</code>为发生异常<code>Javascript</code>文件的<code>url</code></li><li><code>row</code>为发生错误的行号</li></ul><blockquote><p>方式二中的<code>window.onerror</code>是属于DOM0的写法，我们也可以用DOM2的写法：<code>window.addEventListener(&quot;error&quot;, fn);</code>也可以。</p></blockquote><p><strong>问题延伸1：</strong></p><p><code>window.onerror</code>默认无法捕获<strong>跨域</strong>的<code>js</code>运行错误。捕获出来的信息如下：（基本属于无效信息）</p><blockquote><p>比如说，我们的代码想引入<code>B</code>网站的<code>b.js</code>文件，怎么捕获它的异常呢？</p></blockquote><p><strong>解决办法</strong>：在方法二的基础之上，做如下操作：</p><ol><li>在<code>b.js</code>文件里，加入如下 <code>response</code> <code>header</code>，表示允许跨域：（或者世界给静态资源<code>b.js</code>加这个 response header）</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>\tAccess<span class="token operator">-</span>Control<span class="token operator">-</span>Allow<span class="token operator">-</span>Origin<span class="token operator">:</span> <span class="token operator">*</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>引入第三方的文件<code>b.js</code>时，在<code>&lt;script&gt;</code>标签中增加<code>crossorigin</code>属性；</li></ol><p><strong>问题延伸2：</strong></p><blockquote><p>只靠方式二中的<code>window.onerror</code>是不够的，因为我们无法获取文件名是什么，不知道哪里出了错误。解决办法：把<strong>堆栈</strong>信息作为msg打印出来，堆栈里很详细。</p></blockquote><h3 id="_3-2-资源加载错误的捕获方式" tabindex="-1"><a class="header-anchor" href="#_3-2-资源加载错误的捕获方式" aria-hidden="true">#</a> 3.2 资源加载错误的捕获方式</h3><blockquote><p>上面的<code>window.onerror</code>只能捕获即时运行错误，无法捕获资源加载错误。原理是：资源加载错误，并不会向上冒泡，<code>object.onerror</code>捕获后就会终止（不会冒泡给<code>window</code>），所以<code>window.onerror</code>并不能捕获资源加载错误。</p></blockquote><ul><li><strong>方式1</strong>：<code>object.onerror</code>。<code>img</code>标签、<code>script</code>标签等节点都可以添加<code>onerror</code>事件，用来捕获资源加载的错误。</li><li><strong>方式2</strong>：performance.getEntries。可以获取所有已加载资源的加载时长，通过这种方式，可以间接的拿到没有加载的资源错误。</li></ul><p>举例：</p><blockquote><p>浏览器打开一个网站，在<code>Console</code>控制台下，输入：</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>\tperformance<span class="token punctuation">.</span><span class="token function">getEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者输入：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>\tperformance<span class="token punctuation">.</span><span class="token function">getEntries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>上面这个<code>api</code>，返回的是数组，既然是数组，就可以用<code>forEach</code>遍历。打印出来的资源就是<strong>已经成功加载</strong>的资源。；</p></blockquote><p><img src="http://img.smyhvae.com/20180311_2030.png" alt=""></p><blockquote><p>再入<code>document.getElementsByTagName(&#39;img&#39;)</code>，就会显示出所有<strong>需要加载</strong>的的img集合。</p></blockquote><blockquote><p>于是，<code>document.getElementsByTagName(&#39;img&#39;)</code>获取的资源数组减去通过<code>performance.getEntries()</code>获取的资源数组，剩下的就是没有成功加载的，这种方式可以间接捕获到资源加载错误。</p></blockquote><p>这种方式非常有用，一定要记住。</p><p>**方式3；**Error事件捕获。</p><blockquote><p>源加载错误，虽然会阻止冒泡，但是不会阻止捕获。我们可以在捕获阶段绑定error事件。例如：</p></blockquote><p><img src="http://img.smyhvae.com/20180311_2040.png" alt=""></p><blockquote><p>**总结：**如果我们能回答出后面的两种方式，面试官对我们的印象会大大增加。既可以体现出我们对错误监控的了解，还可以体现出我们对事件模型的掌握。</p></blockquote><h2 id="_4-错误上报的两种方式" tabindex="-1"><a class="header-anchor" href="#_4-错误上报的两种方式" aria-hidden="true">#</a> 4 错误上报的两种方式</h2><ul><li><strong>方式一</strong>：采用Ajax通信的方式上报（此方式虽然可以上报错误，但是我们并不采用这种方式）</li><li>**方式二：**利用Image对象上报（推荐。网站的监控体系都是采用的这种方式）</li></ul><blockquote><p>方式二的实现方式如下：</p></blockquote><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n\t<span class="token comment">//通过Image对象进行错误上报</span>\n    <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&#39;http://smyhvae.com/myPath?badjs=msg&#39;</span><span class="token punctuation">;</span>   <span class="token comment">// myPath表示上报的路径（我要上报到哪里去）。后面的内容是自己加的参数。</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>打开浏览器，效果如下：</p></blockquote><p><img src="http://img.smyhvae.com/20180311_2055.png" alt=""></p><p>上图中，红色那一栏表明，我的请求已经发出去了。点进去看看：</p><p><img src="http://img.smyhvae.com/20180311_2057.png" alt=""></p><blockquote><p>这种方式，不需要借助第三方的库，一行代码即可搞定。</p></blockquote>',52)],o={},p=(0,a(13860).Z)(o,[["render",function(n,s){return(0,t.wg)(),(0,t.iD)("div",null,e)}]])},13860:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}},27974:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-eb6d7982","path":"/Interview/base/the_frontend_monitoring_errors.html","title":"前端错误监控","lang":"zh-CN","frontmatter":{"title":"前端错误监控","icon":null,"date":"2022-12-15T00:00:00.000Z","category":["Interview"],"summary":"1 前言 \\" 错误监控包含的内容是：\\" 前端错误的分类; 每种错误的捕获方式; 上报错误的基本原理; \\" 面试时，可能有两种问法：\\" 如何监测 js 错误？（开门见山的方式）; 如何保证产品质量？（其实问的也是错误监控）; 2 前端错误的分类 包括两种： 即时运行错误（代码错误）; 资源加载错误; 3 每种错误的捕获方式 3.1 即时运行错误的捕获方式 方式","head":[["meta",{"property":"og:url","content":"https://0808200.xyz/Interview/base/the_frontend_monitoring_errors.html"}],["meta",{"property":"og:site_name","content":"𝑀𝑟.𝑔𝑜𝑜𝑔𝑥ℎ"}],["meta",{"property":"og:title","content":"前端错误监控"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-01-17T08:24:10.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:published_time","content":"2022-12-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-17T08:24:10.000Z"}]]},"excerpt":"","headers":[{"level":2,"title":"1 前言","slug":"_1-前言","children":[]},{"level":2,"title":"2 前端错误的分类","slug":"_2-前端错误的分类","children":[]},{"level":2,"title":"3 每种错误的捕获方式","slug":"_3-每种错误的捕获方式","children":[{"level":3,"title":"3.1 即时运行错误的捕获方式","slug":"_3-1-即时运行错误的捕获方式","children":[]},{"level":3,"title":"3.2 资源加载错误的捕获方式","slug":"_3-2-资源加载错误的捕获方式","children":[]}]},{"level":2,"title":"4 错误上报的两种方式","slug":"_4-错误上报的两种方式","children":[]}],"git":{"createdTime":1673943850000,"updatedTime":1673943850000,"contributors":[{"name":"googxh","email":"gxh522@qq.com","commits":1}]},"readingTime":{"minutes":3.59,"words":1077},"filePathRelative":"Interview/base/the_frontend_monitoring_errors.md","localizedDate":"2022年12月15日"}')}}]);